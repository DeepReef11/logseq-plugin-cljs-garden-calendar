{"version":3,"sources":["datascript/built_ins.cljc"],"mappings":"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","names":["var_args","args__4870__auto__","len__4864__auto__","i__4865__auto__","argseq__4871__auto__","cljs.core/IndexedSeq","datascript.built-ins/-differ?","seq30819","self__4852__auto__","cljs.core/seq","xs","l","cljs.core/count","cljs.core.not_EQ_","cljs.core.take","cljs.core.drop","datascript.built-ins/-get-else","db","e","a","else-val","cljs.core.ex_info","temp__5755__auto__","datom","cljs.core/first","datascript.db/-search","datascript.built-ins/-get-some","seq30837","G__30838","cljs.core/next","G__30839","self__4851__auto__","as","cljs.core.reduce","_","temp__5757__auto__","cljs.core/reduced","datascript.built-ins/-missing?","cljs.core.get","datascript.impl.entity/entity","datascript.built-ins/and-fn","seq30847","args","b","datascript.built-ins/or-fn","seq30861","cljs.core//","datascript.built-ins/query-fns","cljs.core/=","cljs.core/==","cljs.core/not=","cljs.core/<","cljs.core/>","cljs.core/<=","cljs.core/>=","cljs.core/+","cljs.core/-","cljs.core/*","cljs.core/quot","cljs.core/rem","cljs.core/mod","cljs.core/inc","cljs.core/dec","cljs.core/max","cljs.core/min","cljs.core/zero?","cljs.core/pos?","cljs.core/neg?","cljs.core/even?","cljs.core/odd?","cljs.core/compare","cljs.core/rand","cljs.core/rand-int","cljs.core/true?","cljs.core/false?","cljs.core/nil?","cljs.core/some?","cljs.core/not","cljs.core/complement","cljs.core/identical?","cljs.core/identity","cljs.core/keyword","cljs.core/meta","cljs.core/name","cljs.core/namespace","cljs.core/type","cljs.core/vector","cljs.core/list","cljs.core/set","cljs.core/hash-map","cljs.core/array-map","cljs.core/range","cljs.core/not-empty","cljs.core/empty?","cljs.core/contains?","cljs.core/str","cljs.core/pr-str","cljs.core/print-str","cljs.core/println-str","cljs.core/prn-str","cljs.core/subs","cljs.core/re-find","cljs.core/re-matches","cljs.core/re-seq","cljs.core/re-pattern","clojure.string/blank?","clojure.string/includes?","clojure.string/starts-with?","clojure.string/ends-with?","datascript.built-ins/aggregate-sum","coll","datascript.built-ins/aggregate-avg","datascript.built-ins/aggregate-median","terms","cljs.core.sort","size","med","G__30866","cljs.core.nth","datascript.built-ins/aggregate-variance","mean","sum","iter__4652__auto__","s__30868","cljs.core/LazySeq","temp__5753__auto__","cljs.core/chunked-seq?","c__4650__auto__","size__4651__auto__","b__30870","cljs.core/chunk-buffer","i__30869","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__30867","cljs.core/chunk-rest","cljs.core/cons","cljs.core/rest","x","delta","datascript.built-ins/aggregate-stddev","js/Math.sqrt","G__30873","datascript.built-ins/aggregate-min","js/Error","acc","n","cljs.core/vec","cljs.core.conj","cljs.core/last","cljs.core/butlast","G__30875","datascript.built-ins/aggregate-max","G__30877","datascript.built-ins/aggregate-rand","cljs.core/rand-nth","cljs.core.repeatedly","datascript.built-ins/aggregate-sample","cljs.core/shuffle","datascript.built-ins/aggregate-count-distinct","cljs.core.distinct","datascript.built-ins/aggregates","cljs.core/chunk-first"],"sourcesContent":["(ns datascript.built-ins\n  (:require\n   [clojure.string :as str]\n   [datascript.db :as db #?(:cljs :refer-macros :clj :refer) [raise]]\n   [datascript.impl.entity :as de]))\n\n(defn- -differ? [& xs]\n  (let [l (count xs)]\n    (not= (take (/ l 2) xs) (drop (/ l 2) xs))))\n\n(defn- -get-else\n  [db e a else-val]\n  (when (nil? else-val)\n    (raise \"get-else: nil default value is not supported\" {:error :query/where}))\n  (if-some [datom (first (db/-search db [e a]))]\n    (:v datom)\n    else-val))\n\n(defn- -get-some\n  [db e & as]\n  (reduce\n   (fn [_ a]\n     (when-some [datom (first (db/-search db [e a]))]\n       (reduced [(:a datom) (:v datom)])))\n   nil\n   as))\n\n(defn- -missing?\n  [db e a]\n  (nil? (get (de/entity db e) a)))\n\n(defn- and-fn [& args]\n  (reduce (fn [a b]\n            (if b b (reduced b))) true args))\n            \n(defn- or-fn [& args]\n  (reduce (fn [a b]\n            (if b (reduced b) b)) nil args))\n\n(def query-fns {\n  '= =, '== ==, 'not= not=, '!= not=, '< <, '> >, '<= <=, '>= >=, '+ +, '- -,\n  '* *, '/ /, 'quot quot, 'rem rem, 'mod mod, 'inc inc, 'dec dec, 'max max, 'min min,\n  'zero? zero?, 'pos? pos?, 'neg? neg?, 'even? even?, 'odd? odd?, 'compare compare,\n  'rand rand, 'rand-int rand-int,\n  'true? true?, 'false? false?, 'nil? nil?, 'some? some?, 'not not, 'and and-fn, 'or or-fn,\n  'complement complement, 'identical? identical?,\n  'identity identity, 'keyword keyword, 'meta meta, 'name name, 'namespace namespace, 'type type,\n  'vector vector, 'list list, 'set set, 'hash-map hash-map, 'array-map array-map,\n  'count count, 'range range, 'not-empty not-empty, 'empty? empty?, 'contains? contains?,\n  'str str, 'pr-str pr-str, 'print-str print-str, 'println-str println-str, 'prn-str prn-str, 'subs subs,\n  're-find re-find, 're-matches re-matches, 're-seq re-seq, 're-pattern re-pattern,\n  '-differ? -differ?, 'get-else -get-else, 'get-some -get-some, 'missing? -missing?, 'ground identity,\n  'clojure.string/blank? str/blank?, 'clojure.string/includes? str/includes?,\n  'clojure.string/starts-with? str/starts-with?, 'clojure.string/ends-with? str/ends-with?\n  'tuple vector, 'untuple identity\n})\n\n;; Aggregates\n\n(defn- aggregate-sum [coll]\n  (reduce + 0 coll))\n\n(defn- aggregate-avg [coll]\n  (/ (aggregate-sum coll) (count coll)))\n\n(defn- aggregate-median [coll]\n  (let [terms (sort coll)\n        size (count coll)\n        med (bit-shift-right size 1)]\n    (cond-> (nth terms med)\n      (even? size)\n      (-> (+ (nth terms (dec med)))\n          (/ 2)))))\n\n(defn- aggregate-variance [coll]\n  (let [mean (aggregate-avg coll)\n        sum  (aggregate-sum\n               (for [x coll\n                     :let [delta (- x mean)]]\n                 (* delta delta)))]\n    (/ sum (count coll))))\n\n(defn- aggregate-stddev [coll]\n  (#?(:cljs js/Math.sqrt :clj Math/sqrt) (aggregate-variance coll)))\n\n(defn- aggregate-min\n  ([coll]\n   (reduce\n     (fn [acc x]\n       (if (neg? (compare x acc))\n         x acc))\n     (first coll) (next coll)))\n  ([n coll]\n   (vec\n     (reduce (fn [acc x]\n               (cond\n                 (< (count acc) n)\n                   (sort compare (conj acc x))\n                 (neg? (compare x (last acc)))\n                   (sort compare (conj (butlast acc) x))\n                 :else acc))\n             [] coll))))\n\n(defn- aggregate-max\n  ([coll]\n   (reduce\n     (fn [acc x]\n       (if (pos? (compare x acc))\n         x acc))\n     (first coll) (next coll)))\n  ([n coll]\n    (vec\n      (reduce (fn [acc x]\n                (cond\n                  (< (count acc) n)\n                    (sort compare (conj acc x))\n                  (pos? (compare x (first acc)))\n                    (sort compare (conj (next acc) x))\n                  :else acc))\n              [] coll))))\n\n(defn- aggregate-rand\n  ([coll] (rand-nth coll))\n  ([n coll] (vec (repeatedly n #(rand-nth coll)))))\n\n(defn- aggregate-sample [n coll]\n  (vec (take n (shuffle coll))))\n\n(defn- aggregate-count-distinct [coll]\n  (count (distinct coll)))\n\n(def aggregates\n  {'sum      aggregate-sum\n   'avg      aggregate-avg\n   'median   aggregate-median\n   'variance aggregate-variance\n   'stddev   aggregate-stddev\n   'distinct set\n   'min      aggregate-min\n   'max      aggregate-max\n   'rand     aggregate-rand              \n   'sample   aggregate-sample\n   'count    count\n   'count-distinct aggregate-count-distinct})\n"]}