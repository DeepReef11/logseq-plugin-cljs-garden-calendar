{"version":3,"sources":["cljs_playground/core.cljs"],"mappings":";;AAWA,wCAAA,xCAAMA;AAAN,AAAA,0FAAA,mDAAA,mFAAA,8CAAA,4BAAA,mFAAA,oEAAA,UAAA,mFAAA,wDAAA,eAAA,mFAAA,qDAAA,2CAAA,uDAAA,2CAAA,uDAAA,sBAAA,oBAAA;;AAOA,qCAAA,rCAAMC;AAAN,AACE,wDAAA,jDAACC,oIACCF,8CACD,AAAQG;;AAIX,kCAAA,lCAAKC;AACL,AAAKC,mCAAY,mCAAA,lCAAGD;AACpB,kCAAA,oFAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,xLAAKE;AAcL;;;6CAAA,7CAAMC;AAAN,AAIE,QAAA,qCACK,AAACC,kDAAoB,AAACC,6CAAK,WAAKC;AAAL,AAAQ,QAAA,iFAAA,HAAuCA;qCAD/E,lCAC4FJ;;AAK9F,AAACK,yGAAQ,AAACJ;AAEV,2CAAA,3CAAMK,8FAAqBC;AAA3B,AACE,AAEE,AAAKC,6BAAM,CAAGD,SAAOT;;AACrB,QAAA,6HAAA,UAAA,IAAA,1CAC8CU;;AAMlD,sCAAA,tCAAOC;AAAP,AACE,QAAA,qRAAA,lCAUgBV;;AAalB,8CAAA,9CAAMW;AAAN,OACM,AAACC,PACD,4CAAA,WAAAC;AAAA,AAAQ,AACE,YAAA,ZAACC;;AAED,8BAAAD,9BAAKE;;AAEL,AAACD,YAAeC;;AAEhB,AAAKC,kCAAW,iBAAAC,mBAAMF;AAAN,AAAA,IAAAG,4CAAAC;IAAAC,4CAAA,AAAAC,yBAAAJ,iBAAA,KAAAK,SAAA;AAAA,AAAA,CAAAH,uCAAAC;;AAAA,IAAA,AAAA,AAAA,IAAAG,iBAAA,EAAA,AAAAC,6CAAAP,iBAAA,IAAA,OAAA,KAAA,KAAA,QAAA,AAAA,CAAAA,iBAAA,SAAA;AAAA,AAAAM;UAAA,AAAA,CAAAJ,uCAAAD;;;AAChB,AAAKO,+BAAQ,CAAA,sTAAA,+CAAA,nUAEC,AAACvB,6CACD,yCAAA,zCAACK,8CACD,yCAAA,zCAACA,8CACD,yCAAA,zCAACA,8CACD,yCAAA,zCAACA,8CACD,yCAAA,zCAACA,wDACQ,AAACG;;AACpB,OAACgB,0BAA6BV,gCAAWS;;;AAE7D,qCAAA,rCAAME;AAAN,AACE,AAAKC,mCAAYC;;AACjB,IAAAC,WAAA;IAAAC,WAAA;AAAA,AAEE,AAAI,yGAAA,zGAACzB;;AACD,OAACK;;AAHP,AAAA,wIAAAmB,SAAAC,uDAAAD,SAAAC,zMAACH,iEAAAA,oFAAAA;;AAKH,mBAAA,nBAACI;AAED,qCAAA,2CAAA,yDAAA,2CAAA,+EAAA,aAAA,0DAAA,2CAAA,+EAAA,pcAAKC;AAGL,kFAAA,mFAAA,0DAAA,/NAACC,+CAAOD;AACR,AAAA,6GAAoB,AAAA,wFAAUA;AAe9B,4BAAA,5BAAME;AAAN,AACE,mBAAA,nBAACH;;AACD,OAACL;;AACH,4BAAA,5BAAMS;AAAN,OACM,AAACC,aAAgBF,pBACjB,qDAAQG","names":["cljs-playground.core/simple-component","cljs-playground.core/render-simple","reagent.dom.render","js/document","cljs-playground.core/pxMultWeek","cljs-playground.core/pxMultMonth","cljs-playground.core/monthsName","cljs-playground.core/render-calendar-month","clojure.string.join","cljs.core.mapv","x","cljs.core.println","cljs-playground.core/render-calendar-bar","lenght","cljs-playground.core/width","cljs-playground.core/calendar-style","cljs-playground.core/create-garden-calendar","js/logseq.Editor.getCurrentBlock","p1__39198#","js/console.log","cljs-playground.core/result","cljs-playground.core/block-uuid","target-obj-39199","*runtime-state*-orig-val__39201","oops.state/*runtime-state*","*runtime-state*-temp-val__39202","oops.state/prepare-state","js/Error","next-obj-39200","oops.core/validate-object-access-dynamically","cljs-playground.core/content","js/logseq.Editor.updateBlock","cljs-playground.core/slashcommands","cljs-playground.core/regSlashCmd","js/logseq.Editor.registerSlashCommand","G__39203","G__39204","js/logseq.App.showMsg","cljs-playground.core/calendar-data","cljs.core.get_in","cljs-playground.core/main","cljs-playground.core/init","js/logseq.ready","js/console.error"],"sourcesContent":["(ns cljs-playground.core\n  (:require [\"@logseq/libs\"] ;; [applied-science.js-interop :as j]\n\n ;; [cljs-http.client :as http]\n ;; [cljs-http.client :as http]\n ;; [datascript.core :as d]\n            [reagent.dom :as rdom]\n            [promesa.core :as p]\n            [oops.core :refer [oget oset! ocall oapply ocall! oapply!\n                               oget+ oset!+ ocall+ oapply+ ocall!+ oapply!+]]))\n\n(defn simple-component []\n  [:div\n   [:p \"I am a component!\"]\n   [:p.someclass\n    \"I have \" [:strong \"bold\"]\n    [:span {:style {:color \"red\"}} \" and red \"] \"text.\"]])\n\n(defn render-simple []\n  (rdom/render\n   [simple-component]\n   (.-body js/document)))\n\n; Calendar\n\n(def pxMultWeek 12)\n(def pxMultMonth (* pxMultWeek 4))\n(def monthsName [\"Jan\"\n                 \"Feb\"\n                 \"Mar\"\n                 \"Apr\"\n                 \"May\"\n                 \"Jun\"\n                 \"Jul\"\n                 \"Aug\"\n                 \"Sep\"\n                 \"Oct\"\n                 \"Nov\"\n                 \"Dec\"\n                 ])\n\n(defn render-calendar-month\n  \"Render months on top of calendar\"\n  []\n  \n  (str \"<div class=\\\"calendar-month-row\\\">\" \n       (clojure.string/join (mapv (fn [x] (str \"<div class=\\\"calendar-month\\\">|\" x \"</div>\")) monthsName ) ) \n       \n       \"|</div>\")\n\n  )\n(println (render-calendar-month))\n\n(defn render-calendar-bar [lenght]\n  (do\n\n    (def width (* lenght pxMultWeek))\n    (str \"\n      <div class=\\\"calendar-bar\\\" style=\\\"width:\" width \"px;\\\" >\"\n         \" \"\n         \"</div>\")))\n\n\n\n(defn  calendar-style []\n  (str \"<style>\n  .calendar-bar {\n      background-color: blue;\n       height: 0.5em;\n  }\n       .calendar-month-row {\n          display:flex;\n\n       }\n       .calendar-month {\n          width:\" pxMultMonth \"px;\n       }\n .calendar-month:nth-child(odd) {\n       background-color: lightblue;\n      } \n       .calendar {\n       display: flex;\n       flex-direction: column;\n       \n       }\n</style>\n  \"))\n\n(defn create-garden-calendar []\n  (-> (js/logseq.Editor.getCurrentBlock)\n      (.then #(do\n                (js/console.log \"3\")\n\n                (def result %)\n\n                (js/console.log result)\n                ; (js/console.log (simple-component))\n                (def block-uuid (oget result \"uuid\"))\n                (def content (str \n                              \"<body><div class=\\\"calendar\\\" >\" \n                              (render-calendar-month) \n                              (render-calendar-bar 2) \n                              (render-calendar-bar 3)  \n                              (render-calendar-bar 4)  \n                              (render-calendar-bar 6)  \n                              (render-calendar-bar 20)  \n                              \"</div>\" (calendar-style) \"</body>\"))\n                (-> (js/logseq.Editor.updateBlock block-uuid content))))))\n\n(defn slashcommands []\n  (def regSlashCmd js/logseq.Editor.registerSlashCommand)\n  (regSlashCmd\n   \"create-garden-calendar\"\n   #(do (println \"ok4\")\n        (create-garden-calendar))))\n\n(js/logseq.App.showMsg \"Gardening rocks!\")\n\n(def calendar-data {:indoor {:week-before-frost -1}\n                    :outdoor {:week-before-frost -10}})\n\n(get-in calendar-data [:outdoor :week-before-frost])\n(:week-before-frost (:outdoor calendar-data))\n; (js/logseq.App.onMacroRendererSlotted (fn [^js params]\n    ; (let [slot (.-slot params)\n                                              ; payload (.-payload params)\n                                              ; args (.-arguments payload)\n                                              ; uuid (.-uuid payload)\n                                              ; ]\n                                          ; (js/Promise.resolve\n      ; (do\n                                            ; ( println args )\n                                            ; (println \"HERE!\"))))))\n\n; (fn [{slot, payload: {arguments: args, uuid}}] (println args))\n; (js/logseq.App.registerPageMenuItem )\n\n(defn main []\n  (js/logseq.App.showMsg \"Gardening rocks!\")\n  (slashcommands))\n(defn init []\n  (-> (js/logseq.ready main)\n      (.catch js/console.error)))\n"]}