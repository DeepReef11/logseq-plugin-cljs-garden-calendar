["^ ","~:output",["^ ","~:js","goog.provide('promesa.exec');\ngoog.scope(function(){\n  promesa.exec.goog$module$goog$object = goog.module.get('goog.object');\n});\npromesa.exec._STAR_default_scheduler_STAR_ = null;\npromesa.exec._STAR_default_executor_STAR_ = null;\n/**\n * Var that indicates the availability of virtual threads.\n */\npromesa.exec.virtual_threads_available_QMARK_ = false;\n/**\n * backward compatibility alias for `virtual-threads-available?`\n */\npromesa.exec.vthread_supported_QMARK_ = promesa.exec.virtual_threads_available_QMARK_;\npromesa.exec.noop = cljs.core.constantly(null);\nif((typeof promesa !== 'undefined') && (typeof promesa.exec !== 'undefined') && (typeof promesa.exec.default_scheduler !== 'undefined')){\n} else {\n/**\n * Default scheduled executor instance.\n */\npromesa.exec.default_scheduler = (new cljs.core.Delay((function (){\nreturn (promesa.exec.scheduled_executor.cljs$core$IFn$_invoke$arity$0 ? promesa.exec.scheduled_executor.cljs$core$IFn$_invoke$arity$0() : promesa.exec.scheduled_executor.call(null));\n}),null));\n}\nif((typeof promesa !== 'undefined') && (typeof promesa.exec !== 'undefined') && (typeof promesa.exec.default_executor !== 'undefined')){\n} else {\n/**\n * Default executor instance, ForkJoinPool/commonPool in JVM, MicrotaskExecutor on JS.\n */\npromesa.exec.default_executor = (new cljs.core.Delay((function (){\nreturn (promesa.exec.microtask_executor.cljs$core$IFn$_invoke$arity$0 ? promesa.exec.microtask_executor.cljs$core$IFn$_invoke$arity$0() : promesa.exec.microtask_executor.call(null));\n}),null));\n}\n/**\n * Default Executor instance that runs the task in the same thread.\n */\npromesa.exec.default_current_thread_executor = (new cljs.core.Delay((function (){\nreturn (promesa.exec.current_thread_executor.cljs$core$IFn$_invoke$arity$0 ? promesa.exec.current_thread_executor.cljs$core$IFn$_invoke$arity$0() : promesa.exec.current_thread_executor.call(null));\n}),null));\nif((typeof promesa !== 'undefined') && (typeof promesa.exec !== 'undefined') && (typeof promesa.exec.default_cached_executor !== 'undefined')){\n} else {\n/**\n * A global, cached thread executor service.\n */\npromesa.exec.default_cached_executor = promesa.exec.default_executor;\n}\nif((typeof promesa !== 'undefined') && (typeof promesa.exec !== 'undefined') && (typeof promesa.exec.default_thread_executor !== 'undefined')){\n} else {\n/**\n * A global, thread per task executor service.\n */\npromesa.exec.default_thread_executor = promesa.exec.default_executor;\n}\nif((typeof promesa !== 'undefined') && (typeof promesa.exec !== 'undefined') && (typeof promesa.exec.default_vthread_executor !== 'undefined')){\n} else {\n/**\n * A global, virtual thread per task executor service.\n */\npromesa.exec.default_vthread_executor = promesa.exec.default_executor;\n}\n/**\n * Returns true if `o` is an instane of Executor or satisfies IExecutor protocol.\n */\npromesa.exec.executor_QMARK_ = (function promesa$exec$executor_QMARK_(o){\nif((!((o == null)))){\nif(((false) || ((cljs.core.PROTOCOL_SENTINEL === o.promesa$protocols$IExecutor$)))){\nreturn true;\n} else {\nif((!o.cljs$lang$protocol_mask$partition$)){\nreturn cljs.core.native_satisfies_QMARK_(promesa.protocols.IExecutor,o);\n} else {\nreturn false;\n}\n}\n} else {\nreturn cljs.core.native_satisfies_QMARK_(promesa.protocols.IExecutor,o);\n}\n});\npromesa.exec.resolve_executor = (function promesa$exec$resolve_executor(var_args){\nvar G__46259 = arguments.length;\nswitch (G__46259) {\ncase 0:\nreturn promesa.exec.resolve_executor.cljs$core$IFn$_invoke$arity$0();\n\nbreak;\ncase 1:\nreturn promesa.exec.resolve_executor.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(promesa.exec.resolve_executor.cljs$core$IFn$_invoke$arity$0 = (function (){\nreturn promesa.exec.resolve_executor.cljs$core$IFn$_invoke$arity$1(null);\n}));\n\n(promesa.exec.resolve_executor.cljs$core$IFn$_invoke$arity$1 = (function (executor){\nif((executor == null)){\nreturn cljs.core.deref(promesa.exec.default_executor);\n} else {\nif(promesa.exec.executor_QMARK_(executor)){\nreturn executor;\n} else {\nif(cljs.core.delay_QMARK_(executor)){\nreturn promesa.exec.resolve_executor.cljs$core$IFn$_invoke$arity$1(cljs.core.deref(executor));\n} else {\nvar G__46264 = executor;\nvar G__46264__$1 = (((G__46264 instanceof cljs.core.Keyword))?G__46264.fqn:null);\nswitch (G__46264__$1) {\ncase \"default\":\nreturn cljs.core.deref(promesa.exec.default_executor);\n\nbreak;\ncase \"cached\":\nreturn cljs.core.deref(promesa.exec.default_cached_executor);\n\nbreak;\ncase \"thread\":\nreturn cljs.core.deref(promesa.exec.default_thread_executor);\n\nbreak;\ncase \"vthread\":\nreturn cljs.core.deref(promesa.exec.default_vthread_executor);\n\nbreak;\ncase \"same-thread\":\nreturn cljs.core.deref(promesa.exec.default_current_thread_executor);\n\nbreak;\ncase \"current-thread\":\nreturn cljs.core.deref(promesa.exec.default_current_thread_executor);\n\nbreak;\ndefault:\nthrow (new TypeError(\"invalid executor\"));\n\n}\n\n}\n}\n}\n}));\n\n(promesa.exec.resolve_executor.cljs$lang$maxFixedArity = 1);\n\npromesa.exec.resolve_scheduler = (function promesa$exec$resolve_scheduler(var_args){\nvar G__46268 = arguments.length;\nswitch (G__46268) {\ncase 0:\nreturn promesa.exec.resolve_scheduler.cljs$core$IFn$_invoke$arity$0();\n\nbreak;\ncase 1:\nreturn promesa.exec.resolve_scheduler.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(promesa.exec.resolve_scheduler.cljs$core$IFn$_invoke$arity$0 = (function (){\nreturn promesa.exec.resolve_scheduler.cljs$core$IFn$_invoke$arity$1(null);\n}));\n\n(promesa.exec.resolve_scheduler.cljs$core$IFn$_invoke$arity$1 = (function (scheduler){\nif((((scheduler == null)) || (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"default\",\"default\",-1987822328),scheduler)))){\nreturn cljs.core.deref(promesa.exec.default_scheduler);\n} else {\nreturn promesa.util.maybe_deref(scheduler);\n}\n}));\n\n(promesa.exec.resolve_scheduler.cljs$lang$maxFixedArity = 1);\n\npromesa.exec.wrap_bindings = (function promesa$exec$wrap_bindings(f){\nreturn f;\n});\n/**\n * Run the task in the provided executor, returns `nil`. Analogous to\n *   the `(.execute executor f)`. Fire and forget.\n */\npromesa.exec.exec_BANG_ = (function promesa$exec$exec_BANG_(var_args){\nvar G__46284 = arguments.length;\nswitch (G__46284) {\ncase 1:\nreturn promesa.exec.exec_BANG_.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn promesa.exec.exec_BANG_.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(promesa.exec.exec_BANG_.cljs$core$IFn$_invoke$arity$1 = (function (f){\nreturn promesa.protocols._exec_BANG_(promesa.exec.resolve_executor.cljs$core$IFn$_invoke$arity$1(promesa.exec._STAR_default_executor_STAR_),f);\n}));\n\n(promesa.exec.exec_BANG_.cljs$core$IFn$_invoke$arity$2 = (function (executor,f){\nreturn promesa.protocols._exec_BANG_(promesa.exec.resolve_executor.cljs$core$IFn$_invoke$arity$1(executor),f);\n}));\n\n(promesa.exec.exec_BANG_.cljs$lang$maxFixedArity = 2);\n\n/**\n * Run the task in the provided executor.\n */\npromesa.exec.run_BANG_ = (function promesa$exec$run_BANG_(var_args){\nvar G__46288 = arguments.length;\nswitch (G__46288) {\ncase 1:\nreturn promesa.exec.run_BANG_.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn promesa.exec.run_BANG_.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(promesa.exec.run_BANG_.cljs$core$IFn$_invoke$arity$1 = (function (f){\nreturn promesa.protocols._run_BANG_(promesa.exec.resolve_executor.cljs$core$IFn$_invoke$arity$1(promesa.exec._STAR_default_executor_STAR_),f);\n}));\n\n(promesa.exec.run_BANG_.cljs$core$IFn$_invoke$arity$2 = (function (executor,f){\nreturn promesa.protocols._run_BANG_(promesa.exec.resolve_executor.cljs$core$IFn$_invoke$arity$1(executor),f);\n}));\n\n(promesa.exec.run_BANG_.cljs$lang$maxFixedArity = 2);\n\n/**\n * Submit a task to be executed in a provided executor\n *   and return a promise that will be completed with\n *   the return value of a task.\n * \n *   A task is a plain clojure function.\n */\npromesa.exec.submit_BANG_ = (function promesa$exec$submit_BANG_(var_args){\nvar G__46301 = arguments.length;\nswitch (G__46301) {\ncase 1:\nreturn promesa.exec.submit_BANG_.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn promesa.exec.submit_BANG_.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(promesa.exec.submit_BANG_.cljs$core$IFn$_invoke$arity$1 = (function (f){\nreturn promesa.protocols._submit_BANG_(promesa.exec.resolve_executor.cljs$core$IFn$_invoke$arity$1(promesa.exec._STAR_default_executor_STAR_),f);\n}));\n\n(promesa.exec.submit_BANG_.cljs$core$IFn$_invoke$arity$2 = (function (executor,f){\nreturn promesa.protocols._submit_BANG_(promesa.exec.resolve_executor.cljs$core$IFn$_invoke$arity$1(executor),f);\n}));\n\n(promesa.exec.submit_BANG_.cljs$lang$maxFixedArity = 2);\n\n/**\n * Schedule a callable to be executed after the `ms` delay\n *   is reached.\n * \n *   In JVM it uses a scheduled executor service and in JS\n *   it uses the `setTimeout` function.\n */\npromesa.exec.schedule_BANG_ = (function promesa$exec$schedule_BANG_(var_args){\nvar G__46316 = arguments.length;\nswitch (G__46316) {\ncase 2:\nreturn promesa.exec.schedule_BANG_.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ncase 3:\nreturn promesa.exec.schedule_BANG_.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(promesa.exec.schedule_BANG_.cljs$core$IFn$_invoke$arity$2 = (function (ms,f){\nreturn promesa.protocols._schedule_BANG_(promesa.exec.resolve_scheduler.cljs$core$IFn$_invoke$arity$0(),ms,f);\n}));\n\n(promesa.exec.schedule_BANG_.cljs$core$IFn$_invoke$arity$3 = (function (scheduler,ms,f){\nreturn promesa.protocols._schedule_BANG_(promesa.exec.resolve_scheduler.cljs$core$IFn$_invoke$arity$1(scheduler),ms,f);\n}));\n\n(promesa.exec.schedule_BANG_.cljs$lang$maxFixedArity = 3);\n\n/**\n * Creates an executor instance that run tasks in the same thread.\n */\npromesa.exec.current_thread_executor = (function promesa$exec$current_thread_executor(){\nif((typeof promesa !== 'undefined') && (typeof promesa.exec !== 'undefined') && (typeof promesa.exec.t_promesa$exec46321 !== 'undefined')){\n} else {\n\n/**\n* @constructor\n * @implements {promesa.protocols.IExecutor}\n * @implements {cljs.core.IMeta}\n * @implements {cljs.core.IWithMeta}\n*/\npromesa.exec.t_promesa$exec46321 = (function (meta46322){\nthis.meta46322 = meta46322;\nthis.cljs$lang$protocol_mask$partition0$ = 393216;\nthis.cljs$lang$protocol_mask$partition1$ = 0;\n});\n(promesa.exec.t_promesa$exec46321.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = (function (_46323,meta46322__$1){\nvar self__ = this;\nvar _46323__$1 = this;\nreturn (new promesa.exec.t_promesa$exec46321(meta46322__$1));\n}));\n\n(promesa.exec.t_promesa$exec46321.prototype.cljs$core$IMeta$_meta$arity$1 = (function (_46323){\nvar self__ = this;\nvar _46323__$1 = this;\nreturn self__.meta46322;\n}));\n\n(promesa.exec.t_promesa$exec46321.prototype.promesa$protocols$IExecutor$ = cljs.core.PROTOCOL_SENTINEL);\n\n(promesa.exec.t_promesa$exec46321.prototype.promesa$protocols$IExecutor$_exec_BANG_$arity$2 = (function (this$,f){\nvar self__ = this;\nvar this$__$1 = this;\ntry{(f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null));\n\nreturn null;\n}catch (e46334){var _ = e46334;\nreturn null;\n}}));\n\n(promesa.exec.t_promesa$exec46321.prototype.promesa$protocols$IExecutor$_run_BANG_$arity$2 = (function (this$,f){\nvar self__ = this;\nvar this$__$1 = this;\ntry{return promesa.protocols._promise(cljs.core.comp.cljs$core$IFn$_invoke$arity$2(promesa.exec.noop,f));\n}catch (e46336){var cause = e46336;\nreturn promesa.protocols._promise(cause);\n}}));\n\n(promesa.exec.t_promesa$exec46321.prototype.promesa$protocols$IExecutor$_submit_BANG_$arity$2 = (function (this$,f){\nvar self__ = this;\nvar this$__$1 = this;\ntry{return promesa.protocols._promise((f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null)));\n}catch (e46337){var cause = e46337;\nreturn promesa.protocols._promise(cause);\n}}));\n\n(promesa.exec.t_promesa$exec46321.getBasis = (function (){\nreturn new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,\"meta46322\",\"meta46322\",528228813,null)], null);\n}));\n\n(promesa.exec.t_promesa$exec46321.cljs$lang$type = true);\n\n(promesa.exec.t_promesa$exec46321.cljs$lang$ctorStr = \"promesa.exec/t_promesa$exec46321\");\n\n(promesa.exec.t_promesa$exec46321.cljs$lang$ctorPrWriter = (function (this__4491__auto__,writer__4492__auto__,opt__4493__auto__){\nreturn cljs.core._write(writer__4492__auto__,\"promesa.exec/t_promesa$exec46321\");\n}));\n\n/**\n * Positional factory function for promesa.exec/t_promesa$exec46321.\n */\npromesa.exec.__GT_t_promesa$exec46321 = (function promesa$exec$current_thread_executor_$___GT_t_promesa$exec46321(meta46322){\nreturn (new promesa.exec.t_promesa$exec46321(meta46322));\n});\n\n}\n\nreturn (new promesa.exec.t_promesa$exec46321(cljs.core.PersistentArrayMap.EMPTY));\n});\n/**\n * An IExecutor that schedules tasks to be executed in the MicrotasksQueue.\n */\npromesa.exec.microtask_executor = (function promesa$exec$microtask_executor(){\nif((typeof promesa !== 'undefined') && (typeof promesa.exec !== 'undefined') && (typeof promesa.exec.t_promesa$exec46342 !== 'undefined')){\n} else {\n\n/**\n* @constructor\n * @implements {promesa.protocols.IExecutor}\n * @implements {cljs.core.IMeta}\n * @implements {cljs.core.IWithMeta}\n*/\npromesa.exec.t_promesa$exec46342 = (function (meta46343){\nthis.meta46343 = meta46343;\nthis.cljs$lang$protocol_mask$partition0$ = 393216;\nthis.cljs$lang$protocol_mask$partition1$ = 0;\n});\n(promesa.exec.t_promesa$exec46342.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = (function (_46344,meta46343__$1){\nvar self__ = this;\nvar _46344__$1 = this;\nreturn (new promesa.exec.t_promesa$exec46342(meta46343__$1));\n}));\n\n(promesa.exec.t_promesa$exec46342.prototype.cljs$core$IMeta$_meta$arity$1 = (function (_46344){\nvar self__ = this;\nvar _46344__$1 = this;\nreturn self__.meta46343;\n}));\n\n(promesa.exec.t_promesa$exec46342.prototype.promesa$protocols$IExecutor$ = cljs.core.PROTOCOL_SENTINEL);\n\n(promesa.exec.t_promesa$exec46342.prototype.promesa$protocols$IExecutor$_exec_BANG_$arity$2 = (function (this$,f){\nvar self__ = this;\nvar this$__$1 = this;\nreturn promesa.impl.promise.nextTick(f);\n}));\n\n(promesa.exec.t_promesa$exec46342.prototype.promesa$protocols$IExecutor$_run_BANG_$arity$2 = (function (this$,f){\nvar self__ = this;\nvar this$__$1 = this;\nreturn promesa.protocols._fmap(promesa.protocols._fmap(promesa.protocols._promise(null),(function (_){\ntry{return (f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null));\n}catch (e46352){var ___$1 = e46352;\nreturn null;\n}})),promesa.exec.noop);\n}));\n\n(promesa.exec.t_promesa$exec46342.prototype.promesa$protocols$IExecutor$_submit_BANG_$arity$2 = (function (this$,f){\nvar self__ = this;\nvar this$__$1 = this;\nreturn promesa.protocols._fmap(promesa.protocols._promise(null),(function (_){\nreturn (f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null));\n}));\n}));\n\n(promesa.exec.t_promesa$exec46342.getBasis = (function (){\nreturn new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,\"meta46343\",\"meta46343\",869076611,null)], null);\n}));\n\n(promesa.exec.t_promesa$exec46342.cljs$lang$type = true);\n\n(promesa.exec.t_promesa$exec46342.cljs$lang$ctorStr = \"promesa.exec/t_promesa$exec46342\");\n\n(promesa.exec.t_promesa$exec46342.cljs$lang$ctorPrWriter = (function (this__4491__auto__,writer__4492__auto__,opt__4493__auto__){\nreturn cljs.core._write(writer__4492__auto__,\"promesa.exec/t_promesa$exec46342\");\n}));\n\n/**\n * Positional factory function for promesa.exec/t_promesa$exec46342.\n */\npromesa.exec.__GT_t_promesa$exec46342 = (function promesa$exec$microtask_executor_$___GT_t_promesa$exec46342(meta46343){\nreturn (new promesa.exec.t_promesa$exec46342(meta46343));\n});\n\n}\n\nreturn (new promesa.exec.t_promesa$exec46342(cljs.core.PersistentArrayMap.EMPTY));\n});\n\n/**\n* @constructor\n * @implements {promesa.protocols.IScheduler}\n*/\npromesa.exec.Scheduler = (function (){\n});\n(promesa.exec.Scheduler.prototype.promesa$protocols$IScheduler$ = cljs.core.PROTOCOL_SENTINEL);\n\n(promesa.exec.Scheduler.prototype.promesa$protocols$IScheduler$_schedule_BANG_$arity$3 = (function (_,ms,f){\nvar self__ = this;\nvar ___$1 = this;\nvar df = promesa.impl.promise.deferred();\nvar tid = setTimeout((function (){\ntry{return promesa.protocols._resolve_BANG_(df,(f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null)));\n}catch (e46371){var cause = e46371;\nreturn promesa.protocols._reject_BANG_(df,cause);\n}}),ms);\npromesa.protocols._fnly(df,(function (___$2,c){\nif(cljs.core.truth_(promesa.impl.promise.isCancellationError(c))){\nreturn clearTimeout(tid);\n} else {\nreturn null;\n}\n}));\n\nreturn df;\n}));\n\n(promesa.exec.Scheduler.getBasis = (function (){\nreturn cljs.core.PersistentVector.EMPTY;\n}));\n\n(promesa.exec.Scheduler.cljs$lang$type = true);\n\n(promesa.exec.Scheduler.cljs$lang$ctorStr = \"promesa.exec/Scheduler\");\n\n(promesa.exec.Scheduler.cljs$lang$ctorPrWriter = (function (this__4491__auto__,writer__4492__auto__,opt__4493__auto__){\nreturn cljs.core._write(writer__4492__auto__,\"promesa.exec/Scheduler\");\n}));\n\n/**\n * Positional factory function for promesa.exec/Scheduler.\n */\npromesa.exec.__GT_Scheduler = (function promesa$exec$__GT_Scheduler(){\nreturn (new promesa.exec.Scheduler());\n});\n\n/**\n * A scheduled thread pool constructor. A ScheduledExecutor (IScheduler\n *   in CLJS) instance allows execute asynchronous tasks some time later.\n */\npromesa.exec.scheduled_executor = (function promesa$exec$scheduled_executor(var_args){\nvar args__4870__auto__ = [];\nvar len__4864__auto___46485 = arguments.length;\nvar i__4865__auto___46486 = (0);\nwhile(true){\nif((i__4865__auto___46486 < len__4864__auto___46485)){\nargs__4870__auto__.push((arguments[i__4865__auto___46486]));\n\nvar G__46487 = (i__4865__auto___46486 + (1));\ni__4865__auto___46486 = G__46487;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4871__auto__ = ((((0) < args__4870__auto__.length))?(new cljs.core.IndexedSeq(args__4870__auto__.slice((0)),(0),null)):null);\nreturn promesa.exec.scheduled_executor.cljs$core$IFn$_invoke$arity$variadic(argseq__4871__auto__);\n});\n\n(promesa.exec.scheduled_executor.cljs$core$IFn$_invoke$arity$variadic = (function (p__46387){\nvar map__46389 = p__46387;\nvar map__46389__$1 = cljs.core.__destructure_map(map__46389);\nvar parallelism = cljs.core.get.cljs$core$IFn$_invoke$arity$3(map__46389__$1,new cljs.core.Keyword(null,\"parallelism\",\"parallelism\",-930922333),(1));\nvar factory = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__46389__$1,new cljs.core.Keyword(null,\"factory\",\"factory\",63933746));\nreturn promesa.exec.__GT_Scheduler();\n}));\n\n(promesa.exec.scheduled_executor.cljs$lang$maxFixedArity = (0));\n\n/** @this {Function} */\n(promesa.exec.scheduled_executor.cljs$lang$applyTo = (function (seq46382){\nvar self__4852__auto__ = this;\nreturn self__4852__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq46382));\n}));\n\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:doc","Executors & Schedulers facilities.","~:file","promesa/exec.cljc","~:line",7,"~:column",5,"~:end-line",7,"~:end-column",17],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$clojure.pprint","~$cljs.pprint","~$clojure.spec.alpha","~$cljs.spec.alpha","~$react-dom","~$module$node_modules$react_dom$index","~$react","~$module$node_modules$react$index","~$clojure.core","~$cljs.core"],"~:use-macros",null,"~:excludes",["~#set",["~$await","~$pmap","~$run!"]],"~:name","~$promesa.exec","~:reader-aliases",["^ "],"~:op","~:ns","~:imports",null,"~:requires",["^ ","~$impl","~$promesa.impl.promise","~$promesa.protocols","^X","^H","^H","~$pt","^X","~$promesa.util","^Z","~$gobj","~$goog.object","~$goog","^11","^10","^10","^W","^W","~$pu","^Z"],"~:seen",["^K",["~:require"]],"~:uses",null,"~:require-macros",["^ ","^H","^H"],"~:form",["~#list",["~$ns","^P","Executors & Schedulers facilities.",["^18",["~:refer-clojure","~:exclude",["^N","^M","^L"]]],["^18",["^14",["^X","~:as","^Y"],["^Z","^1<","^12"],["^10","^1<","^["],["^W","^1<","^V"]]]]],"~:flags",["^ ","^14",["^K",[]]],"~:js-deps",["^ "],"~:deps",["^11","^H","^X","^Z","^10","^W"]],"^S","^P","~:resource-id",["~:shadow.build.classpath/resource","promesa/exec.cljc"],"~:compiled-at",1687284494808,"^Q",["^ ","^V","^W","^X","^X","^H","^H","^Y","^X","^Z","^Z","^[","^10","^11","^11","^10","^10","^W","^W","^12","^Z"],"~:resource-name","promesa/exec.cljc","~:warnings",[],"~:source",";; This Source Code Form is subject to the terms of the Mozilla Public\n;; License, v. 2.0. If a copy of the MPL was not distributed with this\n;; file, You can obtain one at http://mozilla.org/MPL/2.0/.\n;;\n;; Copyright (c) Andrey Antukh <niwi@niwi.nz>\n\n(ns promesa.exec\n  \"Executors & Schedulers facilities.\"\n  (:refer-clojure :exclude [run! pmap await])\n  (:require\n   [promesa.protocols :as pt]\n   [promesa.util :as pu]\n   #?(:cljs [goog.object :as gobj])\n   #?(:cljs [promesa.impl.promise :as impl]))\n  #?(:clj\n     (:import\n      clojure.lang.Var\n      java.lang.AutoCloseable\n      java.lang.Thread$UncaughtExceptionHandler\n      java.time.Duration\n      java.util.concurrent.BlockingQueue\n      java.util.concurrent.Callable\n      java.util.concurrent.CancellationException\n      java.util.concurrent.CompletableFuture\n      java.util.concurrent.CompletionException\n      java.util.concurrent.CompletionStage\n      java.util.concurrent.CountDownLatch\n      java.util.concurrent.ExecutionException\n      java.util.concurrent.Executor\n      java.util.concurrent.ExecutorService\n      java.util.concurrent.Executors\n      java.util.concurrent.ForkJoinPool\n      java.util.concurrent.ForkJoinPool$ForkJoinWorkerThreadFactory\n      java.util.concurrent.ForkJoinPool$ManagedBlocker\n      java.util.concurrent.ForkJoinWorkerThread\n      java.util.concurrent.Future\n      java.util.concurrent.ScheduledExecutorService\n      java.util.concurrent.SynchronousQueue\n      java.util.concurrent.ThreadFactory\n      java.util.concurrent.ThreadPoolExecutor\n      java.util.concurrent.TimeUnit\n      java.util.concurrent.TimeoutException\n      java.util.concurrent.atomic.AtomicLong\n      java.util.function.Supplier)))\n\n#?(:clj (set! *warn-on-reflection* true))\n\n;; --- Globals & Defaults (with CLJS Impl)\n\n(declare thread-factory)\n(declare scheduled-executor)\n(declare current-thread-executor)\n(declare ->ScheduledTask)\n\n#?(:clj  (declare cached-executor))\n#?(:cljs (declare microtask-executor))\n\n(def ^:dynamic *default-scheduler* nil)\n(def ^:dynamic *default-executor* nil)\n\n(def virtual-threads-available?\n  \"Var that indicates the availability of virtual threads.\"\n  #?(:clj (if (and (pu/has-method? Thread \"ofVirtual\")\n                   ;; the following should succeed with the `--enable-preview` java argument:\n                   ;; eval happens on top level = compile time, which is ok for GraalVM\n                   (try (eval '(Thread/ofVirtual))\n                        (catch Exception _ false)))\n            true\n            false)\n     :cljs false))\n\n#?(:clj\n   (do\n     (defmacro compile-if-virtual [then else]\n       (if virtual-threads-available?\n         then else))\n     (defmacro compile-when-virtual [body]\n       `(compile-if-virtual ~body nil))))\n\n;; DEPRECATED\n(def ^{:deprecated true\n       :doc \"backward compatibility alias for `virtual-threads-available?`\"}\n  vthread-supported?\n  virtual-threads-available?)\n\n(def ^{:no-doc true} noop (constantly nil))\n\n#?(:clj\n   (defn get-available-processors\n     []\n     (.availableProcessors (Runtime/getRuntime))))\n\n(defonce\n  ^{:doc \"Default scheduled executor instance.\"}\n  default-scheduler\n  (delay\n    #?(:clj  (scheduled-executor :parallelism (get-available-processors))\n       :cljs (scheduled-executor))))\n\n(defonce\n  ^{:doc \"Default executor instance, ForkJoinPool/commonPool in JVM, MicrotaskExecutor on JS.\"}\n  default-executor\n  (delay\n    #?(:clj  (ForkJoinPool/commonPool)\n       :cljs (microtask-executor))))\n\n;; Executor that executes the task in the calling thread\n(def ^{:doc \"Default Executor instance that runs the task in the same thread.\"}\n  default-current-thread-executor\n  (delay (current-thread-executor)))\n\n(defonce\n  ^{:doc \"A global, cached thread executor service.\"\n    :no-doc true}\n  default-cached-executor\n  #?(:clj  (delay (cached-executor))\n     :cljs default-executor))\n\n(defonce\n  ^{:doc \"A global, thread per task executor service.\"\n    :no-doc true}\n  default-thread-executor\n  #?(:clj (compile-if-virtual\n           (delay (java.util.concurrent.Executors/newThreadPerTaskExecutor\n                   ^ThreadFactory (promesa.exec/thread-factory)))\n           default-cached-executor)\n     :cljs default-executor))\n\n(defonce\n  ^{:doc \"A global, virtual thread per task executor service.\"\n    :no-doc true}\n  default-vthread-executor\n  #?(:clj  (compile-if-virtual\n            (delay (java.util.concurrent.Executors/newVirtualThreadPerTaskExecutor))\n            default-cached-executor)\n     :cljs default-executor))\n\n(defn executor?\n  \"Returns true if `o` is an instane of Executor or satisfies IExecutor protocol.\"\n  [o]\n  #?(:clj  (or (instance? Executor o)\n               (satisfies? pt/IExecutor o))\n     :cljs (satisfies? pt/IExecutor o)))\n\n#?(:clj\n(defn shutdown!\n  \"Shutdowns the executor service.\"\n  [^ExecutorService executor]\n  (.shutdown executor)))\n\n#?(:clj\n(defn shutdown-now!\n  \"Shutdowns and interrupts the executor service.\"\n  [^ExecutorService executor]\n  (.shutdownNow executor)))\n\n#?(:clj\n(defn shutdown?\n  \"Check if execitor is in shutdown state.\"\n  [^ExecutorService executor]\n  (.isShutdown executor)))\n\n(defn resolve-executor\n  {:no-doc true}\n  ([] (resolve-executor nil))\n  ([executor]\n   (cond\n     (nil? executor)      @default-executor\n     (executor? executor) executor\n     (delay? executor)    (resolve-executor @executor)\n     :else\n     (case executor\n       :default        @default-executor\n       :cached         @default-cached-executor\n       :thread         @default-thread-executor\n       :vthread        @default-vthread-executor\n       :same-thread    @default-current-thread-executor\n       :current-thread @default-current-thread-executor\n       (throw #?(:clj (IllegalArgumentException. \"invalid executor\")\n                 :cljs (js/TypeError. \"invalid executor\")))))))\n\n(defn resolve-scheduler\n  {:no-doc true}\n  ([] (resolve-scheduler nil))\n  ([scheduler]\n   (if (or (nil? scheduler) (= :default scheduler))\n     @default-scheduler\n     (pu/maybe-deref scheduler))))\n\n(defn wrap-bindings\n  {:no-doc true}\n  [f]\n  #?(:cljs f\n     :clj\n     (let [bindings (get-thread-bindings)]\n       (fn\n         ([]\n          (push-thread-bindings bindings)\n          (try\n            (f)\n            (finally\n              (pop-thread-bindings))))\n         ([a]\n          (push-thread-bindings bindings)\n          (try\n            (f a)\n            (finally\n              (pop-thread-bindings))))\n         ([a b]\n          (push-thread-bindings bindings)\n          (try\n            (f a b)\n            (finally\n              (pop-thread-bindings))))\n         ([a b c]\n          (push-thread-bindings bindings)\n          (try\n            (f a b c)\n            (finally\n              (pop-thread-bindings))))\n         ([a b c d]\n          (push-thread-bindings bindings)\n          (try\n            (f a b c d)\n            (finally\n              (pop-thread-bindings))))\n         ([a b c d e]\n          (push-thread-bindings bindings)\n          (try\n            (f a b c d e)\n            (finally\n              (pop-thread-bindings))))\n         ([a b c d e & args]\n          (push-thread-bindings bindings)\n          (try\n            (apply f a b c d e args)\n            (finally\n              (pop-thread-bindings))))))))\n\n;; --- Public API\n\n(defn exec!\n  \"Run the task in the provided executor, returns `nil`. Analogous to\n  the `(.execute executor f)`. Fire and forget.\"\n  ([f]\n   (pt/-exec! (resolve-executor *default-executor*) f))\n  ([executor f]\n   (pt/-exec! (resolve-executor executor) f)))\n\n(defn run!\n  \"Run the task in the provided executor.\"\n  ([f]\n   (pt/-run! (resolve-executor *default-executor*) f))\n  ([executor f]\n   (pt/-run! (resolve-executor executor) f)))\n\n(defn submit!\n  \"Submit a task to be executed in a provided executor\n  and return a promise that will be completed with\n  the return value of a task.\n\n  A task is a plain clojure function.\"\n  ([f]\n   (pt/-submit! (resolve-executor *default-executor*) f))\n  ([executor f]\n   (pt/-submit! (resolve-executor executor) f)))\n\n(defn schedule!\n  \"Schedule a callable to be executed after the `ms` delay\n  is reached.\n\n  In JVM it uses a scheduled executor service and in JS\n  it uses the `setTimeout` function.\"\n  ([ms f]\n   (pt/-schedule! (resolve-scheduler) ms f))\n  ([scheduler ms f]\n   (pt/-schedule! (resolve-scheduler scheduler) ms f)))\n\n;; --- Pool & Thread Factories\n\n#?(:clj\n   (defn thread-factory?\n     \"Checks if `o` is an instance of ThreadFactory\"\n     [o]\n     (instance? ThreadFactory o)))\n\n#?(:clj\n   (defn- fn->thread-factory\n     \"Adapt a simple clojure function into a ThreadFactory instance.\"\n     [func]\n     (reify ThreadFactory\n       (^Thread newThread [_ ^Runnable runnable]\n        (func runnable)))))\n\n#?(:clj\n(def ^{:no-doc true :dynamic true}\n  *default-counter*\n  (AtomicLong. 0)))\n\n#?(:clj\n(defn get-next\n  \"Get next value from atomic long counter\"\n  {:no-doc true}\n  ([] (.getAndIncrement ^AtomicLong *default-counter*))\n  ([counter] (.getAndIncrement ^AtomicLong counter))))\n\n#?(:clj\n(defn thread-factory\n  \"Returns an instance of promesa default thread factory.\"\n  [& {:keys [name daemon priority]\n      :or {daemon true\n           priority Thread/NORM_PRIORITY\n           name \"promesa/thread/%s\"}}]\n  (let [counter (AtomicLong. 0)]\n    (reify ThreadFactory\n      (newThread [this runnable]\n        (doto (Thread. ^Runnable runnable)\n          (.setPriority (int priority))\n          (.setDaemon ^Boolean daemon)\n          (.setName (format name (get-next counter)))))))))\n\n#?(:clj\n(defn forkjoin-thread-factory\n  ^ForkJoinPool$ForkJoinWorkerThreadFactory\n  [& {:keys [name daemon] :or {name \"promesa/forkjoin/%s\" daemon true}}]\n  (let [counter (AtomicLong. 0)]\n    (reify ForkJoinPool$ForkJoinWorkerThreadFactory\n      (newThread [_ pool]\n        (let [thread (.newThread ForkJoinPool/defaultForkJoinWorkerThreadFactory pool)\n              tname  (format name (get-next counter))]\n          (.setName ^ForkJoinWorkerThread thread ^String tname)\n          (.setDaemon ^ForkJoinWorkerThread thread ^Boolean daemon)\n          thread))))))\n\n#?(:clj\n(defn- resolve-thread-factory\n  {:no-doc true}\n  ^ThreadFactory\n  [opts]\n  (cond\n    (thread-factory? opts) opts\n    (= :default opts)      (thread-factory)\n    (nil? opts)            (thread-factory)\n    (map? opts)            (thread-factory opts)\n    (fn? opts)             (fn->thread-factory opts)\n    :else                  (throw (ex-info \"Invalid thread factory\" {})))))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; --- DEPRECATED\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\n#?(:clj\n   (defn cached-pool\n     \"A cached thread pool constructor.\"\n     {:deprecated \"9.0\" :no-doc true}\n     ([]\n      (Executors/newCachedThreadPool))\n     ([opts]\n      (let [factory (resolve-thread-factory opts)]\n        (Executors/newCachedThreadPool factory)))))\n\n#?(:clj\n   (defn fixed-pool\n     \"A fixed thread pool constructor.\"\n     {:deprecated \"9.0\" :no-doc true}\n     ([n]\n      (Executors/newFixedThreadPool (int n)))\n     ([n opts]\n      (let [factory (resolve-thread-factory opts)]\n        (Executors/newFixedThreadPool (int n) factory)))))\n\n#?(:clj\n   (defn single-pool\n     \"A single thread pool constructor.\"\n     {:deprecated \"9.0\" :no-doc true}\n     ([]\n      (Executors/newSingleThreadExecutor))\n     ([opts]\n      (let [factory (resolve-thread-factory opts)]\n        (Executors/newSingleThreadExecutor factory)))))\n\n#?(:clj\n   (defn scheduled-pool\n     \"A scheduled thread pool constructor.\"\n     {:deprecated \"9.0\" :no-doc true}\n     ([] (Executors/newScheduledThreadPool (int 0)))\n     ([n] (Executors/newScheduledThreadPool (int n)))\n     ([n opts]\n      (let [factory (resolve-thread-factory opts)]\n        (Executors/newScheduledThreadPool (int n) factory)))))\n\n#?(:clj\n   (defn work-stealing-pool\n     \"Creates a work-stealing thread pool.\"\n     {:deprecated \"9.0\" :no-doc true}\n     ([] (Executors/newWorkStealingPool))\n     ([n] (Executors/newWorkStealingPool (int n)))))\n\n#?(:clj\n   (defn forkjoin-pool\n     {:deprecated \"9.0\" :no-doc true}\n     [{:keys [factory async? parallelism]\n       :or {async? true}\n       :as opts}]\n     (let [parallelism (or parallelism (get-available-processors))\n           factory     (cond\n                         (instance? ForkJoinPool$ForkJoinWorkerThreadFactory factory) factory\n                         (nil? factory) ForkJoinPool/defaultForkJoinWorkerThreadFactory\n                         :else (throw (ex-info \"Unexpected thread factory\" {:factory factory})))]\n       (ForkJoinPool. parallelism factory nil async?))))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; --- END DEPRECATED\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\n#?(:clj\n   (defn cached-executor\n     \"A cached thread executor pool constructor.\"\n     [& {:keys [max-size factory keepalive] :or {keepalive 60000 max-size Integer/MAX_VALUE}}]\n     (let [factory (or (some-> factory resolve-thread-factory)\n                       (thread-factory :name \"promesa/cached/%s\"))\n           queue   (SynchronousQueue.)]\n       (ThreadPoolExecutor. 0\n                            (long max-size)\n                            (long keepalive)\n                            TimeUnit/MILLISECONDS\n                            ^BlockingQueue queue\n                            ^ThreadFactory factory))))\n\n#?(:clj\n   (defn fixed-executor\n     \"A fixed thread executor pool constructor.\"\n     [& {:keys [parallelism factory]}]\n     (let [factory (or (some-> factory resolve-thread-factory)\n                       (thread-factory :name \"promesa/fixed/%s\"))]\n       (Executors/newFixedThreadPool (int parallelism) factory))))\n\n#?(:clj\n   (defn single-executor\n     \"A single thread executor pool constructor.\"\n     [& {:keys [factory]}]\n     (let [factory (or (some-> factory resolve-thread-factory)\n                       (thread-factory :name \"promesa/single/%s\"))]\n       (Executors/newSingleThreadExecutor factory))))\n\n(defn current-thread-executor\n  \"Creates an executor instance that run tasks in the same thread.\"\n  []\n  #?(:clj\n     (reify\n       Executor\n       (^void execute [_ ^Runnable f] (.run f)))\n\n     :cljs\n     (reify\n       pt/IExecutor\n       (-exec! [this f]\n         (try\n           (f)\n           nil\n           (catch :default _\n             nil)))\n\n       (-run! [this f]\n         (try\n           (pt/-promise (comp noop f))\n           (catch :default cause\n             (pt/-promise cause))))\n\n       (-submit! [this f]\n         (try\n           (pt/-promise (f))\n           (catch :default cause\n             (pt/-promise cause)))))))\n\n#?(:cljs\n   (defn microtask-executor\n     \"An IExecutor that schedules tasks to be executed in the MicrotasksQueue.\"\n     []\n     (reify\n       pt/IExecutor\n       (-exec! [this f]\n         (impl/nextTick f))\n\n       (-run! [this f]\n         (-> (pt/-promise nil)\n             (pt/-fmap (fn [_]\n                        (try (f) (catch :default _ nil))))\n             (pt/-fmap noop)))\n\n       (-submit! [this f]\n         (-> (pt/-promise nil)\n             (pt/-fmap (fn [_] (f))))))))\n\n#?(:cljs\n   (deftype Scheduler []\n     pt/IScheduler\n     (-schedule! [_ ms f]\n       (let [df  (impl/deferred)\n             tid (js/setTimeout\n                  (fn []\n                    ;; (js/console.log \"111\")\n                    (try\n                      (pt/-resolve! df (f))\n                      (catch :default cause\n                        (pt/-reject! df cause))))\n                  ms)]\n         (pt/-fnly df\n                   (fn [_ c]\n                     ;; (js/console.log \"FNLY\")\n                     (when (impl/isCancellationError c)\n                       (js/clearTimeout tid))))\n         df))))\n\n(defn scheduled-executor\n  \"A scheduled thread pool constructor. A ScheduledExecutor (IScheduler\n  in CLJS) instance allows execute asynchronous tasks some time later.\"\n  [& {:keys [parallelism factory] :or {parallelism 1}}]\n  #?(:clj\n     (let [parallelism (or parallelism (get-available-processors))\n           factory     (or (some-> factory resolve-thread-factory)\n                           (thread-factory :name \"promesa/scheduled/%s\"))]\n\n\n       (doto (java.util.concurrent.ScheduledThreadPoolExecutor. (int parallelism) ^ThreadFactory factory)\n         (.setRemoveOnCancelPolicy true)))\n\n     :cljs\n     (->Scheduler)))\n\n#?(:clj\n   (compile-when-virtual\n    (defn thread-per-task-executor\n      [& {:keys [factory]}]\n      (let [factory (or (some-> factory resolve-thread-factory)\n                        (thread-factory :name \"promesa/thread-per-task/%s\"))]\n        (Executors/newThreadPerTaskExecutor ^ThreadFactory factory)))))\n\n#?(:clj\n   (compile-when-virtual\n    (defn vthread-per-task-executor\n      []\n      (Executors/newVirtualThreadPerTaskExecutor))))\n\n#?(:clj\n   (defn forkjoin-executor\n     [& {:keys [factory async parallelism keepalive core-size max-size]\n         :or {max-size 0x7fff async true keepalive 60000}}]\n     (let [parallelism (or parallelism (get-available-processors))\n           core-size   (or core-size parallelism)\n           factory     (cond\n                         (instance? ForkJoinPool$ForkJoinWorkerThreadFactory factory) factory\n                         (nil? factory) (forkjoin-thread-factory)\n                         :else (throw (UnsupportedOperationException. \"Unexpected thread factory\")))]\n       (ForkJoinPool. (int parallelism)\n                      ^ForkJoinPool$ForkJoinWorkerThreadFactory factory\n                      nil\n                      async\n                      (int core-size)\n                      (int max-size)\n                      1,\n                      nil\n                      (long keepalive)\n                      TimeUnit/MILLISECONDS))))\n\n#?(:clj\n   (defn work-stealing-executor\n     \"An alias for the `forkjoin-executor`.\"\n     [& params]\n     (apply forkjoin-executor params)))\n\n#?(:clj\n   (defn configure-default-executor!\n     [& params]\n     (alter-var-root #'*default-executor*\n                     (fn [executor]\n                       (when (and (delay? executor) (realized? executor))\n                         (.close ^AutoCloseable @executor))\n                       (when (instance? AutoCloseable executor)\n                         (.close ^AutoCloseable executor))\n                       (apply forkjoin-executor params)))))\n\n#?(:clj\n   (extend-type Executor\n     pt/IExecutor\n     (-exec! [this f]\n       (.execute ^Executor this ^Runnable f))\n\n     (-run! [this f]\n       (CompletableFuture/runAsync ^Runnable f ^Executor this))\n\n     (-submit! [this f]\n       (CompletableFuture/supplyAsync ^Supplier (pu/->Supplier f) ^Executor this))))\n\n\n;; --- Scheduler & ScheduledTask\n\n#?(:clj\n   (extend-type ScheduledExecutorService\n     pt/IScheduler\n     (-schedule! [this ms f]\n       (let [ms  (if (instance? Duration ms) (inst-ms ms) ms)\n             df  (CompletableFuture.)\n             fut (.schedule this\n                            ^Runnable (fn []\n                                        (try\n                                          (pt/-resolve! df (f))\n                                          (catch Throwable cause\n                                            (pt/-reject! df cause))))\n                            (long ms)\n                            TimeUnit/MILLISECONDS)]\n\n         (pt/-fnly df\n                   (fn [_ c]\n                     (when (instance? CancellationException c)\n                       (pt/-cancel! fut))))\n         df))))\n\n(defmacro with-dispatch\n  \"Helper macro for dispatch execution of the body to an executor\n  service. The returned promise is not cancellable (the body will be\n  executed independently of the cancellation).\"\n  [executor & body]\n  `(-> (submit! ~executor (wrap-bindings (^:once fn* [] ~@body)))\n       (pt/-mcat pt/-promise)))\n\n(defmacro with-dispatch!\n  \"Blocking version of `with-dispatch`. Useful when you want to\n  dispatch a blocking operation to a separated thread and join current\n  thread waiting for result; effective when current thread is virtual\n  thread.\"\n  [executor & body]\n  (when (:ns &env)\n    (throw (UnsupportedOperationException. \"cljs not supported on with-dispatch! macro\")))\n  `(try\n     (-> (submit! ~executor (wrap-bindings (^:once fn* [] ~@body)))\n         (pt/-mcat pt/-promise)\n         (pt/-await!))\n     (catch ExecutionException e#\n       (throw (.getCause e#)))\n     (catch CompletionException e#\n       (throw (.getCause e#)))))\n\n(defmacro with-executor\n  \"Binds the *default-executor* var with the provided executor,\n  executes the macro body. It also can optionally shutdown or shutdown\n  and interrupt on termination if you provide `^:shutdown` and\n  `^:interrupt` metadata.\n\n  **EXPERIMENTAL API:** This function should be considered\n  EXPERIMENTAL and may be changed or removed in future versions until\n  this notification is removed.\"\n  [executor & body]\n  (let [interrupt?   (-> executor meta :interrupt)\n        shutdown?    (-> executor meta :shutdown)\n        executor-sym (gensym \"executor\")]\n    `(let [~executor-sym ~executor\n           ~executor-sym (if (fn? ~executor-sym) (~executor-sym) ~executor-sym)]\n       (binding [*default-executor* ~executor-sym]\n         (try\n           ~@body\n           (finally\n             ~(when (or shutdown? interrupt?)\n                (list (if interrupt? 'promesa.exec/shutdown-now! 'promesa.exec/shutdown!) executor-sym))))))))\n\n#?(:clj\n(defn pmap\n  \"Analogous to the `clojure.core/pmap` with the excetion that it allows\n  use a custom executor (binded to *default-executor* var) The default\n  clojure chunk size (32) is used for evaluation and the real\n  parallelism is determined by the provided executor.\n\n\n  **EXPERIMENTAL API:** This function should be considered\n  EXPERIMENTAL and may be changed or removed in future versions until\n  this notification is removed.\"\n  {:experimental true}\n  ([f coll]\n   (let [executor (resolve-executor *default-executor*)\n         frame    (Var/cloneThreadBindingFrame)]\n     (->> coll\n          (map (fn [o] (pt/-submit! executor #(do\n                                                (Var/resetThreadBindingFrame frame)\n                                                (f o)))))\n          (clojure.lang.RT/iter)\n          (clojure.lang.RT/chunkIteratorSeq)\n          (map (fn [o] (.get ^CompletableFuture o))))))\n  ([f coll & colls]\n   (let [step-fn (fn step-fn [cs]\n                   (lazy-seq\n                    (let [ss (map seq cs)]\n                      (when (every? identity ss)\n                        (cons (map first ss) (step-fn (map rest ss)))))))]\n     (pmap #(apply f %) (step-fn (cons coll colls)))))))\n\n#?(:clj\n   (compile-if-virtual\n    (defn fn->thread\n      [f & {:keys [daemon virtual start priority name]\n            :or {daemon true virtual false start true priority Thread/NORM_PRIORITY}}]\n      (let [name   (or name (format \"promesa/unpooled-thread/%s\" (get-next)))\n            thread (if virtual\n                     (let [thb (Thread/ofVirtual)\n                           thb (.name thb ^String name)]\n                       (.unstarted thb ^Runnable f))\n                     (let [thb (Thread/ofPlatform)\n                           thb (.name thb ^String name)\n                           thb (.priority thb (int priority))\n                           thb (.daemon thb (boolean daemon))]\n                       (.unstarted thb ^Runnable f)))]\n        (if start\n          (.start ^Thread thread))\n        thread))\n    (defn fn->thread\n      [f & {:keys [daemon start priority name]\n            :or {daemon true start true priority Thread/NORM_PRIORITY}}]\n      (let [thread (doto (Thread. ^Runnable f)\n                     (.setName ^String name)\n                     (.setPriority (int priority))\n                     (.setDaemon (boolean daemon)))]\n        (if start\n          (.start ^Thread thread))\n        thread))))\n\n#?(:clj\n(defmacro thread\n  \"A low-level, not-pooled thread constructor, it accepts an optional\n  map as first argument and the body. The options map is interepreted\n  as options if a literal map is provided. The available options are:\n  `:name`, `:priority`, `:daemon` and `:virtual`. The `:virtual`\n  option is ignored if you are using a JVM that has no support for\n  Virtual Threads.\"\n  [opts & body]\n  (let [[opts body] (if (map? opts) [opts body] [nil (cons opts body)])]\n    `(fn->thread (^:once fn* [] ~@body)\n                 {:daemon ~(:daemon opts true)\n                  :virtual ~(:virtual opts false)\n                  :start ~(:start opts true)\n                  :name ~(or (:name opts) (format \"promesa/unpooled-thread/%s\" (get-next)))}))))\n\n#?(:clj\n(defn thread-call\n  \"Advanced version of `p/thread-call` that creates and starts a thread\n  configured with `opts`. No executor service is used, this will start\n  a plain unpooled thread.\"\n  [f & {:as opts}]\n  (let [p (CompletableFuture.)]\n    (fn->thread #(try\n                   (pt/-resolve! p (f))\n                   (catch Throwable cause\n                     (pt/-reject! p cause)))\n                (assoc opts :start true))\n    p)))\n\n#?(:clj\n(defn current-thread\n  \"Return the current thread.\"\n  []\n  (Thread/currentThread)))\n\n#?(:clj\n(defn set-name!\n  \"Rename thread.\"\n  ([name] (set-name! (current-thread) name))\n  ([thread name] (.setName ^Thread thread ^String name))))\n\n#?(:clj\n(defn get-name\n  \"Retrieve thread name\"\n  ([] (get-name (current-thread)))\n  ([thread]\n   (.getName ^Thread thread))))\n\n#?(:clj\n(defn interrupted?\n  \"Check if the thread has the interrupted flag set.\n\n  There are two special cases:\n\n  Using the `:current` keyword as argument will check the interrupted\n  flag on the current thread.\n\n  Using the arity 0 (passing no arguments), then the current thread\n  will be checked and **WARNING** the interrupted flag reset to\n  `false`.\"\n  ([]\n   (Thread/interrupted))\n  ([thread]\n   (if (= :current thread)\n     (.isInterrupted (Thread/currentThread))\n     (.isInterrupted ^Thread thread)))))\n\n#?(:clj\n(defn get-thread-id\n  \"Retrieves the thread ID.\"\n  ([]\n   (.getId ^Thread (Thread/currentThread)))\n  ([^Thread thread]\n   (.getId thread))))\n\n#?(:clj\n(defn thread-id\n  \"Retrieves the thread ID.\"\n  {:deprecated \"11.0\"}\n  ([]\n   (.getId ^Thread (Thread/currentThread)))\n  ([^Thread thread]\n   (.getId thread))))\n\n#?(:clj\n(defn interrupt!\n  \"Interrupt a thread.\"\n  ([]\n   (.interrupt (Thread/currentThread)))\n  ([^Thread thread]\n   (.interrupt thread))))\n\n#?(:clj\n(defn thread?\n  \"Check if provided object is a thread instance.\"\n  [t]\n  (instance? Thread t)))\n\n#?(:clj\n(defn sleep\n  \"Turn the current thread to sleep accept a number of milliseconds or\n  Duration instance.\"\n  [ms]\n  (if (instance? Duration ms)\n    (Thread/sleep (int (.toMillis ^Duration ms)))\n    (Thread/sleep (int ms)))))\n\n#?(:clj\n(defn throw-uncaught!\n  \"Throw an exception to the current uncaught exception handler.\"\n  [cause]\n  (let [thr (current-thread)\n        hdl (.getUncaughtExceptionHandler ^Thread thr)]\n    (.uncaughtException ^Thread$UncaughtExceptionHandler hdl\n                        ^Thread thr\n                        ^Throwable cause))))\n\n;; #?(:clj\n;;    (defn managed-blocker\n;;      {:no-doc true}\n;;      [f]\n;;      (let [state (volatile! nil)]\n;;        (reify\n;;          ForkJoinPool$ManagedBlocker\n;;          (block [_]\n;;            (try\n;;              (vreset! state (.call ^Callable f))\n;;              (catch Throwable cause#\n;;                (vreset! state cause#)))\n;;            true)\n;;          (isReleasable [_]\n;;            false)\n\n;;          clojure.lang.IDeref\n;;          (deref [_]\n;;            (let [v @state]\n;;              (if (instance? Throwable v)\n;;                (throw v)\n;;                v)))))))\n\n;; (defmacro blocking\n;;   {:no-doc true}\n;;   [& body]\n;;   `(let [f# (^:once fn* [] ~@body)\n;;          m# (managed-blocker f#)]\n;;      (ForkJoinPool/managedBlock m#)\n;;      (deref m#)))\n","~:reader-features",["^K",["~:cljs"]],"~:cljc",true,"~:source-map-compact",["^ ","mappings","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","names",["promesa.exec/*default-scheduler*","promesa.exec/*default-executor*","promesa.exec/virtual-threads-available?","promesa.exec/vthread-supported?","promesa.exec/noop","cljs.core/constantly","js/promesa","js/promesa.exec","js/promesa.exec.default-scheduler","promesa.exec/default-scheduler","cljs.core/Delay","promesa.exec/scheduled-executor","js/promesa.exec.default-executor","promesa.exec/default-executor","promesa.exec/microtask-executor","promesa.exec/default-current-thread-executor","promesa.exec/current-thread-executor","js/promesa.exec.default-cached-executor","promesa.exec/default-cached-executor","js/promesa.exec.default-thread-executor","promesa.exec/default-thread-executor","js/promesa.exec.default-vthread-executor","promesa.exec/default-vthread-executor","promesa.exec/executor?","o","cljs.core/PROTOCOL_SENTINEL","cljs.core/native-satisfies?","promesa.protocols/IExecutor","var_args","G__46259","promesa.exec/resolve-executor","js/Error","promesa.exec.resolve_executor","executor","cljs.core/deref","cljs.core/delay?","G__46264","cljs.core/Keyword","js/TypeError","G__46268","promesa.exec/resolve-scheduler","promesa.exec.resolve_scheduler","scheduler","cljs.core._EQ_","promesa.util/maybe-deref","promesa.exec/wrap-bindings","f","G__46284","promesa.exec/exec!","promesa.protocols/-exec!","G__46288","promesa.exec/run!","promesa.protocols/-run!","G__46301","promesa.exec/submit!","promesa.protocols/-submit!","G__46316","promesa.exec/schedule!","ms","promesa.protocols/-schedule!","js/promesa.exec.t_promesa$exec46321","promesa.exec/t_promesa$exec46321","_46323","meta46322","this__4491__auto__","writer__4492__auto__","opt__4493__auto__","cljs.core/-write","promesa.exec/->t_promesa$exec46321","this","e46334","_","e46336","promesa.protocols/-promise","cljs.core.comp","cause","e46337","js/promesa.exec.t_promesa$exec46342","promesa.exec/t_promesa$exec46342","_46344","meta46343","promesa.exec/->t_promesa$exec46342","promesa.impl.promise/nextTick","promesa.protocols/-fmap","e46352","promesa.exec/Scheduler","promesa.exec/->Scheduler","df","promesa.impl.promise/deferred","tid","js/setTimeout","e46371","promesa.protocols/-resolve!","promesa.protocols/-reject!","promesa.protocols/-fnly","c","promesa.impl.promise/isCancellationError","js/clearTimeout","args__4870__auto__","len__4864__auto__","i__4865__auto__","argseq__4871__auto__","cljs.core/IndexedSeq","p__46387","map__46389","cljs.core/--destructure-map","cljs.core.get","seq46382","self__4852__auto__","cljs.core/seq","parallelism","factory"]],"~:used-vars",["^K",["~$cljs.core/--destructure-map","~$cljs.core/PROTOCOL_SENTINEL","~$cljs.core/comp","~$promesa.exec/thread-factory","~$promesa.impl.promise/isCancellationError","~$promesa.exec/default-current-thread-executor","~$js/promesa.exec.default-vthread-executor","~$js/TypeError","~$promesa.protocols/-reject!","~$promesa.protocols/-exec!","~$promesa.exec/t_promesa$exec46342","~$promesa.protocols/-resolve!","~$promesa.exec/scheduled-executor","~$cljs.core/=","~$promesa.exec/resolve-executor","~$cljs.core/-write","~$cljs.core/IndexedSeq","~$promesa.exec/wrap-bindings","~$promesa.exec/*default-executor*","~$promesa.protocols/-schedule!","~$cljs.core/deref","~$promesa.impl.promise/nextTick","~$cljs.core/seq","~$cljs.core/Keyword","~$promesa.protocols/-run!","~$promesa.exec/->t_promesa$exec46342","~$promesa.exec/vthread-supported?","~$cljs.core/Delay","~$promesa.protocols/-promise","~$promesa.exec/submit!","~$js/setTimeout","~$promesa.exec/default-vthread-executor","~$cljs.core/native-satisfies?","~$promesa.protocols/IExecutor","~$promesa.exec/->Scheduler","~$promesa.protocols/-submit!","~$promesa.exec/default-executor","~$js/promesa.exec.default-executor","~$js/promesa.exec.t_promesa$exec46321","~$promesa.exec/microtask-executor","~$promesa.exec/executor?","~$promesa.util/maybe-deref","~$cljs.core/get","~$cljs.core/constantly","~$js/promesa.exec.default-cached-executor","~$promesa.exec/*default-scheduler*","~$promesa.exec/->ScheduledTask","~$promesa.protocols/-fmap","~$js/promesa.exec.default-thread-executor","~$promesa.protocols/-fnly","~$js/promesa.exec","~$js/promesa","~$promesa.exec/default-cached-executor","~$promesa.exec/default-scheduler","~$cljs.core/not","~$promesa.exec/noop","~$promesa.exec/virtual-threads-available?","~$js/clearTimeout","~$promesa.exec/Scheduler","~$js/promesa.exec.t_promesa$exec46342","~$promesa.exec/exec!","~$promesa.exec/->t_promesa$exec46321","~$cljs.core/delay?","~$promesa.exec/default-thread-executor","~$promesa.exec/schedule!","~$promesa.exec/t_promesa$exec46321","~$js/Error","~$js/promesa.exec.default-scheduler","~$promesa.exec/current-thread-executor","~$promesa.impl.promise/deferred","~$promesa.exec/resolve-scheduler","~$promesa.exec/run!"]]],"~:cache-keys",["~#cmap",[["^1A","goog/dom/tagname.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^K",[]],"~:deps-syms",["^11","~$goog.dom.HtmlElement"]]],["^1A","goog/html/trustedtypes.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3?",["^ ","^3@",null,"^3A",["^K",[]],"^3B",["^11"]]],["^1A","goog/labs/useragent/browser.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3?",["^ ","^3@",null,"^3A",["^K",[]],"^3B",["^11","~$goog.array","^10","~$goog.labs.userAgent.util","~$goog.string.internal"]]],["^1A","goog/html/safeurl.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3?",["^ ","^3@",null,"^3A",["^K",[]],"^3B",["^11","~$goog.asserts","~$goog.fs.url","~$goog.html.TrustedResourceUrl","~$goog.i18n.bidi.Dir","~$goog.i18n.bidi.DirectionalString","~$goog.string.Const","~$goog.string.TypedString","^3F"]]],["^1A","goog/array/array.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3?",["^ ","^3@",null,"^3A",["^K",[]],"^3B",["^11","^3G"]]],["^1A","goog/debug/error.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3?",["^ ","^3@",null,"^3A",["^K",[]],"^3B",["^11"]]],["^1A","goog/dom/nodetype.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3?",["^ ","^3@",null,"^3A",["^K",[]],"^3B",["^11"]]],["^1A","promesa/impl/promise.js"],["f8468543720774df3df92671c2aa9edb30df0cdc","^3?",["^ ","^3@",null,"^3A",["^K",[]],"^3B",["^11"]]],["^1A","goog/string/typedstring.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3?",["^ ","^3@",null,"^3A",["^K",[]],"^3B",["^11"]]],["^1A","goog/object/object.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3?",["^ ","^3@",null,"^3A",["^K",[]],"^3B",["^11"]]],["^1A","goog/dom/asserts.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3?",["^ ","^3@",null,"^3A",["^K",[]],"^3B",["^11","^3G"]]],"~:SHADOW-TIMESTAMP",[1685454171000,1685454171000,1685454150000],["^1A","promesa/util.cljc"],["f8468543720774df3df92671c2aa9edb30df0cdc","^3?",["^ ","^3@",null,"^3A",["^K",[]],"^3B",["^11","^H","^X"]]],["^1A","goog/math/long.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3?",["^ ","^3@",null,"^3A",["^K",[]],"^3B",["^11","^3G","~$goog.reflect"]]],["^1A","goog/html/trustedresourceurl.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3?",["^ ","^3@",null,"^3A",["^K",[]],"^3B",["^11","^3G","~$goog.fs.blob","^3H","~$goog.html.SafeScript","~$goog.html.trustedtypes","^3J","^3K","^3L","^3M"]]],["^1A","goog/string/internal.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3?",["^ ","^3@",null,"^3A",["^K",[]],"^3B",["^11"]]],["^1A","goog/functions/functions.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3?",["^ ","^3@",null,"^3A",["^K",[]],"^3B",["^11"]]],["^1A","goog/html/safestyle.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3?",["^ ","^3@",null,"^3A",["^K",[]],"^3B",["^11","^3L","~$goog.html.SafeUrl","^3M","^3G","^3F"]]],["^1A","goog/dom/safe.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3?",["^ ","^3@",null,"^3A",["^K",[]],"^3B",["^11","^3G","~$goog.dom.asserts","~$goog.functions","~$goog.html.SafeHtml","^3Q","~$goog.html.SafeStyle","^3S","^3I","~$goog.html.uncheckedconversions","^3L","^3F"]]],["^1A","goog/html/safehtml.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3?",["^ ","^3@",null,"^3A",["^K",[]],"^3B",["^11","^3L","^3J","^3K","^3Q","^3W","~$goog.html.SafeStyleSheet","^3S","~$goog.dom.TagName","^3I","^3M","^3G","~$goog.labs.userAgent.browser","^3D","^10","^3F","~$goog.dom.tags","^3R"]]],["^1A","goog/dom/tags.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3?",["^ ","^3@",null,"^3A",["^K",[]],"^3B",["^11","^10"]]],["^1A","goog/fs/blob.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3?",["^ ","^3@",null,"^3A",["^K",[]],"^3B",["^11"]]],["^1A","goog/asserts/asserts.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3?",["^ ","^3@",null,"^3A",["^K",[]],"^3B",["^11","~$goog.debug.Error","~$goog.dom.NodeType"]]],["^1A","goog/uri/uri.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3?",["^ ","^3@",null,"^3A",["^K",[]],"^3B",["^11","^3D","^3G","~$goog.collections.maps","~$goog.string","~$goog.structs","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^1A","goog/collections/maps.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3?",["^ ","^3@",null,"^3A",["^K",[]],"^3B",["^11"]]],["^1A","goog/i18n/bidi.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3?",["^ ","^3@",null,"^3A",["^K",[]],"^3B",["^11"]]],["^1A","goog/fs/url.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3?",["^ ","^3@",null,"^3A",["^K",[]],"^3B",["^11"]]],["^1A","goog/base.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3?",["^ ","^3@",null,"^3A",["^K",[]],"^3B",[]]],["^1A","goog/structs/structs.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3?",["^ ","^3@",null,"^3A",["^K",[]],"^3B",["^11","^3D","^10"]]],["^1A","goog/string/string.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3?",["^ ","^3@",null,"^3A",["^K",[]],"^3B",["^11","~$goog.dom.safe","^3X","^3L","^3F"]]],["^1A","goog/reflect/reflect.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3?",["^ ","^3@",null,"^3A",["^K",[]],"^3B",["^11"]]],["^1A","goog/labs/useragent/util.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3?",["^ ","^3@",null,"^3A",["^K",[]],"^3B",["^11","~$goog.labs.userAgent","^3F"]]],["^1A","goog/string/stringbuffer.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3?",["^ ","^3@",null,"^3A",["^K",[]],"^3B",["^11"]]],["^1A","promesa/protocols.cljc"],["f8468543720774df3df92671c2aa9edb30df0cdc","^3?",["^ ","^3@",null,"^3A",["^K",[]],"^3B",["^11","^H"]]],["^1A","goog/labs/useragent/useragent.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3?",["^ ","^3@",null,"^3A",["^K",[]],"^3B",["^11"]]],["^1A","goog/html/uncheckedconversions.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3?",["^ ","^3@",null,"^3A",["^K",[]],"^3B",["^11","^3G","^3V","^3Q","^3W","^3Y","^3S","^3I","^3L","^3F","^3J"]]],["^1A","goog/dom/htmlelement.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3?",["^ ","^3@",null,"^3A",["^K",[]],"^3B",["^11"]]],["^1A","cljs/core.cljs"],["78c69af9064be23a596f27f744408340fe4ca37b","^3?",["^ ","^3@",null,"^3A",["^K",[]],"^3B",["^11","~$goog.math.Long","~$goog.math.Integer","^44","^10","^3D","~$goog.Uri","~$goog.string.StringBuffer"]]],["^1A","goog/html/safescript.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3?",["^ ","^3@",null,"^3A",["^K",[]],"^3B",["^11","^3L","^3M","^3R","^3G"]]],["^1A","goog/html/safestylesheet.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3?",["^ ","^3@",null,"^3A",["^K",[]],"^3B",["^11","^3L","^3W","^3M","^10","^3G","^3F"]]],["^1A","goog/math/integer.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3?",["^ ","^3@",null,"^3A",["^K",[]],"^3B",["^11","^3O"]]],["^1A","goog/uri/utils.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3?",["^ ","^3@",null,"^3A",["^K",[]],"^3B",["^11","^3G","^44"]]],["^1A","goog/string/const.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3?",["^ ","^3@",null,"^3A",["^K",[]],"^3B",["^11","^3G","^3M"]]],["^1A","promesa/exec.cljc"],["f8468543720774df3df92671c2aa9edb30df0cdc","^3?",["^ ","^3@",null,"^3A",["^K",[]],"^3B",["^11","^H","^X","^Z","^10","^W"]]]]],"~:clj-info",["^ ","jar:file:/home/jo/.m2/repository/org/clojure/clojurescript/1.10.891/clojurescript-1.10.891.jar!/cljs/source_map/base64_vlq.clj",1685454150000,"jar:file:/home/jo/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/edn.clj",1685454147000,"jar:file:/home/jo/.m2/repository/org/clojure/clojurescript/1.10.891/clojurescript-1.10.891.jar!/cljs/analyzer.cljc",1685454150000,"jar:file:/home/jo/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/core.clj",1685454147000,"jar:file:/home/jo/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader/default_data_readers.clj",1685454146000,"jar:file:/home/jo/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader/impl/inspect.clj",1685454146000,"jar:file:/home/jo/.m2/repository/org/clojure/clojurescript/1.10.891/clojurescript-1.10.891.jar!/cljs/util.cljc",1685454150000,"jar:file:/home/jo/.m2/repository/org/clojure/clojurescript/1.10.891/clojurescript-1.10.891.jar!/cljs/instant.clj",1685454150000,"jar:file:/home/jo/.m2/repository/org/clojure/clojurescript/1.10.891/clojurescript-1.10.891.jar!/cljs/env.cljc",1685454150000,"jar:file:/home/jo/.m2/repository/org/clojure/data.json/2.4.0/data.json-2.4.0.jar!/clojure/data/json.clj",1685454145000,"jar:file:/home/jo/.m2/repository/org/clojure/clojurescript/1.10.891/clojurescript-1.10.891.jar!/cljs/source_map/base64.clj",1685454150000,"jar:file:/home/jo/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/instant.clj",1685454147000,"jar:file:/home/jo/.m2/repository/org/clojure/clojurescript/1.10.891/clojurescript-1.10.891.jar!/cljs/analyzer/passes.cljc",1685454150000,"jar:file:/home/jo/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader.clj",1685454146000,"jar:file:/home/jo/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/pprint.clj",1685454147000,"jar:file:/home/jo/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/string.clj",1685454147000,"jar:file:/home/jo/.m2/repository/org/clojure/clojurescript/1.10.891/clojurescript-1.10.891.jar!/cljs/core.cljc",1685454150000,"jar:file:/home/jo/.m2/repository/org/clojure/clojurescript/1.10.891/clojurescript-1.10.891.jar!/cljs/source_map.clj",1685454150000,"jar:file:/home/jo/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/set.clj",1685454147000,"jar:file:/home/jo/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/java/io.clj",1685454147000,"jar:file:/home/jo/.m2/repository/org/clojure/clojurescript/1.10.891/clojurescript-1.10.891.jar!/cljs/externs.clj",1685454150000,"jar:file:/home/jo/.m2/repository/org/clojure/clojurescript/1.10.891/clojurescript-1.10.891.jar!/cljs/tagged_literals.cljc",1685454150000,"jar:file:/home/jo/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader/reader_types.clj",1685454146000,"jar:file:/home/jo/.m2/repository/org/clojure/clojurescript/1.10.891/clojurescript-1.10.891.jar!/cljs/analyzer/impl.cljc",1685454150000,"jar:file:/home/jo/.m2/repository/org/clojure/clojurescript/1.10.891/clojurescript-1.10.891.jar!/cljs/compiler.cljc",1685454150000,"jar:file:/home/jo/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader/impl/errors.clj",1685454146000,"jar:file:/home/jo/.m2/repository/org/clojure/clojurescript/1.10.891/clojurescript-1.10.891.jar!/cljs/analyzer/passes/and_or.cljc",1685454150000,"jar:file:/home/jo/.m2/repository/org/clojure/clojurescript/1.10.891/clojurescript-1.10.891.jar!/cljs/js_deps.cljc",1685454150000],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","Executors & Schedulers facilities.","^7","promesa/exec.cljc","^8",7,"^9",5,"^:",7,"^;",17],"^<",["^ ","^=","^>","^?","^@","^A","^B","^C","^D","^E","^F","^G","^H"],"^I",null,"^J",["^K",["^L","^M","^N"]],"^O","^P","^Q",["^ "],"^T",null,"^U",["^ ","^V","^W","^X","^X","^H","^H","^Y","^X","^Z","^Z","^[","^10","^11","^11","^10","^10","^W","^W","^12","^Z"],"^13",["^K",["^14"]],"~:shadow/js-access-global",["^K",["TypeError","clearTimeout","Error","setTimeout"]],"^15",null,"~:defs",["^ ","~$exec!",["^ ","~:protocol-inline",null,"^5",["^ ","^7","promesa/exec.cljc","^8",242,"^9",7,"^:",242,"^;",12,"~:arglists",["^18",["~$quote",["^18",[["~$f"],["~$executor","~$f"]]]]],"^6","Run the task in the provided executor, returns `nil`. Analogous to\n  the `(.execute executor f)`. Fire and forget.","~:top-fn",["^ ","~:variadic?",false,"~:fixed-arity",2,"~:max-fixed-arity",2,"~:method-params",[["~$f"],["^57","~$f"]],"^55",["^18",[["~$f"],["^57","~$f"]]],"~:arglists-meta",["^18",[null,null]]]],"^O","^31","^7","promesa/exec.cljc","^;",12,"^58",["^ ","^59",false,"^5:",2,"^5;",2,"^5<",[["~$f"],["^57","~$f"]],"^55",["^18",[["~$f"],["^57","~$f"]]],"^5=",["^18",[null,null]]],"^5<",[["~$f"],["^57","~$f"]],"~:protocol-impl",null,"^5:",2,"^5=",["^18",[null,null]],"^9",1,"^59",false,"~:methods",[["^ ","^5:",1,"^59",false,"~:tag","~$any"],["^ ","^5:",2,"^59",false,"^5@","^5A"]],"^8",242,"^:",242,"^5;",2,"~:fn-var",true,"^55",["^18",[["~$f"],["^57","~$f"]]],"^6","Run the task in the provided executor, returns `nil`. Analogous to\n  the `(.execute executor f)`. Fire and forget."],"~$t_promesa$exec46321",["^ ","~:num-fields",1,"~:protocols",["^K",["^2B","~$cljs.core/IMeta","~$cljs.core/IWithMeta"]],"^O","^36","^7","promesa/exec.cljc","~:type",true,"~:anonymous",true,"^9",6,"^8",455,"~:record",false,"^5@","~$function","~:skip-protocol-flag",["^K",["^5F","^5G"]]],"~$default-scheduler",["^ ","^5",["^ ","^7","promesa/exec.cljc","^8",95,"^9",3,"^:",95,"^;",20,"^6","Default scheduled executor instance."],"^O","^2V","^7","promesa/exec.cljc","^;",20,"^9",1,"^8",93,"^:",95,"^5@","^2<","^6","Default scheduled executor instance."],"~$vthread-supported?",["^ ","^5",["^ ","^7","promesa/exec.cljc","^8",83,"^9",3,"^:",83,"^;",21,"~:deprecated",true,"^6","backward compatibility alias for `virtual-threads-available?`"],"^O","^2;","^7","promesa/exec.cljc","^;",21,"^9",1,"^8",81,"^5O",true,"^:",83,"^5@","~$boolean","^6","backward compatibility alias for `virtual-threads-available?`"],"~$executor?",["^ ","^54",null,"^5",["^ ","^7","promesa/exec.cljc","^8",138,"^9",7,"^:",138,"^;",16,"^55",["^18",["^56",["^18",[["~$o"]]]]],"^6","Returns true if `o` is an instane of Executor or satisfies IExecutor protocol."],"^O","^2I","^7","promesa/exec.cljc","^;",16,"^5<",["^18",[["~$o"]]],"^5>",null,"^5=",["^18",[null,null]],"^9",1,"^59",false,"^8",138,"~:ret-tag","^5P","^:",138,"^5;",1,"^5B",true,"^55",["^18",["^56",["^18",[["~$o"]]]]],"^6","Returns true if `o` is an instane of Executor or satisfies IExecutor protocol."],"~$*default-scheduler*",["^ ","^5",["^ ","^7","promesa/exec.cljc","^8",58,"^9",16,"^:",58,"^;",35,"~:dynamic",true],"^O","^2N","^7","promesa/exec.cljc","^;",35,"^9",1,"^5T",true,"^8",58,"^:",58,"^5@","^5A"],"~$->t_promesa$exec46321",["^ ","^54",null,"^5",["^ ","^5I",true,"^5E",["^K",["^2B","^5F","^5G"]],"^5L",["^K",["^5F","^5G"]],"~:factory","~:positional","^55",["^18",["^56",["^18",[["~$meta46322"]]]]],"^6","Positional factory function for promesa.exec/t_promesa$exec46321.","^7",null],"^5E",["^K",["^2B","^5F","^5G"]],"^O","^32","^7","promesa/exec.cljc","^5<",["^18",[["^5X"]]],"^5>",null,"^5=",["^18",[null,null]],"^5I",true,"^9",6,"^59",false,"^5V","^5W","^8",455,"^5R","^36","^5;",1,"^5B",true,"^55",["^18",["^56",["^18",[["^5X"]]]]],"^5L",["^K",["^5F","^5G"]],"^6","Positional factory function for promesa.exec/t_promesa$exec46321."],"~$schedule!",["^ ","^54",null,"^5",["^ ","^7","promesa/exec.cljc","^8",268,"^9",7,"^:",268,"^;",16,"^55",["^18",["^56",["^18",[["~$ms","~$f"],["~$scheduler","^5Z","~$f"]]]]],"^6","Schedule a callable to be executed after the `ms` delay\n  is reached.\n\n  In JVM it uses a scheduled executor service and in JS\n  it uses the `setTimeout` function.","^58",["^ ","^59",false,"^5:",3,"^5;",3,"^5<",[["^5Z","~$f"],["^5[","^5Z","~$f"]],"^55",["^18",[["^5Z","~$f"],["^5[","^5Z","~$f"]]],"^5=",["^18",[null,null]]]],"^O","^35","^7","promesa/exec.cljc","^;",16,"^58",["^ ","^59",false,"^5:",3,"^5;",3,"^5<",[["^5Z","~$f"],["^5[","^5Z","~$f"]],"^55",["^18",[["^5Z","~$f"],["^5[","^5Z","~$f"]]],"^5=",["^18",[null,null]]],"^5<",[["^5Z","~$f"],["^5[","^5Z","~$f"]],"^5>",null,"^5:",3,"^5=",["^18",[null,null]],"^9",1,"^59",false,"^5?",[["^ ","^5:",2,"^59",false,"^5@","^5A"],["^ ","^5:",3,"^59",false,"^5@","^5A"]],"^8",268,"^:",268,"^5;",3,"^5B",true,"^55",["^18",[["^5Z","~$f"],["^5[","^5Z","~$f"]]],"^6","Schedule a callable to be executed after the `ms` delay\n  is reached.\n\n  In JVM it uses a scheduled executor service and in JS\n  it uses the `setTimeout` function."],"~$default-cached-executor",["^ ","~:no-doc",true,"^5",["^ ","^7","promesa/exec.cljc","^8",115,"^9",3,"^:",115,"^;",26,"^6","A global, cached thread executor service.","^61",true],"^O","^2U","^7","promesa/exec.cljc","^;",26,"^9",1,"^8",112,"^:",115,"^5@","^2<","^6","A global, cached thread executor service."],"~$thread-factory",["^ ","^O","^1P","^7","promesa/exec.cljc","^8",50,"^9",1,"^:",50,"^;",24,"~:declared",true,"^5",["^ ","^7","promesa/exec.cljc","^8",50,"^9",10,"^:",50,"^;",24,"^63",true]],"~$microtask-executor",["^ ","^54",null,"^5",["^ ","^7","promesa/exec.cljc","^8",477,"^9",10,"^:",477,"^;",28,"^55",["^18",["^56",["^18",[[]]]]],"^6","An IExecutor that schedules tasks to be executed in the MicrotasksQueue."],"^O","^2H","^7","promesa/exec.cljc","^;",28,"^5<",["^18",[[]]],"^5>",null,"^5=",["^18",[null,null]],"^9",4,"^59",false,"^8",477,"^5R","^1W","^:",477,"^5;",0,"^5B",true,"^55",["^18",["^56",["^18",[[]]]]],"^6","An IExecutor that schedules tasks to be executed in the MicrotasksQueue."],"~$virtual-threads-available?",["^ ","^5",["^ ","^7","promesa/exec.cljc","^8",61,"^9",6,"^:",61,"^;",32],"^O","^2Y","^7","promesa/exec.cljc","^;",32,"^9",1,"^8",61,"^:",61,"^5@","^5P","^6","Var that indicates the availability of virtual threads."],"~$noop",["^ ","^61",true,"^5",["^ ","^7","promesa/exec.cljc","^8",86,"^9",22,"^:",86,"^;",26,"^61",true],"^O","^2X","^7","promesa/exec.cljc","^;",26,"^9",1,"^8",86,"^:",86,"^5@","^5K"],"~$scheduled-executor",["^ ","^54",null,"^5",["^ ","^7","promesa/exec.cljc","^8",515,"^9",7,"^:",515,"^;",25,"^55",["^18",["^56",["^18",[["~$&",["^ ","~:keys",["~$parallelism","~$factory"],"~:or",["^ ","^69",1]]]]]]],"^6","A scheduled thread pool constructor. A ScheduledExecutor (IScheduler\n  in CLJS) instance allows execute asynchronous tasks some time later.","^58",["^ ","^59",true,"^5:",0,"^5;",0,"^5<",[["^18",[["^ ","^68",["^69","^6:"],"^6;",["^ ","^69",1]]]]],"^55",["^18",[["~$&",["^ ","^68",["^69","^6:"],"^6;",["^ ","^69",1]]]]],"^5=",["^18",[null]]]],"^O","^1Y","^7","promesa/exec.cljc","^;",25,"^58",["^ ","^59",true,"^5:",0,"^5;",0,"^5<",[["^18",[["^ ","^68",["^69","^6:"],"^6;",["^ ","^69",1]]]]],"^55",["^18",[["~$&",["^ ","^68",["^69","^6:"],"^6;",["^ ","^69",1]]]]],"^5=",["^18",[null]]],"^5<",[["^18",[["^ ","^68",["^69","^6:"],"^6;",["^ ","^69",1]]]]],"^5>",null,"^5:",0,"^5=",["^18",[null]],"^9",1,"^59",true,"^5?",[["^ ","^5:",0,"^59",true,"^5@","^2["]],"^8",515,"^5R","^5A","^:",515,"^5;",0,"^5B",true,"^55",["^18",[["~$&",["^ ","^68",["^69","^6:"],"^6;",["^ ","^69",1]]]]],"^6","A scheduled thread pool constructor. A ScheduledExecutor (IScheduler\n  in CLJS) instance allows execute asynchronous tasks some time later."],"~$default-thread-executor",["^ ","^61",true,"^5",["^ ","^7","promesa/exec.cljc","^8",122,"^9",3,"^:",122,"^;",26,"^6","A global, thread per task executor service.","^61",true],"^O","^34","^7","promesa/exec.cljc","^;",26,"^9",1,"^8",119,"^:",122,"^5@","^2<","^6","A global, thread per task executor service."],"~$resolve-executor",["^ ","^61",true,"^54",null,"^5",["^ ","^7","promesa/exec.cljc","^8",163,"^9",7,"^:",163,"^;",23,"^55",["^18",["^56",["^18",[[],["^57"]]]]],"^61",true,"^58",["^ ","^59",false,"^5:",1,"^5;",1,"^5<",[[],["^57"]],"^55",["^18",[[],["^57"]]],"^5=",["^18",[null,null]]]],"^O","^1[","^7","promesa/exec.cljc","^;",23,"^58",["^ ","^59",false,"^5:",1,"^5;",1,"^5<",[[],["^57"]],"^55",["^18",[[],["^57"]]],"^5=",["^18",[null,null]]],"^5<",[[],["^57"]],"^5>",null,"^5:",1,"^5=",["^18",[null,null]],"^9",1,"^59",false,"^5?",[["^ ","^5:",0,"^59",false,"^5@","^5A"],["^ ","^5:",1,"^59",false,"^5@",["^K",[null,"^5A"]]]],"^8",163,"^:",163,"^5;",1,"^5B",true,"^55",["^18",[[],["^57"]]]],"~$current-thread-executor",["^ ","^54",null,"^5",["^ ","^7","promesa/exec.cljc","^8",446,"^9",7,"^:",446,"^;",30,"^55",["^18",["^56",["^18",[[]]]]],"^6","Creates an executor instance that run tasks in the same thread."],"^O","^39","^7","promesa/exec.cljc","^;",30,"^5<",["^18",[[]]],"^5>",null,"^5=",["^18",[null,null]],"^9",1,"^59",false,"^8",446,"^5R","^36","^:",446,"^5;",0,"^5B",true,"^55",["^18",["^56",["^18",[[]]]]],"^6","Creates an executor instance that run tasks in the same thread."],"~$wrap-bindings",["^ ","^61",true,"^54",null,"^5",["^ ","^7","promesa/exec.cljc","^8",190,"^9",7,"^:",190,"^;",20,"^55",["^18",["^56",["^18",[["~$f"]]]]],"^61",true],"^O","^22","^7","promesa/exec.cljc","^;",20,"^5<",["^18",[["~$f"]]],"^5>",null,"^5=",["^18",[null,null]],"^9",1,"^59",false,"^8",190,"^:",190,"^5;",1,"^5B",true,"^55",["^18",["^56",["^18",[["~$f"]]]]]],"~$resolve-scheduler",["^ ","^61",true,"^54",null,"^5",["^ ","^7","promesa/exec.cljc","^8",182,"^9",7,"^:",182,"^;",24,"^55",["^18",["^56",["^18",[[],["^5["]]]]],"^61",true,"^58",["^ ","^59",false,"^5:",1,"^5;",1,"^5<",[[],["^5["]],"^55",["^18",[[],["^5["]]],"^5=",["^18",[null,null]]]],"^O","^3;","^7","promesa/exec.cljc","^;",24,"^58",["^ ","^59",false,"^5:",1,"^5;",1,"^5<",[[],["^5["]],"^55",["^18",[[],["^5["]]],"^5=",["^18",[null,null]]],"^5<",[[],["^5["]],"^5>",null,"^5:",1,"^5=",["^18",[null,null]],"^9",1,"^59",false,"^5?",[["^ ","^5:",0,"^59",false,"^5@","^5A"],["^ ","^5:",1,"^59",false,"^5@",["^K",[null,"^5A"]]]],"^8",182,"^:",182,"^5;",1,"^5B",true,"^55",["^18",[[],["^5["]]]],"~$default-executor",["^ ","^5",["^ ","^7","promesa/exec.cljc","^8",102,"^9",3,"^:",102,"^;",19,"^6","Default executor instance, ForkJoinPool/commonPool in JVM, MicrotaskExecutor on JS."],"^O","^2E","^7","promesa/exec.cljc","^;",19,"^9",1,"^8",100,"^:",102,"^5@","^2<","^6","Default executor instance, ForkJoinPool/commonPool in JVM, MicrotaskExecutor on JS."],"^N",["^ ","^54",null,"^5",["^ ","^7","promesa/exec.cljc","^8",250,"^9",7,"^:",250,"^;",11,"^55",["^18",["^56",["^18",[["~$f"],["^57","~$f"]]]]],"^6","Run the task in the provided executor.","^58",["^ ","^59",false,"^5:",2,"^5;",2,"^5<",[["~$f"],["^57","~$f"]],"^55",["^18",[["~$f"],["^57","~$f"]]],"^5=",["^18",[null,null]]]],"^O","^3<","^7","promesa/exec.cljc","^;",11,"^58",["^ ","^59",false,"^5:",2,"^5;",2,"^5<",[["~$f"],["^57","~$f"]],"^55",["^18",[["~$f"],["^57","~$f"]]],"^5=",["^18",[null,null]]],"^5<",[["~$f"],["^57","~$f"]],"^5>",null,"^5:",2,"^5=",["^18",[null,null]],"^9",1,"^59",false,"^5?",[["^ ","^5:",1,"^59",false,"^5@","^5A"],["^ ","^5:",2,"^59",false,"^5@","^5A"]],"^8",250,"^:",250,"^5;",2,"^5B",true,"^55",["^18",[["~$f"],["^57","~$f"]]],"^6","Run the task in the provided executor."],"~$->t_promesa$exec46342",["^ ","^54",null,"^5",["^ ","^5I",true,"^5E",["^K",["^2B","^5F","^5G"]],"^5L",["^K",["^5F","^5G"]],"^5V","^5W","^55",["^18",["^56",["^18",[["~$meta46343"]]]]],"^6","Positional factory function for promesa.exec/t_promesa$exec46342.","^7",null],"^5E",["^K",["^2B","^5F","^5G"]],"^O","^2:","^7","promesa/exec.cljc","^5<",["^18",[["^6C"]]],"^5>",null,"^5=",["^18",[null,null]],"^5I",true,"^9",6,"^59",false,"^5V","^5W","^8",480,"^5R","^1W","^5;",1,"^5B",true,"^55",["^18",["^56",["^18",[["^6C"]]]]],"^5L",["^K",["^5F","^5G"]],"^6","Positional factory function for promesa.exec/t_promesa$exec46342."],"~$default-current-thread-executor",["^ ","^5",["^ ","^7","promesa/exec.cljc","^8",109,"^9",3,"^:",109,"^;",34,"^6","Default Executor instance that runs the task in the same thread."],"^O","^1R","^7","promesa/exec.cljc","^;",34,"^9",1,"^8",108,"^:",109,"^5@","^2<","^6","Default Executor instance that runs the task in the same thread."],"~$Scheduler",["^ ","^5D",0,"^5E",["^K",["~$promesa.protocols/IScheduler"]],"^O","^2[","^7","promesa/exec.cljc","^;",22,"^5H",true,"^9",13,"^8",496,"^5J",false,"^:",496,"^5@","^5K","^5L",null],"~$t_promesa$exec46342",["^ ","^5D",1,"^5E",["^K",["^2B","^5F","^5G"]],"^O","^1W","^7","promesa/exec.cljc","^5H",true,"^5I",true,"^9",6,"^8",480,"^5J",false,"^5@","^5K","^5L",["^K",["^5F","^5G"]]],"~$default-vthread-executor",["^ ","^61",true,"^5",["^ ","^7","promesa/exec.cljc","^8",132,"^9",3,"^:",132,"^;",27,"^6","A global, virtual thread per task executor service.","^61",true],"^O","^2@","^7","promesa/exec.cljc","^;",27,"^9",1,"^8",129,"^:",132,"^5@","^2<","^6","A global, virtual thread per task executor service."],"~$*default-executor*",["^ ","^5",["^ ","^7","promesa/exec.cljc","^8",59,"^9",16,"^:",59,"^;",34,"^5T",true],"^O","^23","^7","promesa/exec.cljc","^;",34,"^9",1,"^5T",true,"^8",59,"^:",59,"^5@","^5A"],"~$->Scheduler",["^ ","^54",null,"^5",["^ ","^5E",["^K",["^6F"]],"^7","promesa/exec.cljc","^;",22,"^9",13,"^5V","^5W","^8",496,"^:",496,"^55",["^18",["^56",["^18",[[]]]]],"^5L",null,"^6","Positional factory function for promesa.exec/Scheduler."],"^5E",["^K",["^6F"]],"^O","^2C","^7","promesa/exec.cljc","^;",22,"^5<",["^18",[[]]],"^5>",null,"^5=",["^18",[null,null]],"^9",4,"^59",false,"^5V","^5W","^8",496,"^5R","^2[","^:",496,"^5;",0,"^5B",true,"^55",["^18",["^56",["^18",[[]]]]],"^5L",null,"^6","Positional factory function for promesa.exec/Scheduler."],"~$submit!",["^ ","^54",null,"^5",["^ ","^7","promesa/exec.cljc","^8",257,"^9",7,"^:",257,"^;",14,"^55",["^18",["^56",["^18",[["~$f"],["^57","~$f"]]]]],"^6","Submit a task to be executed in a provided executor\n  and return a promise that will be completed with\n  the return value of a task.\n\n  A task is a plain clojure function.","^58",["^ ","^59",false,"^5:",2,"^5;",2,"^5<",[["~$f"],["^57","~$f"]],"^55",["^18",[["~$f"],["^57","~$f"]]],"^5=",["^18",[null,null]]]],"^O","^2>","^7","promesa/exec.cljc","^;",14,"^58",["^ ","^59",false,"^5:",2,"^5;",2,"^5<",[["~$f"],["^57","~$f"]],"^55",["^18",[["~$f"],["^57","~$f"]]],"^5=",["^18",[null,null]]],"^5<",[["~$f"],["^57","~$f"]],"^5>",null,"^5:",2,"^5=",["^18",[null,null]],"^9",1,"^59",false,"^5?",[["^ ","^5:",1,"^59",false,"^5@","^5A"],["^ ","^5:",2,"^59",false,"^5@","^5A"]],"^8",257,"^:",257,"^5;",2,"^5B",true,"^55",["^18",[["~$f"],["^57","~$f"]]],"^6","Submit a task to be executed in a provided executor\n  and return a promise that will be completed with\n  the return value of a task.\n\n  A task is a plain clojure function."],"~$->ScheduledTask",["^ ","^O","^2O","^7","promesa/exec.cljc","^8",53,"^9",1,"^:",53,"^;",25,"^63",true,"^5",["^ ","^7","promesa/exec.cljc","^8",53,"^9",10,"^:",53,"^;",25,"^63",true]]],"^16",["^ ","^H","^H"],"~:cljs.analyzer/constants",["^ ","^13",["^K",["~:parallelism","^6C","~:else","~:default","^5X","^5V"]],"~:order",["^6O","^6P","^5X","^6C","^6N","^5V"]],"^1=",["^ ","^14",["^K",[]]],"^1>",["^ "],"^1?",["^11","^H","^X","^Z","^10","^W"]],"^S","^P","~:ns-specs",["^ "],"~:ns-spec-vars",["^K",[]],"~:compiler-options",["^3>",[["^6T","~:static-fns"],true,["^6T","~:shadow-tweaks"],null,["^6T","~:source-map-inline"],null,["^6T","~:elide-asserts"],false,["^6T","~:optimize-constants"],null,["^6T","^1D"],null,["^6T","~:external-config"],null,["^6T","~:tooling-config"],null,["^6T","~:emit-constants"],null,["^6T","~:load-tests"],null,["^6T","~:form-size-threshold"],null,["^6T","~:global-goog-object&array"],null,["^6T","~:data-readers"],null,["^6T","~:infer-externs"],"~:auto",["^6T","^1F"],null,["~:js-options","~:js-provider"],"~:shadow",["~:mode"],"~:dev",["^6T","~:fn-invoke-direct"],null,["^6T","~:source-map"],"/dev/null"]]]