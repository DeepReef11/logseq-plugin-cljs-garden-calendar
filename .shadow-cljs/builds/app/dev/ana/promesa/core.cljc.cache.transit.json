["^ ","~:output",["^ ","~:js","goog.provide('promesa.core');\n/**\n * Return a resolved promise with provided value.\n */\npromesa.core.resolved = (function promesa$core$resolved(v){\nreturn promesa.impl.resolved(v);\n});\n/**\n * Return a rejected promise with provided reason.\n */\npromesa.core.rejected = (function promesa$core$rejected(v){\nreturn promesa.impl.rejected(v);\n});\n/**\n * Creates an empty promise instance.\n */\npromesa.core.deferred = (function promesa$core$deferred(){\nreturn promesa.impl.deferred();\n});\n/**\n * The coerce based promise constructor. Creates an appropriate promise\n *   instance depending on the provided value.\n * \n *   If an executor is provided, it will be used to resolve this\n *   promise.\n */\npromesa.core.promise = (function promesa$core$promise(var_args){\nvar G__42652 = arguments.length;\nswitch (G__42652) {\ncase 1:\nreturn promesa.core.promise.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn promesa.core.promise.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(promesa.core.promise.cljs$core$IFn$_invoke$arity$1 = (function (v){\nreturn promesa.protocols._promise(v);\n}));\n\n(promesa.core.promise.cljs$core$IFn$_invoke$arity$2 = (function (v,executor){\nreturn promesa.protocols._fmap(promesa.protocols._promise(v),cljs.core.identity,executor);\n}));\n\n(promesa.core.promise.cljs$lang$maxFixedArity = 2);\n\n/**\n * A convenience alias for `promise` coercion function that only accepts\n *   a single argument.\n */\npromesa.core.wrap = (function promesa$core$wrap(v){\nreturn promesa.protocols._promise(v);\n});\n/**\n * Create a promise instance from a factory function. If an executor is\n *   provided, the factory will be executed in the provided executor.\n * \n *   A factory function looks like `(fn [resolve reject] (resolve 1))`.\n */\npromesa.core.create = (function promesa$core$create(var_args){\nvar G__42662 = arguments.length;\nswitch (G__42662) {\ncase 1:\nreturn promesa.core.create.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn promesa.core.create.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(promesa.core.create.cljs$core$IFn$_invoke$arity$1 = (function (f){\nvar d = promesa.impl.deferred();\ntry{var G__42664_42979 = (function (p1__42657_SHARP_){\nreturn promesa.protocols._resolve_BANG_(d,p1__42657_SHARP_);\n});\nvar G__42665_42980 = (function (p1__42658_SHARP_){\nreturn promesa.protocols._reject_BANG_(d,p1__42658_SHARP_);\n});\n(f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__42664_42979,G__42665_42980) : f.call(null,G__42664_42979,G__42665_42980));\n}catch (e42663){var e_42981 = e42663;\npromesa.protocols._reject_BANG_(d,e_42981);\n}\nreturn d;\n}));\n\n(promesa.core.create.cljs$core$IFn$_invoke$arity$2 = (function (f,executor){\nvar d = promesa.impl.deferred();\npromesa.exec.run_BANG_.cljs$core$IFn$_invoke$arity$2(executor,(function (){\ntry{var G__42669 = (function (p1__42659_SHARP_){\nreturn promesa.protocols._resolve_BANG_(d,p1__42659_SHARP_);\n});\nvar G__42670 = (function (p1__42660_SHARP_){\nreturn promesa.protocols._reject_BANG_(d,p1__42660_SHARP_);\n});\nreturn (f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__42669,G__42670) : f.call(null,G__42669,G__42670));\n}catch (e42668){var e = e42668;\nreturn promesa.protocols._reject_BANG_(d,e);\n}}));\n\nreturn d;\n}));\n\n(promesa.core.create.cljs$lang$maxFixedArity = 2);\n\n/**\n * Return true if `v` is a promise instance.\n */\npromesa.core.promise_QMARK_ = (function promesa$core$promise_QMARK_(v){\nreturn promesa.impl.promise_QMARK_(v);\n});\n/**\n * Return true if `v` is a deferred instance.\n */\npromesa.core.deferred_QMARK_ = (function promesa$core$deferred_QMARK_(v){\nreturn promesa.impl.deferred_QMARK_(v);\n});\n/**\n * Returns true if `v` is a promise like object.\n */\npromesa.core.thenable_QMARK_ = (function promesa$core$thenable_QMARK_(v){\nreturn ((cljs.core.object_QMARK_(v)) && (cljs.core.fn_QMARK_((v[\"then\"]))));\n});\n/**\n * Returns true if promise `p` is already fulfilled.\n */\npromesa.core.resolved_QMARK_ = (function promesa$core$resolved_QMARK_(p){\nreturn promesa.protocols._resolved_QMARK_(p);\n});\n/**\n * Returns true if promise `p` is already rejected.\n */\npromesa.core.rejected_QMARK_ = (function promesa$core$rejected_QMARK_(p){\nreturn promesa.protocols._rejected_QMARK_(p);\n});\n/**\n * Returns true if promise `p` is stil pending.\n */\npromesa.core.pending_QMARK_ = (function promesa$core$pending_QMARK_(p){\nreturn promesa.protocols._pending_QMARK_(p);\n});\n/**\n * Returns the current promise value.\n */\npromesa.core.extract = (function promesa$core$extract(var_args){\nvar G__42681 = arguments.length;\nswitch (G__42681) {\ncase 1:\nreturn promesa.core.extract.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn promesa.core.extract.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(promesa.core.extract.cljs$core$IFn$_invoke$arity$1 = (function (p){\nreturn promesa.protocols._extract(p);\n}));\n\n(promesa.core.extract.cljs$core$IFn$_invoke$arity$2 = (function (p,default$){\nreturn promesa.protocols._extract(p,default$);\n}));\n\n(promesa.core.extract.cljs$lang$maxFixedArity = 2);\n\n/**\n * Returns true if promise `p` is already done.\n */\npromesa.core.done_QMARK_ = (function promesa$core$done_QMARK_(p){\nreturn cljs.core.not(promesa.protocols._pending_QMARK_(p));\n});\n/**\n * Chains a function `f` to be executed when the promise `p` is\n *   successfully resolved. Returns a promise that will be resolved with\n *   the return value of calling `f` with value as single argument; `f`\n *   can return a plain value or promise instance, an automatic\n *   unwrapping will be performed.\n * \n *   The computation will be executed in the completion thread by\n *   default; you also can provide a custom executor.\n */\npromesa.core.then = (function promesa$core$then(var_args){\nvar G__42686 = arguments.length;\nswitch (G__42686) {\ncase 2:\nreturn promesa.core.then.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ncase 3:\nreturn promesa.core.then.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(promesa.core.then.cljs$core$IFn$_invoke$arity$2 = (function (p,f){\nreturn promesa.protocols._then(promesa.protocols._promise(p),f);\n}));\n\n(promesa.core.then.cljs$core$IFn$_invoke$arity$3 = (function (p,f,executor){\nreturn promesa.protocols._then(promesa.protocols._promise(p),f,executor);\n}));\n\n(promesa.core.then.cljs$lang$maxFixedArity = 3);\n\n/**\n * Chains a function `f` to be executed when the promise `p` is\n *   successfully resolved. Returns a promise that will be resolved with\n *   the return value of calling `f` with value as single argument; `f`\n *   should return a plain value, no automatic unwrapping will be\n *   performed.\n * \n *   The computation will be executed in the completion thread by\n *   default; you also can provide a custom executor.\n */\npromesa.core.then_SINGLEQUOTE_ = (function promesa$core$then_SINGLEQUOTE_(var_args){\nvar G__42690 = arguments.length;\nswitch (G__42690) {\ncase 2:\nreturn promesa.core.then_SINGLEQUOTE_.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ncase 3:\nreturn promesa.core.then_SINGLEQUOTE_.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(promesa.core.then_SINGLEQUOTE_.cljs$core$IFn$_invoke$arity$2 = (function (p,f){\nreturn promesa.protocols._fmap(promesa.protocols._promise(p),f);\n}));\n\n(promesa.core.then_SINGLEQUOTE_.cljs$core$IFn$_invoke$arity$3 = (function (p,f,executor){\nreturn promesa.protocols._fmap(promesa.protocols._promise(p),f,executor);\n}));\n\n(promesa.core.then_SINGLEQUOTE_.cljs$lang$maxFixedArity = 3);\n\n/**\n * Chains a function `f` to be executed with when the promise `p` is\n *   successfully resolved. Returns a promise that will mirror the\n *   promise instance returned by calling `f` with the value as single\n *   argument; `f` **must** return a promise instance.\n * \n *   The computation will be executed in the completion thread by\n *   default; you also can provide a custom executor.\n */\npromesa.core.bind = (function promesa$core$bind(var_args){\nvar G__42692 = arguments.length;\nswitch (G__42692) {\ncase 2:\nreturn promesa.core.bind.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ncase 3:\nreturn promesa.core.bind.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(promesa.core.bind.cljs$core$IFn$_invoke$arity$2 = (function (p,f){\nreturn promesa.protocols._mcat(promesa.protocols._promise(p),f);\n}));\n\n(promesa.core.bind.cljs$core$IFn$_invoke$arity$3 = (function (p,f,executor){\nreturn promesa.protocols._mcat(promesa.protocols._promise(p),f,executor);\n}));\n\n(promesa.core.bind.cljs$lang$maxFixedArity = 3);\n\n/**\n * Chains a function `f` to be executed when the promise `p` is\n *   successfully resolved. Returns a promise that will be resolved with\n *   the return value of calling `f` with value as single argument.\n * \n *   The computation will be executed in the completion thread by\n *   default; you also can provide a custom executor.\n * \n *   This function is intended to be used with `->>`.\n */\npromesa.core.map = (function promesa$core$map(var_args){\nvar G__42697 = arguments.length;\nswitch (G__42697) {\ncase 2:\nreturn promesa.core.map.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ncase 3:\nreturn promesa.core.map.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(promesa.core.map.cljs$core$IFn$_invoke$arity$2 = (function (f,p){\nreturn promesa.protocols._fmap(promesa.protocols._promise(p),f);\n}));\n\n(promesa.core.map.cljs$core$IFn$_invoke$arity$3 = (function (executor,f,p){\nreturn promesa.protocols._fmap(promesa.protocols._promise(p),f,executor);\n}));\n\n(promesa.core.map.cljs$lang$maxFixedArity = 3);\n\n/**\n * A convenience alias for `map`.\n */\npromesa.core.fmap = (function promesa$core$fmap(var_args){\nvar G__42703 = arguments.length;\nswitch (G__42703) {\ncase 2:\nreturn promesa.core.fmap.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ncase 3:\nreturn promesa.core.fmap.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(promesa.core.fmap.cljs$core$IFn$_invoke$arity$2 = (function (f,p){\nreturn promesa.protocols._fmap(promesa.protocols._promise(p),f);\n}));\n\n(promesa.core.fmap.cljs$core$IFn$_invoke$arity$3 = (function (executor,f,p){\nreturn promesa.protocols._fmap(promesa.protocols._promise(p),f,executor);\n}));\n\n(promesa.core.fmap.cljs$lang$maxFixedArity = 3);\n\n/**\n * Chains a function `f` to be executed when the promise `p` is\n *   successfully resolved. Returns a promise that will mirror the\n *   promise instance returned by calling `f` with the value as single\n *   argument; `f` **must** return a promise instance.\n * \n *   The computation will be executed in the completion thread by\n *   default; you also can provide a custom executor.\n * \n *   This funciton is intended to be used with `->>`.\n */\npromesa.core.mapcat = (function promesa$core$mapcat(var_args){\nvar G__42709 = arguments.length;\nswitch (G__42709) {\ncase 2:\nreturn promesa.core.mapcat.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ncase 3:\nreturn promesa.core.mapcat.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(promesa.core.mapcat.cljs$core$IFn$_invoke$arity$2 = (function (f,p){\nreturn promesa.protocols._mcat(promesa.protocols._promise(p),f);\n}));\n\n(promesa.core.mapcat.cljs$core$IFn$_invoke$arity$3 = (function (executor,f,p){\nreturn promesa.protocols._mcat(promesa.protocols._promise(p),f,executor);\n}));\n\n(promesa.core.mapcat.cljs$lang$maxFixedArity = 3);\n\n/**\n * A convenience alias for `mapcat`.\n */\npromesa.core.mcat = (function promesa$core$mcat(var_args){\nvar G__42716 = arguments.length;\nswitch (G__42716) {\ncase 2:\nreturn promesa.core.mcat.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ncase 3:\nreturn promesa.core.mcat.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(promesa.core.mcat.cljs$core$IFn$_invoke$arity$2 = (function (f,p){\nreturn promesa.protocols._mcat(promesa.protocols._promise(p),f);\n}));\n\n(promesa.core.mcat.cljs$core$IFn$_invoke$arity$3 = (function (executor,f,p){\nreturn promesa.protocols._mcat(promesa.protocols._promise(p),f,executor);\n}));\n\n(promesa.core.mcat.cljs$lang$maxFixedArity = 3);\n\n/**\n * Chain variable number of functions to be executed serially using\n *   `then`.\n */\npromesa.core.chain = (function promesa$core$chain(var_args){\nvar G__42726 = arguments.length;\nswitch (G__42726) {\ncase 2:\nreturn promesa.core.chain.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nvar args_arr__4885__auto__ = [];\nvar len__4864__auto___43006 = arguments.length;\nvar i__4865__auto___43007 = (0);\nwhile(true){\nif((i__4865__auto___43007 < len__4864__auto___43006)){\nargs_arr__4885__auto__.push((arguments[i__4865__auto___43007]));\n\nvar G__43008 = (i__4865__auto___43007 + (1));\ni__4865__auto___43007 = G__43008;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4886__auto__ = (new cljs.core.IndexedSeq(args_arr__4885__auto__.slice((2)),(0),null));\nreturn promesa.core.chain.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),argseq__4886__auto__);\n\n}\n});\n\n(promesa.core.chain.cljs$core$IFn$_invoke$arity$2 = (function (p,f){\nreturn promesa.core.then.cljs$core$IFn$_invoke$arity$2(p,f);\n}));\n\n(promesa.core.chain.cljs$core$IFn$_invoke$arity$variadic = (function (p,f,fs){\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(promesa.core.then,p,cljs.core.cons(f,fs));\n}));\n\n/** @this {Function} */\n(promesa.core.chain.cljs$lang$applyTo = (function (seq42723){\nvar G__42724 = cljs.core.first(seq42723);\nvar seq42723__$1 = cljs.core.next(seq42723);\nvar G__42725 = cljs.core.first(seq42723__$1);\nvar seq42723__$2 = cljs.core.next(seq42723__$1);\nvar self__4851__auto__ = this;\nreturn self__4851__auto__.cljs$core$IFn$_invoke$arity$variadic(G__42724,G__42725,seq42723__$2);\n}));\n\n(promesa.core.chain.cljs$lang$maxFixedArity = (2));\n\n/**\n * Chain variable number of functions to be executed serially using\n *   `map`.\n */\npromesa.core.chain_SINGLEQUOTE_ = (function promesa$core$chain_SINGLEQUOTE_(var_args){\nvar G__42742 = arguments.length;\nswitch (G__42742) {\ncase 2:\nreturn promesa.core.chain_SINGLEQUOTE_.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nvar args_arr__4885__auto__ = [];\nvar len__4864__auto___43012 = arguments.length;\nvar i__4865__auto___43013 = (0);\nwhile(true){\nif((i__4865__auto___43013 < len__4864__auto___43012)){\nargs_arr__4885__auto__.push((arguments[i__4865__auto___43013]));\n\nvar G__43014 = (i__4865__auto___43013 + (1));\ni__4865__auto___43013 = G__43014;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4886__auto__ = (new cljs.core.IndexedSeq(args_arr__4885__auto__.slice((2)),(0),null));\nreturn promesa.core.chain_SINGLEQUOTE_.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),argseq__4886__auto__);\n\n}\n});\n\n(promesa.core.chain_SINGLEQUOTE_.cljs$core$IFn$_invoke$arity$2 = (function (p,f){\nreturn promesa.core.then_SINGLEQUOTE_.cljs$core$IFn$_invoke$arity$2(p,f);\n}));\n\n(promesa.core.chain_SINGLEQUOTE_.cljs$core$IFn$_invoke$arity$variadic = (function (p,f,fs){\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (p1__42733_SHARP_,p2__42732_SHARP_){\nreturn promesa.core.map.cljs$core$IFn$_invoke$arity$2(p2__42732_SHARP_,p1__42733_SHARP_);\n}),promesa.protocols._promise(p),cljs.core.cons(f,fs));\n}));\n\n/** @this {Function} */\n(promesa.core.chain_SINGLEQUOTE_.cljs$lang$applyTo = (function (seq42737){\nvar G__42738 = cljs.core.first(seq42737);\nvar seq42737__$1 = cljs.core.next(seq42737);\nvar G__42739 = cljs.core.first(seq42737__$1);\nvar seq42737__$2 = cljs.core.next(seq42737__$1);\nvar self__4851__auto__ = this;\nreturn self__4851__auto__.cljs$core$IFn$_invoke$arity$variadic(G__42738,G__42739,seq42737__$2);\n}));\n\n(promesa.core.chain_SINGLEQUOTE_.cljs$lang$maxFixedArity = (2));\n\n/**\n * Chains a function `f` to be executed when the promise `p` is completed\n *   (resolved or rejected) and returns a promise completed (resolving or\n *   rejecting) with the return value of calling `f` with both: value and\n *   the exception; `f` can return a new plain value or promise instance,\n *   and automatic unwrapping will be performed.\n * \n *   The computation will be executed in the completion thread by\n *   default; you also can provide a custom executor.\n * \n *   For performance sensitive code, look at `hmap` and `hcat`.\n */\npromesa.core.handle = (function promesa$core$handle(var_args){\nvar G__42750 = arguments.length;\nswitch (G__42750) {\ncase 2:\nreturn promesa.core.handle.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ncase 3:\nreturn promesa.core.handle.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(promesa.core.handle.cljs$core$IFn$_invoke$arity$2 = (function (p,f){\nreturn promesa.protocols._mcat(promesa.protocols._hmap(promesa.protocols._promise(p),cljs.core.comp.cljs$core$IFn$_invoke$arity$2(promesa.protocols._promise,f)),cljs.core.identity);\n}));\n\n(promesa.core.handle.cljs$core$IFn$_invoke$arity$3 = (function (p,f,executor){\nreturn promesa.protocols._mcat(promesa.protocols._hmap(promesa.protocols._promise(p),cljs.core.comp.cljs$core$IFn$_invoke$arity$2(promesa.protocols._promise,f),executor),cljs.core.identity,executor);\n}));\n\n(promesa.core.handle.cljs$lang$maxFixedArity = 3);\n\n/**\n * Like `handle` but ignores the return value. Returns a promise that\n *   will mirror the original one.\n */\npromesa.core.finally$ = (function promesa$core$finally(var_args){\nvar G__42754 = arguments.length;\nswitch (G__42754) {\ncase 2:\nreturn promesa.core.finally$.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ncase 3:\nreturn promesa.core.finally$.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(promesa.core.finally$.cljs$core$IFn$_invoke$arity$2 = (function (p,f){\nreturn promesa.protocols._fnly(promesa.protocols._promise(p),f);\n}));\n\n(promesa.core.finally$.cljs$core$IFn$_invoke$arity$3 = (function (p,f,executor){\nreturn promesa.protocols._fnly(promesa.protocols._promise(p),f,executor);\n}));\n\n(promesa.core.finally$.cljs$lang$maxFixedArity = 3);\n\n/**\n * Chains a function `f` to be executed when the promise `p` is completed\n *   (resolved or rejected) and returns a promise completed (resolving or\n *   rejecting) with the return value of calling `f` with both: value and\n *   the exception.\n * \n *   The computation will be executed in the completion thread by\n *   default; you also can provide a custom executor.\n * \n *   Intended to be used with `->>`.\n */\npromesa.core.hmap = (function promesa$core$hmap(var_args){\nvar G__42758 = arguments.length;\nswitch (G__42758) {\ncase 2:\nreturn promesa.core.hmap.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ncase 3:\nreturn promesa.core.hmap.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(promesa.core.hmap.cljs$core$IFn$_invoke$arity$2 = (function (f,p){\nreturn promesa.protocols._hmap(promesa.protocols._promise(p),f);\n}));\n\n(promesa.core.hmap.cljs$core$IFn$_invoke$arity$3 = (function (executor,f,p){\nreturn promesa.protocols._hmap(promesa.protocols._promise(p),f,executor);\n}));\n\n(promesa.core.hmap.cljs$lang$maxFixedArity = 3);\n\n/**\n * Chains a function `f` to be executed when the promise `p` is completed\n *   (resolved or rejected) and returns a promise that will mirror the\n *   promise instance returned by calling `f` with both: value and the\n *   exception. The `f` function must return a promise instance.\n * \n *   The computation will be executed in the completion thread by\n *   default; you also can provide a custom executor.\n * \n *   Intended to be used with `->>`.\n */\npromesa.core.hcat = (function promesa$core$hcat(var_args){\nvar G__42766 = arguments.length;\nswitch (G__42766) {\ncase 2:\nreturn promesa.core.hcat.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ncase 3:\nreturn promesa.core.hcat.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(promesa.core.hcat.cljs$core$IFn$_invoke$arity$2 = (function (f,p){\nreturn promesa.protocols._mcat(promesa.protocols._hmap(promesa.protocols._promise(p),f),cljs.core.identity);\n}));\n\n(promesa.core.hcat.cljs$core$IFn$_invoke$arity$3 = (function (executor,f,p){\nreturn promesa.protocols._mcat(promesa.protocols._hmap(promesa.protocols._promise(p),f,executor),cljs.core.identity,executor);\n}));\n\n(promesa.core.hcat.cljs$lang$maxFixedArity = 3);\n\n/**\n * Inverted arguments version of `finally`; intended to be used with\n *   `->>`.\n */\npromesa.core.fnly = (function promesa$core$fnly(var_args){\nvar G__42768 = arguments.length;\nswitch (G__42768) {\ncase 2:\nreturn promesa.core.fnly.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ncase 3:\nreturn promesa.core.fnly.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(promesa.core.fnly.cljs$core$IFn$_invoke$arity$2 = (function (f,p){\nreturn promesa.protocols._fnly(promesa.protocols._promise(p),f);\n}));\n\n(promesa.core.fnly.cljs$core$IFn$_invoke$arity$3 = (function (executor,f,p){\nreturn promesa.protocols._fnly(promesa.protocols._promise(p),f,executor);\n}));\n\n(promesa.core.fnly.cljs$lang$maxFixedArity = 3);\n\n/**\n * Chains a function `f` to be executed when the promise `p` is\n *   rejected. Returns a promise that will be resolved with the return\n *   value of calling `f` with exception as single argument; `f` can\n *   return a plain value or promise instance, an automatic unwrapping\n *   will be performed.\n * \n *   The computation will be executed in the completion thread, look at\n *   `merr` if you want the ability to schedule the computation to other\n *   thread.\n */\npromesa.core.catch$ = (function promesa$core$catch(var_args){\nvar G__42778 = arguments.length;\nswitch (G__42778) {\ncase 2:\nreturn promesa.core.catch$.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ncase 3:\nreturn promesa.core.catch$.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(promesa.core.catch$.cljs$core$IFn$_invoke$arity$2 = (function (p,f){\nreturn promesa.protocols._merr(promesa.protocols._promise(p),(function (p1__42773_SHARP_){\nreturn promesa.protocols._promise((f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(p1__42773_SHARP_) : f.call(null,p1__42773_SHARP_)));\n}));\n}));\n\n(promesa.core.catch$.cljs$core$IFn$_invoke$arity$3 = (function (p,pred_or_type,f){\nvar accept_QMARK_ = ((cljs.core.ifn_QMARK_(pred_or_type))?pred_or_type:(function (p1__42774_SHARP_){\nreturn (p1__42774_SHARP_ instanceof pred_or_type);\n}));\nreturn promesa.protocols._merr(promesa.protocols._promise(p),(function (e){\nif(cljs.core.truth_((accept_QMARK_.cljs$core$IFn$_invoke$arity$1 ? accept_QMARK_.cljs$core$IFn$_invoke$arity$1(e) : accept_QMARK_.call(null,e)))){\nreturn promesa.protocols._promise((f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(e) : f.call(null,e)));\n} else {\nreturn promesa.impl.rejected(e);\n}\n}));\n}));\n\n(promesa.core.catch$.cljs$lang$maxFixedArity = 3);\n\n/**\n * Chains a function `f` to be executed when the promise `p` is\n *   rejected. Returns a promise that will mirror the promise returned by\n *   calling `f` with exception as single argument; `f` **must** return a\n *   promise instance or throw an exception.\n * \n *   The computation will be executed in the completion thread by\n *   default; you also can provide a custom executor.\n * \n *   This is intended to be used with `->>`.\n */\npromesa.core.merr = (function promesa$core$merr(var_args){\nvar G__42780 = arguments.length;\nswitch (G__42780) {\ncase 2:\nreturn promesa.core.merr.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ncase 3:\nreturn promesa.core.merr.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(promesa.core.merr.cljs$core$IFn$_invoke$arity$2 = (function (f,p){\nreturn promesa.protocols._merr(p,f);\n}));\n\n(promesa.core.merr.cljs$core$IFn$_invoke$arity$3 = (function (executor,f,p){\nreturn promesa.protocols._merr(p,f,executor);\n}));\n\n(promesa.core.merr.cljs$lang$maxFixedArity = 3);\n\n/**\n * Given an array of promises, return a promise that is fulfilled when\n *   all the items in the array are fulfilled.\n * \n *   Example:\n * \n *   ```\n *   (-> (p/all [(promise :first-promise)\n *            (promise :second-promise)])\n *    (then (fn [[first-result second-result]])\n *            (println (str first-result \", \" second-result))))\n *   ```\n * \n *   Will print to out `:first-promise, :second-promise`.\n * \n *   If at least one of the promises is rejected, the resulting promise\n *   will be rejected.\n */\npromesa.core.all = (function promesa$core$all(promises){\nreturn promesa.impl.all(promises);\n});\npromesa.core.race = (function promesa$core$race(promises){\nreturn promesa.impl.race(promises);\n});\n/**\n * Given an array of promises, return a promise that is fulfilled when\n *   first one item in the array is fulfilled.\n */\npromesa.core.any = (function promesa$core$any(var_args){\nvar G__42788 = arguments.length;\nswitch (G__42788) {\ncase 1:\nreturn promesa.core.any.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn promesa.core.any.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(promesa.core.any.cljs$core$IFn$_invoke$arity$1 = (function (promises){\nreturn promesa.core.any.cljs$core$IFn$_invoke$arity$2(promises,new cljs.core.Keyword(\"promesa.core\",\"default\",\"promesa.core/default\",1773193826));\n}));\n\n(promesa.core.any.cljs$core$IFn$_invoke$arity$2 = (function (promises,default$){\nvar items = cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentHashSet.EMPTY,promises);\nvar state = cljs.core.volatile_BANG_(new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"pending\",\"pending\",-220036727),items,new cljs.core.Keyword(null,\"rejections\",\"rejections\",-1620899911),cljs.core.PersistentVector.EMPTY,new cljs.core.Keyword(null,\"resolved?\",\"resolved?\",862515389),false], null));\nvar lock = promesa.util.mutex();\nreturn promesa.core.create.cljs$core$IFn$_invoke$arity$1((function (resolve,reject){\nvar seq__42792 = cljs.core.seq(promises);\nvar chunk__42793 = null;\nvar count__42794 = (0);\nvar i__42795 = (0);\nwhile(true){\nif((i__42795 < count__42794)){\nvar p = chunk__42793.cljs$core$IIndexed$_nth$arity$2(null,i__42795);\npromesa.protocols._fnly(promesa.protocols._promise(p),((function (seq__42792,chunk__42793,count__42794,i__42795,p,items,state,lock){\nreturn (function (v,exception){\nlock.promesa$protocols$ILock$_lock_BANG_$arity$1(null);\n\ntry{if(cljs.core.truth_(exception)){\nif(cljs.core.truth_(new cljs.core.Keyword(null,\"resolved?\",\"resolved?\",862515389).cljs$core$IFn$_invoke$arity$1(cljs.core.deref(state)))){\nreturn null;\n} else {\nvar state__$1 = state.cljs$core$IVolatile$_vreset_BANG_$arity$2(null,((function (seq__42792,chunk__42793,count__42794,i__42795,p,items,state,lock){\nreturn (function (state__$1){\nreturn cljs.core.update.cljs$core$IFn$_invoke$arity$4(cljs.core.update.cljs$core$IFn$_invoke$arity$4(state__$1,new cljs.core.Keyword(null,\"pending\",\"pending\",-220036727),cljs.core.disj,p),new cljs.core.Keyword(null,\"rejections\",\"rejections\",-1620899911),cljs.core.conj,exception);\n});})(seq__42792,chunk__42793,count__42794,i__42795,p,items,state,lock))\n(state.cljs$core$IDeref$_deref$arity$1(null)));\nif(cljs.core.seq(new cljs.core.Keyword(null,\"pending\",\"pending\",-220036727).cljs$core$IFn$_invoke$arity$1(state__$1))){\nreturn null;\n} else {\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(default$,new cljs.core.Keyword(\"promesa.core\",\"default\",\"promesa.core/default\",1773193826))){\nvar G__42811 = cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2(\"No promises resolved\",new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"rejections\",\"rejections\",-1620899911),new cljs.core.Keyword(null,\"rejections\",\"rejections\",-1620899911).cljs$core$IFn$_invoke$arity$1(state__$1)], null));\nreturn (reject.cljs$core$IFn$_invoke$arity$1 ? reject.cljs$core$IFn$_invoke$arity$1(G__42811) : reject.call(null,G__42811));\n} else {\nreturn (resolve.cljs$core$IFn$_invoke$arity$1 ? resolve.cljs$core$IFn$_invoke$arity$1(default$) : resolve.call(null,default$));\n}\n}\n}\n} else {\nif(cljs.core.truth_(new cljs.core.Keyword(null,\"resolved?\",\"resolved?\",862515389).cljs$core$IFn$_invoke$arity$1(cljs.core.deref(state)))){\nreturn null;\n} else {\nvar map__42814 = state.cljs$core$IVolatile$_vreset_BANG_$arity$2(null,((function (seq__42792,chunk__42793,count__42794,i__42795,p,items,state,lock){\nreturn (function (state__$1){\nreturn cljs.core.update.cljs$core$IFn$_invoke$arity$4(cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(state__$1,new cljs.core.Keyword(null,\"resolved?\",\"resolved?\",862515389),true),new cljs.core.Keyword(null,\"pending\",\"pending\",-220036727),cljs.core.disj,p);\n});})(seq__42792,chunk__42793,count__42794,i__42795,p,items,state,lock))\n(state.cljs$core$IDeref$_deref$arity$1(null)));\nvar map__42814__$1 = cljs.core.__destructure_map(map__42814);\nvar pending = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__42814__$1,new cljs.core.Keyword(null,\"pending\",\"pending\",-220036727));\nreturn (resolve.cljs$core$IFn$_invoke$arity$1 ? resolve.cljs$core$IFn$_invoke$arity$1(v) : resolve.call(null,v));\n}\n}\n}finally {lock.promesa$protocols$ILock$_unlock_BANG_$arity$1(null);\n}});})(seq__42792,chunk__42793,count__42794,i__42795,p,items,state,lock))\n);\n\n\nvar G__43034 = seq__42792;\nvar G__43035 = chunk__42793;\nvar G__43036 = count__42794;\nvar G__43037 = (i__42795 + (1));\nseq__42792 = G__43034;\nchunk__42793 = G__43035;\ncount__42794 = G__43036;\ni__42795 = G__43037;\ncontinue;\n} else {\nvar temp__5753__auto__ = cljs.core.seq(seq__42792);\nif(temp__5753__auto__){\nvar seq__42792__$1 = temp__5753__auto__;\nif(cljs.core.chunked_seq_QMARK_(seq__42792__$1)){\nvar c__4679__auto__ = cljs.core.chunk_first(seq__42792__$1);\nvar G__43039 = cljs.core.chunk_rest(seq__42792__$1);\nvar G__43040 = c__4679__auto__;\nvar G__43041 = cljs.core.count(c__4679__auto__);\nvar G__43042 = (0);\nseq__42792 = G__43039;\nchunk__42793 = G__43040;\ncount__42794 = G__43041;\ni__42795 = G__43042;\ncontinue;\n} else {\nvar p = cljs.core.first(seq__42792__$1);\npromesa.protocols._fnly(promesa.protocols._promise(p),((function (seq__42792,chunk__42793,count__42794,i__42795,p,seq__42792__$1,temp__5753__auto__,items,state,lock){\nreturn (function (v,exception){\nlock.promesa$protocols$ILock$_lock_BANG_$arity$1(null);\n\ntry{if(cljs.core.truth_(exception)){\nif(cljs.core.truth_(new cljs.core.Keyword(null,\"resolved?\",\"resolved?\",862515389).cljs$core$IFn$_invoke$arity$1(cljs.core.deref(state)))){\nreturn null;\n} else {\nvar state__$1 = state.cljs$core$IVolatile$_vreset_BANG_$arity$2(null,((function (seq__42792,chunk__42793,count__42794,i__42795,p,seq__42792__$1,temp__5753__auto__,items,state,lock){\nreturn (function (state__$1){\nreturn cljs.core.update.cljs$core$IFn$_invoke$arity$4(cljs.core.update.cljs$core$IFn$_invoke$arity$4(state__$1,new cljs.core.Keyword(null,\"pending\",\"pending\",-220036727),cljs.core.disj,p),new cljs.core.Keyword(null,\"rejections\",\"rejections\",-1620899911),cljs.core.conj,exception);\n});})(seq__42792,chunk__42793,count__42794,i__42795,p,seq__42792__$1,temp__5753__auto__,items,state,lock))\n(state.cljs$core$IDeref$_deref$arity$1(null)));\nif(cljs.core.seq(new cljs.core.Keyword(null,\"pending\",\"pending\",-220036727).cljs$core$IFn$_invoke$arity$1(state__$1))){\nreturn null;\n} else {\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(default$,new cljs.core.Keyword(\"promesa.core\",\"default\",\"promesa.core/default\",1773193826))){\nvar G__42822 = cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2(\"No promises resolved\",new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"rejections\",\"rejections\",-1620899911),new cljs.core.Keyword(null,\"rejections\",\"rejections\",-1620899911).cljs$core$IFn$_invoke$arity$1(state__$1)], null));\nreturn (reject.cljs$core$IFn$_invoke$arity$1 ? reject.cljs$core$IFn$_invoke$arity$1(G__42822) : reject.call(null,G__42822));\n} else {\nreturn (resolve.cljs$core$IFn$_invoke$arity$1 ? resolve.cljs$core$IFn$_invoke$arity$1(default$) : resolve.call(null,default$));\n}\n}\n}\n} else {\nif(cljs.core.truth_(new cljs.core.Keyword(null,\"resolved?\",\"resolved?\",862515389).cljs$core$IFn$_invoke$arity$1(cljs.core.deref(state)))){\nreturn null;\n} else {\nvar map__42823 = state.cljs$core$IVolatile$_vreset_BANG_$arity$2(null,((function (seq__42792,chunk__42793,count__42794,i__42795,p,seq__42792__$1,temp__5753__auto__,items,state,lock){\nreturn (function (state__$1){\nreturn cljs.core.update.cljs$core$IFn$_invoke$arity$4(cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(state__$1,new cljs.core.Keyword(null,\"resolved?\",\"resolved?\",862515389),true),new cljs.core.Keyword(null,\"pending\",\"pending\",-220036727),cljs.core.disj,p);\n});})(seq__42792,chunk__42793,count__42794,i__42795,p,seq__42792__$1,temp__5753__auto__,items,state,lock))\n(state.cljs$core$IDeref$_deref$arity$1(null)));\nvar map__42823__$1 = cljs.core.__destructure_map(map__42823);\nvar pending = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__42823__$1,new cljs.core.Keyword(null,\"pending\",\"pending\",-220036727));\nreturn (resolve.cljs$core$IFn$_invoke$arity$1 ? resolve.cljs$core$IFn$_invoke$arity$1(v) : resolve.call(null,v));\n}\n}\n}finally {lock.promesa$protocols$ILock$_unlock_BANG_$arity$1(null);\n}});})(seq__42792,chunk__42793,count__42794,i__42795,p,seq__42792__$1,temp__5753__auto__,items,state,lock))\n);\n\n\nvar G__43044 = cljs.core.next(seq__42792__$1);\nvar G__43045 = null;\nvar G__43046 = (0);\nvar G__43047 = (0);\nseq__42792 = G__43044;\nchunk__42793 = G__43045;\ncount__42794 = G__43046;\ni__42795 = G__43047;\ncontinue;\n}\n} else {\nreturn null;\n}\n}\nbreak;\n}\n}));\n}));\n\n(promesa.core.any.cljs$lang$maxFixedArity = 2);\n\n/**\n * Given an array of promises, return a promise that is fulfilled when\n *   all the items in the array are resolved (independently if\n *   successfully or exceptionally).\n * \n *   Example:\n * \n *   ```\n *   (->> (p/wait-all* [(promise :first-promise)\n *                   (promise :second-promise)])\n *     (p/fmap (fn [_]\n *               (println \"done\"))))\n *   ```\n * \n *   Rejected promises also counts as resolved.\n */\npromesa.core.wait_all_STAR_ = (function promesa$core$wait_all_STAR_(promises){\nvar promises__$1 = cljs.core.set(promises);\nvar total = cljs.core.count(promises__$1);\nvar prom = promesa.core.deferred();\nif((total > (0))){\nvar counter_43049 = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(total);\ncljs.core.run_BANG_((function (p1__42827_SHARP_){\nreturn promesa.protocols._fnly(p1__42827_SHARP_,(function (_,___$1){\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2((0),cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(counter_43049,cljs.core.dec))){\nreturn promesa.protocols._resolve_BANG_(prom,null);\n} else {\nreturn null;\n}\n}));\n}),promises__$1);\n} else {\npromesa.protocols._resolve_BANG_(prom,null);\n}\n\nreturn prom;\n});\n/**\n * Given a variable number of promises, returns a promise which resolves\n *   to `nil` when all provided promises complete (rejected or resolved).\n * \n *   **EXPERIMENTAL**\n */\npromesa.core.wait_all = (function promesa$core$wait_all(var_args){\nvar args__4870__auto__ = [];\nvar len__4864__auto___43051 = arguments.length;\nvar i__4865__auto___43052 = (0);\nwhile(true){\nif((i__4865__auto___43052 < len__4864__auto___43051)){\nargs__4870__auto__.push((arguments[i__4865__auto___43052]));\n\nvar G__43053 = (i__4865__auto___43052 + (1));\ni__4865__auto___43052 = G__43053;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4871__auto__ = ((((0) < args__4870__auto__.length))?(new cljs.core.IndexedSeq(args__4870__auto__.slice((0)),(0),null)):null);\nreturn promesa.core.wait_all.cljs$core$IFn$_invoke$arity$variadic(argseq__4871__auto__);\n});\n\n(promesa.core.wait_all.cljs$core$IFn$_invoke$arity$variadic = (function (promises){\nreturn promesa.core.wait_all_STAR_(cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentHashSet.EMPTY,promises));\n}));\n\n(promesa.core.wait_all.cljs$lang$maxFixedArity = (0));\n\n/** @this {Function} */\n(promesa.core.wait_all.cljs$lang$applyTo = (function (seq42831){\nvar self__4852__auto__ = this;\nreturn self__4852__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq42831));\n}));\n\n/**\n * A promise aware run! function. Executed in terms of `then` rules.\n */\npromesa.core.run_BANG_ = (function promesa$core$run_BANG_(var_args){\nvar G__42842 = arguments.length;\nswitch (G__42842) {\ncase 2:\nreturn promesa.core.run_BANG_.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ncase 3:\nreturn promesa.core.run_BANG_.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(promesa.core.run_BANG_.cljs$core$IFn$_invoke$arity$2 = (function (f,coll){\nreturn promesa.protocols._fmap(cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (p1__42834_SHARP_,p2__42835_SHARP_){\nreturn promesa.core.then.cljs$core$IFn$_invoke$arity$2(p1__42834_SHARP_,(function (_){\nreturn (f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(p2__42835_SHARP_) : f.call(null,p2__42835_SHARP_));\n}));\n}),promesa.impl.resolved(null),coll),cljs.core.constantly(null));\n}));\n\n(promesa.core.run_BANG_.cljs$core$IFn$_invoke$arity$3 = (function (f,coll,executor){\nreturn promesa.protocols._fmap(cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (p1__42836_SHARP_,p2__42837_SHARP_){\nreturn promesa.core.then.cljs$core$IFn$_invoke$arity$3(p1__42836_SHARP_,(function (_){\nreturn (f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(p2__42837_SHARP_) : f.call(null,p2__42837_SHARP_));\n}),executor);\n}),promesa.impl.resolved(null),coll),cljs.core.constantly(null));\n}));\n\n(promesa.core.run_BANG_.cljs$lang$maxFixedArity = 3);\n\n/**\n * Cancel the promise.\n */\npromesa.core.cancel_BANG_ = (function promesa$core$cancel_BANG_(p){\npromesa.protocols._cancel_BANG_(p);\n\nreturn p;\n});\n/**\n * Return true if `v` is a cancelled promise.\n */\npromesa.core.cancelled_QMARK_ = (function promesa$core$cancelled_QMARK_(v){\nreturn promesa.protocols._cancelled_QMARK_(v);\n});\n/**\n * Resolve a completable promise with a value.\n */\npromesa.core.resolve_BANG_ = (function promesa$core$resolve_BANG_(var_args){\nvar G__42850 = arguments.length;\nswitch (G__42850) {\ncase 1:\nreturn promesa.core.resolve_BANG_.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn promesa.core.resolve_BANG_.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(promesa.core.resolve_BANG_.cljs$core$IFn$_invoke$arity$1 = (function (o){\nreturn promesa.protocols._resolve_BANG_(o,null);\n}));\n\n(promesa.core.resolve_BANG_.cljs$core$IFn$_invoke$arity$2 = (function (o,v){\nreturn promesa.protocols._resolve_BANG_(o,v);\n}));\n\n(promesa.core.resolve_BANG_.cljs$lang$maxFixedArity = 2);\n\n/**\n * Reject a completable promise with an error.\n */\npromesa.core.reject_BANG_ = (function promesa$core$reject_BANG_(p,e){\nreturn promesa.protocols._reject_BANG_(p,e);\n});\n/**\n * Given a function that accepts a callback as the last argument, return a\n *   function that returns a promise. Callback is expected to take one\n *   parameter (result of a computation).\n */\npromesa.core.promisify = (function promesa$core$promisify(callable){\nreturn (function() { \nvar G__43058__delegate = function (args){\nreturn promesa.core.create.cljs$core$IFn$_invoke$arity$1((function (resolve,reject){\nvar args__$1 = cljs.core.conj.cljs$core$IFn$_invoke$arity$2(cljs.core.vec(args),resolve);\ntry{return cljs.core.apply.cljs$core$IFn$_invoke$arity$2(callable,args__$1);\n}catch (e42855){if((e42855 instanceof Error)){\nvar e = e42855;\nreturn (reject.cljs$core$IFn$_invoke$arity$1 ? reject.cljs$core$IFn$_invoke$arity$1(e) : reject.call(null,e));\n} else {\nthrow e42855;\n\n}\n}}));\n};\nvar G__43058 = function (var_args){\nvar args = null;\nif (arguments.length > 0) {\nvar G__43063__i = 0, G__43063__a = new Array(arguments.length -  0);\nwhile (G__43063__i < G__43063__a.length) {G__43063__a[G__43063__i] = arguments[G__43063__i + 0]; ++G__43063__i;}\n  args = new cljs.core.IndexedSeq(G__43063__a,0,null);\n} \nreturn G__43058__delegate.call(this,args);};\nG__43058.cljs$lang$maxFixedArity = 0;\nG__43058.cljs$lang$applyTo = (function (arglist__43064){\nvar args = cljs.core.seq(arglist__43064);\nreturn G__43058__delegate(args);\n});\nG__43058.cljs$core$IFn$_invoke$arity$variadic = G__43058__delegate;\nreturn G__43058;\n})()\n;\n});\n/**\n * @constructor\n */\npromesa.core.TimeoutException = (function promesa$core$TimeoutException(message){\nvar it = this;\nError.call(it,message,cljs.core.PersistentArrayMap.EMPTY,null);\n\nreturn it;\n});\ngoog.inherits(promesa.core.TimeoutException,Error);\n/**\n * Returns a cancellable promise that will be fulfilled with this\n *   promise's fulfillment value or rejection reason.  However, if this\n *   promise is not fulfilled or rejected within `ms` milliseconds, the\n *   returned promise is cancelled with a TimeoutError.\n */\npromesa.core.timeout = (function promesa$core$timeout(var_args){\nvar G__42863 = arguments.length;\nswitch (G__42863) {\ncase 2:\nreturn promesa.core.timeout.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ncase 3:\nreturn promesa.core.timeout.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\n\nbreak;\ncase 4:\nreturn promesa.core.timeout.cljs$core$IFn$_invoke$arity$4((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(promesa.core.timeout.cljs$core$IFn$_invoke$arity$2 = (function (p,t){\nreturn promesa.core.timeout.cljs$core$IFn$_invoke$arity$4(p,t,new cljs.core.Keyword(\"promesa.core\",\"default\",\"promesa.core/default\",1773193826),new cljs.core.Keyword(null,\"default\",\"default\",-1987822328));\n}));\n\n(promesa.core.timeout.cljs$core$IFn$_invoke$arity$3 = (function (p,t,v){\nreturn promesa.core.timeout.cljs$core$IFn$_invoke$arity$4(p,t,v,new cljs.core.Keyword(null,\"default\",\"default\",-1987822328));\n}));\n\n(promesa.core.timeout.cljs$core$IFn$_invoke$arity$4 = (function (p,t,v,scheduler){\nvar timeout = promesa.core.deferred();\nvar tid = promesa.exec.schedule_BANG_.cljs$core$IFn$_invoke$arity$3(scheduler,t,(function (){\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(v,new cljs.core.Keyword(\"promesa.core\",\"default\",\"promesa.core/default\",1773193826))){\nreturn promesa.core.reject_BANG_(timeout,(new promesa.core.TimeoutException(\"Operation timed out.\")));\n} else {\nreturn promesa.core.resolve_BANG_.cljs$core$IFn$_invoke$arity$2(timeout,v);\n}\n}));\nreturn promesa.core.race(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [promesa.core.fnly.cljs$core$IFn$_invoke$arity$2((function (_,___$1){\nreturn promesa.protocols._cancel_BANG_(tid);\n}),p),timeout], null));\n}));\n\n(promesa.core.timeout.cljs$lang$maxFixedArity = 4);\n\n/**\n * Given a timeout in miliseconds and optional value, returns a promise\n *   that will be fulfilled with provided value (or nil) after the time is\n *   reached.\n */\npromesa.core.delay = (function promesa$core$delay(var_args){\nvar G__42880 = arguments.length;\nswitch (G__42880) {\ncase 1:\nreturn promesa.core.delay.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn promesa.core.delay.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ncase 3:\nreturn promesa.core.delay.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(promesa.core.delay.cljs$core$IFn$_invoke$arity$1 = (function (t){\nreturn promesa.core.delay.cljs$core$IFn$_invoke$arity$3(t,null,new cljs.core.Keyword(null,\"default\",\"default\",-1987822328));\n}));\n\n(promesa.core.delay.cljs$core$IFn$_invoke$arity$2 = (function (t,v){\nreturn promesa.core.delay.cljs$core$IFn$_invoke$arity$3(t,v,new cljs.core.Keyword(null,\"default\",\"default\",-1987822328));\n}));\n\n(promesa.core.delay.cljs$core$IFn$_invoke$arity$3 = (function (t,v,scheduler){\nvar d = promesa.core.deferred();\npromesa.exec.schedule_BANG_.cljs$core$IFn$_invoke$arity$3(scheduler,t,(function (){\nreturn promesa.core.resolve_BANG_.cljs$core$IFn$_invoke$arity$2(d,v);\n}));\n\nreturn d;\n}));\n\n(promesa.core.delay.cljs$lang$maxFixedArity = 3);\n\n/**\n * Analogous to `clojure.core.async/thread` that returns a promise\n *   instance instead of the `Future`. Useful for executing synchronous\n *   code in a separate thread (also works in cljs).\n */\npromesa.core.thread_call = (function promesa$core$thread_call(var_args){\nvar G__42891 = arguments.length;\nswitch (G__42891) {\ncase 1:\nreturn promesa.core.thread_call.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn promesa.core.thread_call.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(promesa.core.thread_call.cljs$core$IFn$_invoke$arity$1 = (function (f){\nreturn promesa.exec.submit_BANG_.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"thread\",\"thread\",947001524),promesa.exec.wrap_bindings(f));\n}));\n\n(promesa.core.thread_call.cljs$core$IFn$_invoke$arity$2 = (function (executor,f){\nreturn promesa.exec.submit_BANG_.cljs$core$IFn$_invoke$arity$2(executor,promesa.exec.wrap_bindings(f));\n}));\n\n(promesa.core.thread_call.cljs$lang$maxFixedArity = 2);\n\n/**\n * A shortcut for `(p/thread-call :vthread f)`.\n */\npromesa.core.vthread_call = (function promesa$core$vthread_call(f){\nreturn promesa.core.thread_call.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"vthread\",\"vthread\",441141075),f);\n});\n\n/**\n* @constructor\n * @implements {cljs.core.IRecord}\n * @implements {cljs.core.IKVReduce}\n * @implements {cljs.core.IEquiv}\n * @implements {cljs.core.IHash}\n * @implements {cljs.core.ICollection}\n * @implements {cljs.core.ICounted}\n * @implements {cljs.core.ISeqable}\n * @implements {cljs.core.IMeta}\n * @implements {cljs.core.ICloneable}\n * @implements {cljs.core.IPrintWithWriter}\n * @implements {cljs.core.IIterable}\n * @implements {cljs.core.IWithMeta}\n * @implements {cljs.core.IAssociative}\n * @implements {cljs.core.IMap}\n * @implements {cljs.core.ILookup}\n*/\npromesa.core.Recur = (function (bindings,__meta,__extmap,__hash){\nthis.bindings = bindings;\nthis.__meta = __meta;\nthis.__extmap = __extmap;\nthis.__hash = __hash;\nthis.cljs$lang$protocol_mask$partition0$ = 2230716170;\nthis.cljs$lang$protocol_mask$partition1$ = 139264;\n});\n(promesa.core.Recur.prototype.cljs$core$ILookup$_lookup$arity$2 = (function (this__4502__auto__,k__4503__auto__){\nvar self__ = this;\nvar this__4502__auto____$1 = this;\nreturn this__4502__auto____$1.cljs$core$ILookup$_lookup$arity$3(null,k__4503__auto__,null);\n}));\n\n(promesa.core.Recur.prototype.cljs$core$ILookup$_lookup$arity$3 = (function (this__4504__auto__,k42901,else__4505__auto__){\nvar self__ = this;\nvar this__4504__auto____$1 = this;\nvar G__42911 = k42901;\nvar G__42911__$1 = (((G__42911 instanceof cljs.core.Keyword))?G__42911.fqn:null);\nswitch (G__42911__$1) {\ncase \"bindings\":\nreturn self__.bindings;\n\nbreak;\ndefault:\nreturn cljs.core.get.cljs$core$IFn$_invoke$arity$3(self__.__extmap,k42901,else__4505__auto__);\n\n}\n}));\n\n(promesa.core.Recur.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = (function (this__4522__auto__,f__4523__auto__,init__4524__auto__){\nvar self__ = this;\nvar this__4522__auto____$1 = this;\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (ret__4525__auto__,p__42914){\nvar vec__42916 = p__42914;\nvar k__4526__auto__ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__42916,(0),null);\nvar v__4527__auto__ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__42916,(1),null);\nreturn (f__4523__auto__.cljs$core$IFn$_invoke$arity$3 ? f__4523__auto__.cljs$core$IFn$_invoke$arity$3(ret__4525__auto__,k__4526__auto__,v__4527__auto__) : f__4523__auto__.call(null,ret__4525__auto__,k__4526__auto__,v__4527__auto__));\n}),init__4524__auto__,this__4522__auto____$1);\n}));\n\n(promesa.core.Recur.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = (function (this__4517__auto__,writer__4518__auto__,opts__4519__auto__){\nvar self__ = this;\nvar this__4517__auto____$1 = this;\nvar pr_pair__4520__auto__ = (function (keyval__4521__auto__){\nreturn cljs.core.pr_sequential_writer(writer__4518__auto__,cljs.core.pr_writer,\"\",\" \",\"\",opts__4519__auto__,keyval__4521__auto__);\n});\nreturn cljs.core.pr_sequential_writer(writer__4518__auto__,pr_pair__4520__auto__,\"#promesa.core.Recur{\",\", \",\"}\",opts__4519__auto__,cljs.core.concat.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(new cljs.core.PersistentVector(null,2,(5),cljs.core.PersistentVector.EMPTY_NODE,[new cljs.core.Keyword(null,\"bindings\",\"bindings\",1271397192),self__.bindings],null))], null),self__.__extmap));\n}));\n\n(promesa.core.Recur.prototype.cljs$core$IIterable$_iterator$arity$1 = (function (G__42900){\nvar self__ = this;\nvar G__42900__$1 = this;\nreturn (new cljs.core.RecordIter((0),G__42900__$1,1,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"bindings\",\"bindings\",1271397192)], null),(cljs.core.truth_(self__.__extmap)?cljs.core._iterator(self__.__extmap):cljs.core.nil_iter())));\n}));\n\n(promesa.core.Recur.prototype.cljs$core$IMeta$_meta$arity$1 = (function (this__4500__auto__){\nvar self__ = this;\nvar this__4500__auto____$1 = this;\nreturn self__.__meta;\n}));\n\n(promesa.core.Recur.prototype.cljs$core$ICloneable$_clone$arity$1 = (function (this__4497__auto__){\nvar self__ = this;\nvar this__4497__auto____$1 = this;\nreturn (new promesa.core.Recur(self__.bindings,self__.__meta,self__.__extmap,self__.__hash));\n}));\n\n(promesa.core.Recur.prototype.cljs$core$ICounted$_count$arity$1 = (function (this__4506__auto__){\nvar self__ = this;\nvar this__4506__auto____$1 = this;\nreturn (1 + cljs.core.count(self__.__extmap));\n}));\n\n(promesa.core.Recur.prototype.cljs$core$IHash$_hash$arity$1 = (function (this__4498__auto__){\nvar self__ = this;\nvar this__4498__auto____$1 = this;\nvar h__4360__auto__ = self__.__hash;\nif((!((h__4360__auto__ == null)))){\nreturn h__4360__auto__;\n} else {\nvar h__4360__auto____$1 = (function (coll__4499__auto__){\nreturn (-404494900 ^ cljs.core.hash_unordered_coll(coll__4499__auto__));\n})(this__4498__auto____$1);\n(self__.__hash = h__4360__auto____$1);\n\nreturn h__4360__auto____$1;\n}\n}));\n\n(promesa.core.Recur.prototype.cljs$core$IEquiv$_equiv$arity$2 = (function (this42903,other42904){\nvar self__ = this;\nvar this42903__$1 = this;\nreturn (((!((other42904 == null)))) && ((((this42903__$1.constructor === other42904.constructor)) && (((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(this42903__$1.bindings,other42904.bindings)) && (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(this42903__$1.__extmap,other42904.__extmap)))))));\n}));\n\n(promesa.core.Recur.prototype.cljs$core$IMap$_dissoc$arity$2 = (function (this__4512__auto__,k__4513__auto__){\nvar self__ = this;\nvar this__4512__auto____$1 = this;\nif(cljs.core.contains_QMARK_(new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"bindings\",\"bindings\",1271397192),null], null), null),k__4513__auto__)){\nreturn cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(cljs.core._with_meta(cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentArrayMap.EMPTY,this__4512__auto____$1),self__.__meta),k__4513__auto__);\n} else {\nreturn (new promesa.core.Recur(self__.bindings,self__.__meta,cljs.core.not_empty(cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(self__.__extmap,k__4513__auto__)),null));\n}\n}));\n\n(promesa.core.Recur.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = (function (this__4509__auto__,k42901){\nvar self__ = this;\nvar this__4509__auto____$1 = this;\nvar G__42929 = k42901;\nvar G__42929__$1 = (((G__42929 instanceof cljs.core.Keyword))?G__42929.fqn:null);\nswitch (G__42929__$1) {\ncase \"bindings\":\nreturn true;\n\nbreak;\ndefault:\nreturn cljs.core.contains_QMARK_(self__.__extmap,k42901);\n\n}\n}));\n\n(promesa.core.Recur.prototype.cljs$core$IAssociative$_assoc$arity$3 = (function (this__4510__auto__,k__4511__auto__,G__42900){\nvar self__ = this;\nvar this__4510__auto____$1 = this;\nvar pred__42932 = cljs.core.keyword_identical_QMARK_;\nvar expr__42933 = k__4511__auto__;\nif(cljs.core.truth_((pred__42932.cljs$core$IFn$_invoke$arity$2 ? pred__42932.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"bindings\",\"bindings\",1271397192),expr__42933) : pred__42932.call(null,new cljs.core.Keyword(null,\"bindings\",\"bindings\",1271397192),expr__42933)))){\nreturn (new promesa.core.Recur(G__42900,self__.__meta,self__.__extmap,null));\n} else {\nreturn (new promesa.core.Recur(self__.bindings,self__.__meta,cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(self__.__extmap,k__4511__auto__,G__42900),null));\n}\n}));\n\n(promesa.core.Recur.prototype.cljs$core$ISeqable$_seq$arity$1 = (function (this__4515__auto__){\nvar self__ = this;\nvar this__4515__auto____$1 = this;\nreturn cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(new cljs.core.MapEntry(new cljs.core.Keyword(null,\"bindings\",\"bindings\",1271397192),self__.bindings,null))], null),self__.__extmap));\n}));\n\n(promesa.core.Recur.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = (function (this__4501__auto__,G__42900){\nvar self__ = this;\nvar this__4501__auto____$1 = this;\nreturn (new promesa.core.Recur(self__.bindings,G__42900,self__.__extmap,self__.__hash));\n}));\n\n(promesa.core.Recur.prototype.cljs$core$ICollection$_conj$arity$2 = (function (this__4507__auto__,entry__4508__auto__){\nvar self__ = this;\nvar this__4507__auto____$1 = this;\nif(cljs.core.vector_QMARK_(entry__4508__auto__)){\nreturn this__4507__auto____$1.cljs$core$IAssociative$_assoc$arity$3(null,cljs.core._nth(entry__4508__auto__,(0)),cljs.core._nth(entry__4508__auto__,(1)));\n} else {\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._conj,this__4507__auto____$1,entry__4508__auto__);\n}\n}));\n\n(promesa.core.Recur.getBasis = (function (){\nreturn new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,\"bindings\",\"bindings\",-1383038577,null)], null);\n}));\n\n(promesa.core.Recur.cljs$lang$type = true);\n\n(promesa.core.Recur.cljs$lang$ctorPrSeq = (function (this__4546__auto__){\nreturn (new cljs.core.List(null,\"promesa.core/Recur\",null,(1),null));\n}));\n\n(promesa.core.Recur.cljs$lang$ctorPrWriter = (function (this__4546__auto__,writer__4547__auto__){\nreturn cljs.core._write(writer__4547__auto__,\"promesa.core/Recur\");\n}));\n\n/**\n * Positional factory function for promesa.core/Recur.\n */\npromesa.core.__GT_Recur = (function promesa$core$__GT_Recur(bindings){\nreturn (new promesa.core.Recur(bindings,null,null,null));\n});\n\n/**\n * Factory function for promesa.core/Recur, taking a map of keywords to field values.\n */\npromesa.core.map__GT_Recur = (function promesa$core$map__GT_Recur(G__42906){\nvar extmap__4542__auto__ = (function (){var G__42939 = cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(G__42906,new cljs.core.Keyword(null,\"bindings\",\"bindings\",1271397192));\nif(cljs.core.record_QMARK_(G__42906)){\nreturn cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentArrayMap.EMPTY,G__42939);\n} else {\nreturn G__42939;\n}\n})();\nreturn (new promesa.core.Recur(new cljs.core.Keyword(null,\"bindings\",\"bindings\",1271397192).cljs$core$IFn$_invoke$arity$1(G__42906),null,cljs.core.not_empty(extmap__4542__auto__),null));\n});\n\npromesa.core.recur_QMARK_ = (function promesa$core$recur_QMARK_(o){\nreturn (o instanceof promesa.core.Recur);\n});\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:file","promesa/core.cljc","~:line",7,"~:column",5,"~:end-line",7,"~:end-column",17],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$clojure.pprint","~$cljs.pprint","~$clojure.spec.alpha","~$cljs.spec.alpha","~$clojure.core","~$cljs.core"],"~:use-macros",null,"~:excludes",["~#set",["~$map","~$delay","~$mapcat","~$await","~$doseq","~$let","~$->","~$future","~$as->","~$do","~$spread","~$promise","~$run!","~$recur","~$loop","~$with-redefs","~$->>"]],"~:macros",["^ ","~$do!",["^ ","~:arglists",["~#list",[["~$&","~$exprs"]]],"~:doc","A convenience alias for `do` macro.","^7",563,"^8",1,"^6","promesa/core.cljc","~:name","~$promesa.core/do!","~:ns","~$promesa.core","~:macro",true],"^K",["^ ","^Z",["^[",[[["~$binding","~$xs"],"~$&","~$body"]]],"^11","Simplified version of `doseq` which takes one binding and a seq, and\n  runs over it using `promesa.core/run!`","^7",753,"^8",1,"^6","promesa/core.cljc","^12","~$promesa.core/doseq","^14","^15","^16",true],"^L",["^ ","^Z",["^[",[["~$bindings","~$&","^19"]]],"^11","A `let` alternative that always returns promise and waits for all the\n  promises on the bindings.","^7",578,"^8",1,"^6","promesa/core.cljc","^12","~$promesa.core/let","^14","^15","^16",true],"^M",["^ ","^Z",["^[",[["~$x","~$&","~$forms"]]],"^11","Like the clojure.core/->, but it will handle promises in values\n  and make sure the next form gets the value realized instead of\n  the promise.\n\n  Example fetching data in the browser with CLJS:\n\n  (p/-> (js/fetch #js {...}) ; returns a promise\n        .-body)\n\n  The result of a thread is a promise that will resolve to the\n  end of the thread chain.","^7",678,"^8",1,"^6","promesa/core.cljc","^12","~$promesa.core/->","^14","^15","^16",true],"^N",["^ ","^Z",["^[",[["~$&","^19"]]],"^11","Analogous macro to `clojure.core/future` that returns promise\n  instance instead of the `Future`. Exposed just for convenience and\n  works as an alias to `thread`.","^7",626,"^8",1,"^6","promesa/core.cljc","^12","~$promesa.core/future","^14","^15","^16",true],"~$plet",["^ ","^Z",["^[",[["^1;","~$&","^19"]]],"^11","A parallel let; executes all the bindings in parallel and when all\n  bindings are resolved, executes the body.","^7",588,"^8",1,"^6","promesa/core.cljc","^12","~$promesa.core/plet","^14","^15","^16",true],"^O",["^ ","^Z",["^[",[["~$expr","~$name","~$&","^1="]]],"^11","Like clojure.core/as->, but it will handle promises in values\n   and make sure the next form gets the value realized instead of\n   the promise.","^7",720,"^8",1,"^6","promesa/core.cljc","^12","~$promesa.core/as->","^14","^15","^16",true],"^P",["^ ","^Z",["^[",[["~$&","^10"]]],"^11","Execute potentially side effectful code and return a promise resolved\n  to the last expression after awaiting the result of each\n  expression.","^7",553,"^8",1,"^6","promesa/core.cljc","^12","~$promesa.core/do","^14","^15","^16",true],"~$let*",["^ ","^Z",["^[",[["^1;","~$&","^19"]]],"^11","An exception unsafe let-like macro. Supposes that we are already\n  wrapped in promise context so avoids defensive wrapping.","^7",568,"^8",1,"^6","promesa/core.cljc","^12","~$promesa.core/let*","^14","^15","^16",true],"~$do*",["^ ","^Z",["^[",[["~$&","^10"]]],"^11","An exception unsafe do-like macro. Supposes that we are already\n  wrapped in promise context so avoids defensive wrapping.","^7",541,"^8",1,"^6","promesa/core.cljc","^12","~$promesa.core/do*","^14","^15","^16",true],"^T",["^ ","^Z",["^[",[["~$&","~$args"]]],"^7",674,"^8",1,"^6","promesa/core.cljc","^12","~$promesa.core/recur","^14","^15","^16",true],"^U",["^ ","^Z",["^[",[["^1;","~$&","^19"]]],"^7",638,"^8",1,"^6","promesa/core.cljc","^12","~$promesa.core/loop","^14","^15","^16",true],"^V",["^ ","^Z",["^[",[["^1;","~$&","^19"]]],"^11","Like clojure.core/with-redefs, but it will handle promises in\n   body and wait until they resolve or reject before restoring the\n   bindings. Useful for mocking async APIs.","^7",731,"^8",1,"^6","promesa/core.cljc","^12","~$promesa.core/with-redefs","^14","^15","^16",true],"~$vthread",["^ ","^Z",["^[",[["~$&","^19"]]],"^11","Analogous to `clojure.core.async/thread` that returns a promise instance\n  instead of the `Future`. Useful for executing synchronous code in a\n  separate thread (also works in cljs).","^7",619,"^8",1,"^6","promesa/core.cljc","^12","~$promesa.core/vthread","^14","^15","^16",true],"~$thread",["^ ","^Z",["^[",[["~$&","^19"]]],"^11","Analogous to `clojure.core.async/thread` that returns a promise instance\n  instead of the `Future`.","^7",613,"^8",1,"^6","promesa/core.cljc","^12","~$promesa.core/thread","^14","^15","^16",true],"^W",["^ ","^Z",["^[",[["~$x","~$&","^1="]]],"^11","Like the clojure.core/->>, but it will handle promises in values\n  and make sure the next form gets the value realized instead of\n  the promise.\n\n  Example fetching data in the browser with CLJS:\n\n  (p/->> (js/fetch #js {...}) ; returns a promise\n         .-body\n         read-string\n         (mapv inc)\n\n  The result of a thread is a promise that will resolve to the\n  end of the thread chain.","^7",698,"^8",1,"^6","promesa/core.cljc","^12","~$promesa.core/->>","^14","^15","^16",true]],"^12","^15","~:reader-aliases",["^ "],"~:op","^14","~:imports",null,"~:requires",["^ ","~$impl","~$promesa.impl","~$promesa.protocols","^1Y","^C","^C","~$pt","^1Y","~$promesa.util","^1[","~$goog","^20","~$exec","~$promesa.exec","^22","^22","^B","^C","~$util","^1[","^1X","^1X","~$c","^C"],"~:seen",["^F",["~:require","~:require-macros"]],"~:uses",null,"^26",["^ ","^15","^15","^C","^C","^B","^C","~$c","^C"],"~:form",["^[",["~$ns","^15",["^[",["~:refer-clojure","~:exclude",["^H","^Q","^R","^J","^G","^I","^S","^N","^L","^U","^T","^M","^W","^O","^V","^P","^K"]]],["^[",["^25",["^1Y","~:as","^1Z"],["^B","^2<","~$c"],["^22","^2<","^21"],["^1X","^2<","^1W"],["^1[","^2<","^23"]]],["^[",["^26",["^15"]]]]],"~:flags",["^ ","^25",["^F",[]],"^26",["^F",[]]],"~:js-deps",["^ "],"~:deps",["^20","^C","^1Y","^C","^22","^1X","^1["]],"^14","^15","~:resource-id",["~:shadow.build.classpath/resource","promesa/core.cljc"],"~:compiled-at",1686093094792,"^1S",["^ ","^1W","^1X","^1Y","^1Y","^15","^15","^C","^C","^1Z","^1Y","^1[","^1[","^20","^20","^21","^22","^22","^22","^B","^C","^23","^1[","^1X","^1X","~$c","^C"],"~:resource-name","promesa/core.cljc","~:warnings",[],"~:source",";; This Source Code Form is subject to the terms of the Mozilla Public\n;; License, v. 2.0. If a copy of the MPL was not distributed with this\n;; file, You can obtain one at http://mozilla.org/MPL/2.0/.\n;;\n;; Copyright (c) Andrey Antukh <niwi@niwi.nz>\n\n(ns promesa.core\n  (:refer-clojure :exclude [delay spread promise\n                            await map mapcat run!\n                            future let loop recur\n                            -> ->> as-> with-redefs do\n                            doseq])\n  (:require\n   [promesa.protocols :as pt]\n   [clojure.core :as c]\n   [promesa.exec :as exec]\n   [promesa.impl :as impl]\n   [promesa.util :as util])\n  #?(:cljs (:require-macros [promesa.core]))\n  #?(:clj\n     (:import\n      java.util.concurrent.CompletableFuture\n      java.util.concurrent.CompletionException\n      java.util.concurrent.CompletionStage\n      java.util.concurrent.ExecutionException\n      java.util.concurrent.TimeoutException)))\n\n#?(:clj (set! *warn-on-reflection* true))\n\n;; --- Promise\n\n(defn resolved\n  \"Return a resolved promise with provided value.\"\n  [v]\n  (impl/resolved v))\n\n(defn rejected\n  \"Return a rejected promise with provided reason.\"\n  [v]\n  (impl/rejected v))\n\n(defn deferred\n  \"Creates an empty promise instance.\"\n  []\n  (impl/deferred))\n\n(defn promise\n  \"The coerce based promise constructor. Creates an appropriate promise\n  instance depending on the provided value.\n\n  If an executor is provided, it will be used to resolve this\n  promise.\"\n  ([v]\n   (pt/-promise v))\n  ([v executor]\n   (pt/-fmap (pt/-promise v) identity executor)))\n\n(defn wrap\n  \"A convenience alias for `promise` coercion function that only accepts\n  a single argument.\"\n  [v]\n  (pt/-promise v))\n\n(defn create\n  \"Create a promise instance from a factory function. If an executor is\n  provided, the factory will be executed in the provided executor.\n\n  A factory function looks like `(fn [resolve reject] (resolve 1))`.\"\n  ([f]\n   (c/let [d (impl/deferred)]\n     (try\n       (f #(pt/-resolve! d %)\n          #(pt/-reject! d %))\n       (catch #?(:clj Throwable :cljs :default) e\n         (pt/-reject! d e)))\n     d))\n  ([f executor]\n   (c/let [d (impl/deferred)]\n     (exec/run! executor (fn []\n                           (try\n                             (f #(pt/-resolve! d %)\n                                #(pt/-reject! d %))\n                             (catch #?(:clj Exception :cljs :default) e\n                               (pt/-reject! d e)))))\n     d)))\n\n(defn promise?\n  \"Return true if `v` is a promise instance.\"\n  [v]\n  (impl/promise? v))\n\n(defn deferred?\n  \"Return true if `v` is a deferred instance.\"\n  [v]\n  (impl/deferred? v))\n\n#?(:cljs\n   (defn thenable?\n     \"Returns true if `v` is a promise like object.\"\n     [v]\n     (and (object? v) (fn? (unchecked-get v \"then\")))))\n\n;; Predicates\n\n(defn resolved?\n  \"Returns true if promise `p` is already fulfilled.\"\n  [p]\n  (pt/-resolved? p))\n\n(defn rejected?\n  \"Returns true if promise `p` is already rejected.\"\n  [p]\n  (pt/-rejected? p))\n\n(defn pending?\n  \"Returns true if promise `p` is stil pending.\"\n  [p]\n  (pt/-pending? p))\n\n(defn extract\n  \"Returns the current promise value.\"\n  ([p]\n   (pt/-extract p))\n  ([p default]\n   (pt/-extract p default)))\n\n(defn done?\n  \"Returns true if promise `p` is already done.\"\n  [p]\n  (not (pt/-pending? p)))\n\n;; Chaining\n\n(defn then\n  \"Chains a function `f` to be executed when the promise `p` is\n  successfully resolved. Returns a promise that will be resolved with\n  the return value of calling `f` with value as single argument; `f`\n  can return a plain value or promise instance, an automatic\n  unwrapping will be performed.\n\n  The computation will be executed in the completion thread by\n  default; you also can provide a custom executor.\"\n  ([p f]\n   (pt/-then (pt/-promise p) f))\n  ([p f executor]\n   (pt/-then (pt/-promise p) f executor)))\n\n(defn then'\n  \"Chains a function `f` to be executed when the promise `p` is\n  successfully resolved. Returns a promise that will be resolved with\n  the return value of calling `f` with value as single argument; `f`\n  should return a plain value, no automatic unwrapping will be\n  performed.\n\n  The computation will be executed in the completion thread by\n  default; you also can provide a custom executor.\"\n  ([p f]\n   (pt/-fmap (pt/-promise p) f))\n  ([p f executor]\n   (pt/-fmap (pt/-promise p) f executor)))\n\n(defn bind\n  \"Chains a function `f` to be executed with when the promise `p` is\n  successfully resolved. Returns a promise that will mirror the\n  promise instance returned by calling `f` with the value as single\n  argument; `f` **must** return a promise instance.\n\n  The computation will be executed in the completion thread by\n  default; you also can provide a custom executor.\"\n  ([p f]\n   (pt/-mcat (pt/-promise p) f))\n  ([p f executor]\n   (pt/-mcat (pt/-promise p) f executor)))\n\n(defn map\n  \"Chains a function `f` to be executed when the promise `p` is\n  successfully resolved. Returns a promise that will be resolved with\n  the return value of calling `f` with value as single argument.\n\n  The computation will be executed in the completion thread by\n  default; you also can provide a custom executor.\n\n  This function is intended to be used with `->>`.\"\n  ([f p]\n   (pt/-fmap (pt/-promise p) f))\n  ([executor f p]\n   (pt/-fmap (pt/-promise p) f executor)))\n\n(defn fmap\n  \"A convenience alias for `map`.\"\n  ([f p]\n   (pt/-fmap (pt/-promise p) f))\n  ([executor f p]\n   (pt/-fmap (pt/-promise p) f executor)))\n\n(defn mapcat\n  \"Chains a function `f` to be executed when the promise `p` is\n  successfully resolved. Returns a promise that will mirror the\n  promise instance returned by calling `f` with the value as single\n  argument; `f` **must** return a promise instance.\n\n  The computation will be executed in the completion thread by\n  default; you also can provide a custom executor.\n\n  This funciton is intended to be used with `->>`.\"\n  ([f p]\n   (pt/-mcat (pt/-promise p) f))\n  ([executor f p]\n   (pt/-mcat (pt/-promise p) f executor)))\n\n(defn mcat\n  \"A convenience alias for `mapcat`.\"\n  ([f p]\n   (pt/-mcat (pt/-promise p) f))\n  ([executor f p]\n   (pt/-mcat (pt/-promise p) f executor)))\n\n(defn chain\n  \"Chain variable number of functions to be executed serially using\n  `then`.\"\n  ([p f] (then p f))\n  ([p f & fs] (reduce then p (cons f fs))))\n\n(defn chain'\n  \"Chain variable number of functions to be executed serially using\n  `map`.\"\n  ([p f] (then' p f))\n  ([p f & fs] (reduce #(map %2 %1) (pt/-promise p) (cons f fs))))\n\n(defn handle\n  \"Chains a function `f` to be executed when the promise `p` is completed\n  (resolved or rejected) and returns a promise completed (resolving or\n  rejecting) with the return value of calling `f` with both: value and\n  the exception; `f` can return a new plain value or promise instance,\n  and automatic unwrapping will be performed.\n\n  The computation will be executed in the completion thread by\n  default; you also can provide a custom executor.\n\n  For performance sensitive code, look at `hmap` and `hcat`.\"\n  ([p f]\n   #?(:cljs (c/-> (pt/-promise p)\n                  (pt/-hmap (comp pt/-promise f))\n                  (pt/-mcat identity))\n      :clj  (c/-> (pt/-promise p)\n                  (pt/-hmap (comp pt/-promise f))\n                  (util/unwrap-completion-stage))))\n  ([p f executor]\n   #?(:cljs (c/-> (pt/-promise p)\n                  (pt/-hmap (comp pt/-promise f) executor)\n                  (pt/-mcat identity executor))\n      :clj  (c/-> (pt/-promise p)\n                  (pt/-hmap (comp pt/-promise f) executor)\n                  (util/unwrap-completion-stage)))))\n\n(defn finally\n  \"Like `handle` but ignores the return value. Returns a promise that\n  will mirror the original one.\"\n  ([p f]\n   (c/-> (pt/-promise p)\n         (pt/-fnly f)))\n  ([p f executor]\n   (c/-> (pt/-promise p)\n         (pt/-fnly f executor))))\n\n(defn hmap\n  \"Chains a function `f` to be executed when the promise `p` is completed\n  (resolved or rejected) and returns a promise completed (resolving or\n  rejecting) with the return value of calling `f` with both: value and\n  the exception.\n\n  The computation will be executed in the completion thread by\n  default; you also can provide a custom executor.\n\n  Intended to be used with `->>`.\"\n  ([f p]\n   (pt/-hmap (pt/-promise p) f))\n  ([executor f p]\n   (pt/-hmap (pt/-promise p) f executor)))\n\n(defn hcat\n  \"Chains a function `f` to be executed when the promise `p` is completed\n  (resolved or rejected) and returns a promise that will mirror the\n  promise instance returned by calling `f` with both: value and the\n  exception. The `f` function must return a promise instance.\n\n  The computation will be executed in the completion thread by\n  default; you also can provide a custom executor.\n\n  Intended to be used with `->>`.\"\n  ([f p]\n   #?(:cljs (c/-> (pt/-promise p)\n                  (pt/-hmap f)\n                  (pt/-mcat identity))\n      :clj  (c/-> (pt/-promise p)\n                  (pt/-hmap f)\n                  (util/unwrap-completion-stage))))\n  ([executor f p]\n   #?(:cljs (c/-> (pt/-promise p)\n                  (pt/-hmap f executor)\n                  (pt/-mcat identity executor))\n      :clj  (c/-> (pt/-promise p)\n                  (pt/-hmap f executor)\n                  (util/unwrap-completion-stage)))))\n\n(defn fnly\n  \"Inverted arguments version of `finally`; intended to be used with\n  `->>`.\"\n  ([f p]\n   (pt/-fnly (pt/-promise p) f))\n  ([executor f p]\n   (pt/-fnly (pt/-promise p) f executor)))\n\n(defn catch\n  \"Chains a function `f` to be executed when the promise `p` is\n  rejected. Returns a promise that will be resolved with the return\n  value of calling `f` with exception as single argument; `f` can\n  return a plain value or promise instance, an automatic unwrapping\n  will be performed.\n\n  The computation will be executed in the completion thread, look at\n  `merr` if you want the ability to schedule the computation to other\n  thread.\"\n  ([p f]\n   (pt/-merr (pt/-promise p) #(pt/-promise (f %))))\n  ([p pred-or-type f]\n   (c/let [accept? (if (ifn? pred-or-type)\n                     pred-or-type\n                     #(instance? pred-or-type %))]\n     (pt/-merr\n      (pt/-promise p)\n      (fn [e]\n        (if (accept? e)\n          (pt/-promise (f e))\n          (impl/rejected e)))))))\n\n(defn merr\n  \"Chains a function `f` to be executed when the promise `p` is\n  rejected. Returns a promise that will mirror the promise returned by\n  calling `f` with exception as single argument; `f` **must** return a\n  promise instance or throw an exception.\n\n  The computation will be executed in the completion thread by\n  default; you also can provide a custom executor.\n\n  This is intended to be used with `->>`.\"\n  ([f p] (pt/-merr p f))\n  ([executor f p] (pt/-merr p f executor)))\n\n(defn all\n  \"Given an array of promises, return a promise that is fulfilled when\n  all the items in the array are fulfilled.\n\n  Example:\n\n  ```\n  (-> (p/all [(promise :first-promise)\n              (promise :second-promise)])\n      (then (fn [[first-result second-result]])\n              (println (str first-result \\\", \\\" second-result))))\n  ```\n\n  Will print to out `:first-promise, :second-promise`.\n\n  If at least one of the promises is rejected, the resulting promise\n  will be rejected.\"\n  [promises]\n  (impl/all promises))\n\n(defn race\n  [promises]\n  (impl/race promises))\n\n(defn any\n  \"Given an array of promises, return a promise that is fulfilled when\n  first one item in the array is fulfilled.\"\n  ([promises]\n   (any promises ::default))\n  ([promises default]\n   (c/let [items (into #{} promises)\n           state (volatile! {:pending items\n                             :rejections []\n                             :resolved? false})\n           lock  (util/mutex)]\n     (create\n      (fn [resolve reject]\n        (c/doseq [p promises]\n          (pt/-fnly\n           (pt/-promise p)\n           (fn [v exception]\n             (pt/-lock! lock)\n             (try\n               (if exception\n                 (when-not (:resolved? @state)\n                   (c/let [state (vswap! state (fn [state]\n                                                 (c/-> state\n                                                       (update :pending disj p)\n                                                       (update :rejections conj exception))))]\n                     (when-not (seq (:pending state))\n                       (if (= default ::default)\n                         (reject (ex-info \"No promises resolved\"\n                                          {:rejections (:rejections state)}))\n                         (resolve default)))))\n\n                 (when-not (:resolved? @state)\n                   (c/let [{:keys [pending]} (vswap! state (fn [state]\n                                                             (c/-> state\n                                                                   (assoc :resolved? true)\n                                                                   (update :pending disj p))))]\n                     #?(:clj (c/run! pt/-cancel! pending))\n                     (resolve v))))\n               (finally\n                 (pt/-unlock! lock)))))))))))\n\n(defn wait-all*\n  \"Given an array of promises, return a promise that is fulfilled when\n  all the items in the array are resolved (independently if\n  successfully or exceptionally).\n\n  Example:\n\n  ```\n  (->> (p/wait-all* [(promise :first-promise)\n                     (promise :second-promise)])\n       (p/fmap (fn [_]\n                 (println \\\"done\\\"))))\n  ```\n\n  Rejected promises also counts as resolved.\"\n  [promises]\n  (c/let [promises (set promises)\n          total    (count promises)\n          prom     (deferred)]\n    (if (pos? total)\n      (c/let [counter (atom total)]\n        (c/run! #(pt/-fnly % (fn [_ _]\n                               (when (= 0 (swap! counter dec))\n                                 (pt/-resolve! prom nil))))\n                promises))\n      (pt/-resolve! prom nil))\n    prom))\n\n(defn wait-all\n  \"Given a variable number of promises, returns a promise which resolves\n  to `nil` when all provided promises complete (rejected or resolved).\n\n  **EXPERIMENTAL**\"\n  [& promises]\n  (wait-all* (into #{} promises)))\n\n#?(:clj\n   (defn wait-all!\n     \"A blocking version of `wait-all`.\"\n     [promises]\n     (pt/-await! (wait-all promises))))\n\n(defn run!\n  \"A promise aware run! function. Executed in terms of `then` rules.\"\n  ([f coll]\n   (c/-> (c/reduce #(then %1 (fn [_] (f %2))) (impl/resolved nil) coll)\n         (pt/-fmap (constantly nil))))\n  ([f coll executor]\n   (c/-> (c/reduce #(then %1 (fn [_] (f %2)) executor) (impl/resolved nil) coll)\n         (pt/-fmap (constantly nil)))))\n\n;; Cancellation\n\n(defn cancel!\n  \"Cancel the promise.\"\n  [p]\n  (pt/-cancel! p)\n  p)\n\n(defn cancelled?\n  \"Return true if `v` is a cancelled promise.\"\n  [v]\n  (pt/-cancelled? v))\n\n;; Completable\n\n(defn resolve!\n  \"Resolve a completable promise with a value.\"\n  ([o] (pt/-resolve! o nil))\n  ([o v] (pt/-resolve! o v)))\n\n(defn reject!\n  \"Reject a completable promise with an error.\"\n  [p e]\n  (pt/-reject! p e))\n\n;; --- Utils\n\n(defn promisify\n  \"Given a function that accepts a callback as the last argument, return a\n  function that returns a promise. Callback is expected to take one\n  parameter (result of a computation).\"\n  [callable]\n  (fn [& args]\n    (create (fn [resolve reject]\n               (c/let [args (c/-> (vec args) (conj resolve))]\n                 (try\n                   (apply callable args)\n                   (catch #?(:clj Throwable :cljs js/Error) e\n                     (reject e))))))))\n\n#?(:cljs\n   (defn ^{:jsdoc [\"@constructor\"]}\n     TimeoutException [message]\n     (this-as it\n       (.call js/Error it message {} nil)\n       it)))\n\n#?(:cljs\n   (goog/inherits TimeoutException js/Error))\n\n(defn timeout\n  \"Returns a cancellable promise that will be fulfilled with this\n  promise's fulfillment value or rejection reason.  However, if this\n  promise is not fulfilled or rejected within `ms` milliseconds, the\n  returned promise is cancelled with a TimeoutError.\"\n  ([p t] (timeout p t ::default :default))\n  ([p t v] (timeout p t v :default))\n  ([p t v scheduler]\n   (c/let [timeout (deferred)\n           tid     (exec/schedule! scheduler t #(if (= v ::default)\n                                                  (reject! timeout (TimeoutException. \"Operation timed out.\"))\n                                                  (resolve! timeout v)))]\n     (race [(fnly (fn [_ _] (pt/-cancel! tid)) p) timeout]))))\n\n(defn delay\n  \"Given a timeout in miliseconds and optional value, returns a promise\n  that will be fulfilled with provided value (or nil) after the time is\n  reached.\"\n  ([t] (delay t nil :default))\n  ([t v] (delay t v :default))\n  ([t v scheduler]\n   (c/let [d (deferred)]\n     (exec/schedule! scheduler t #(resolve! d v))\n     d)))\n\n(defmacro do*\n  \"An exception unsafe do-like macro. Supposes that we are already\n  wrapped in promise context so avoids defensive wrapping.\"\n  [& exprs]\n  (condp = (count exprs)\n    0 `(impl/resolved nil)\n    1 `(pt/-promise ~(first exprs))\n    (reduce (fn [acc e]\n              `(pt/-mcat (pt/-promise ~e) (fn [_#] ~acc)))\n            `(pt/-promise ~(last exprs))\n            (reverse (butlast exprs)))))\n\n(defmacro do\n  \"Execute potentially side effectful code and return a promise resolved\n  to the last expression after awaiting the result of each\n  expression.\"\n  [& exprs]\n  `(pt/-mcat\n    (pt/-promise nil)\n    (fn [_#]\n      (promesa.core/do* ~@exprs))))\n\n(defmacro do!\n  \"A convenience alias for `do` macro.\"\n  [& exprs]\n  `(promesa.core/do ~@exprs))\n\n(defmacro let*\n  \"An exception unsafe let-like macro. Supposes that we are already\n  wrapped in promise context so avoids defensive wrapping.\"\n  [bindings & body]\n  (assert (even? (count bindings)) (str \"Uneven binding vector: \" bindings))\n  (c/->> (reverse (partition 2 bindings))\n         (reduce (fn [acc [l r]]\n                   `(pt/-mcat (pt/-promise ~r) (fn [~l] ~acc)))\n                 `(do* ~@body))))\n\n(defmacro let\n  \"A `let` alternative that always returns promise and waits for all the\n  promises on the bindings.\"\n  [bindings & body]\n  (if (seq bindings)\n    `(pt/-mcat\n      (pt/-promise nil)\n      (fn [_#] (promesa.core/let* ~bindings ~@body)))\n    `(promesa.core/do ~@body)))\n\n(defmacro plet\n  \"A parallel let; executes all the bindings in parallel and when all\n  bindings are resolved, executes the body.\"\n  [bindings & body]\n  (assert (even? (count bindings)) (str \"Uneven binding vector: \" bindings))\n  `(pt/-mcat\n    (pt/-promise nil)\n    (fn [_#]\n      ~(c/let [bindings (partition 2 bindings)]\n         `(c/-> (all ~(mapv second bindings))\n                (bind (fn [[~@(c/map first bindings)]]\n                        (promesa.core/do* ~@body))))))))\n\n(defn thread-call\n  \"Analogous to `clojure.core.async/thread` that returns a promise\n  instance instead of the `Future`. Useful for executing synchronous\n  code in a separate thread (also works in cljs).\"\n  ([f] (exec/submit! :thread (exec/wrap-bindings f)))\n  ([executor f] (exec/submit! executor (exec/wrap-bindings f))))\n\n(defn vthread-call\n  \"A shortcut for `(p/thread-call :vthread f)`.\"\n  [f]\n  (thread-call :vthread f))\n\n(defmacro thread\n  \"Analogous to `clojure.core.async/thread` that returns a promise instance\n  instead of the `Future`.\"\n  [& body]\n  `(thread-call (^once fn [] ~@body)))\n\n(defmacro vthread\n  \"Analogous to `clojure.core.async/thread` that returns a promise instance\n  instead of the `Future`. Useful for executing synchronous code in a\n  separate thread (also works in cljs).\"\n  [& body]\n  `(vthread-call (^once fn [] ~@body)))\n\n(defmacro future\n  \"Analogous macro to `clojure.core/future` that returns promise\n  instance instead of the `Future`. Exposed just for convenience and\n  works as an alias to `thread`.\"\n  [& body]\n  `(thread-call :default (^once fn [] ~@body)))\n\n(defrecord Recur [bindings])\n(defn recur?\n  [o]\n  (instance? Recur o))\n\n(defmacro loop\n  [bindings & body]\n  (c/let [binds (partition 2 2 bindings)\n          names (c/map first binds)\n          fvals (c/map second binds)\n          tsym  (gensym \"loop-fn-\")\n          res-s (gensym \"res-\")\n          err-s (gensym \"err-\")\n          rej-s (gensym \"reject-fn-\")\n          rsv-s (gensym \"resolve-fn-\")]\n    `(create\n      (fn [~rsv-s ~rej-s]\n        (c/let [~tsym (fn ~tsym [~@names]\n                        (c/->> (promesa.core/let [~@(c/mapcat (fn [nsym] [nsym nsym]) names)] ~@body)\n                               (promesa.core/fnly\n                                (fn [~res-s ~err-s]\n                                  ;; (prn \"result\" res# err#)\n                                  (if (some? ~err-s)\n                                    (~rej-s ~err-s)\n                                    (if (recur? ~res-s)\n                                      (do\n                                        (promesa.exec/run!\n                                         :vthread\n                                         (promesa.exec/wrap-bindings\n                                          ~(if (seq names)\n                                             `(fn [] (apply ~tsym (:bindings ~res-s)))\n                                           tsym)))\n                                      nil)\n                                      (~rsv-s ~res-s)))))))]\n          (promesa.exec/run!\n           :vthread\n           (promesa.exec/wrap-bindings\n            ~(if (seq names)\n               `(fn [] (~tsym ~@fvals))\n               tsym))))))))\n\n(defmacro recur\n  [& args]\n  `(->Recur [~@args]))\n\n(defmacro ->\n  \"Like the clojure.core/->, but it will handle promises in values\n  and make sure the next form gets the value realized instead of\n  the promise.\n\n  Example fetching data in the browser with CLJS:\n\n  (p/-> (js/fetch #js {...}) ; returns a promise\n        .-body)\n\n  The result of a thread is a promise that will resolve to the\n  end of the thread chain.\"\n  [x & forms]\n  (c/let [fns (mapv (fn [arg]\n                      (c/let [[f & args] (if (sequential? arg)\n                                           arg\n                                           (list arg))]\n                        `(fn [p#] (~f p# ~@args)))) forms)]\n    `(chain (promise ~x) ~@fns)))\n\n(defmacro ->>\n  \"Like the clojure.core/->>, but it will handle promises in values\n  and make sure the next form gets the value realized instead of\n  the promise.\n\n  Example fetching data in the browser with CLJS:\n\n  (p/->> (js/fetch #js {...}) ; returns a promise\n         .-body\n         read-string\n         (mapv inc)\n\n  The result of a thread is a promise that will resolve to the\n  end of the thread chain.\"\n  [x & forms]\n  (c/let [fns (mapv (fn [arg]\n                      (c/let [[f & args] (if (sequential? arg)\n                                           arg\n                                           (list arg))]\n                        `(fn [p#] (~f ~@args p#)))) forms)]\n    `(chain (promise ~x) ~@fns)))\n\n(defmacro as->\n  \"Like clojure.core/as->, but it will handle promises in values\n   and make sure the next form gets the value realized instead of\n   the promise.\"\n  [expr name & forms]\n  `(let [~name ~expr\n         ~@(interleave (repeat name) (butlast forms))]\n     ~(if (empty? forms)\n        name\n        (last forms))))\n\n(defmacro with-redefs\n  \"Like clojure.core/with-redefs, but it will handle promises in\n   body and wait until they resolve or reject before restoring the\n   bindings. Useful for mocking async APIs.\"\n  [bindings & body]\n  (c/let [names         (take-nth 2 bindings)\n          vals          (take-nth 2 (drop 1 bindings))\n          orig-val-syms (c/map (comp gensym #(str % \"-orig-val__\") name) names)\n          temp-val-syms (c/map (comp gensym #(str % \"-temp-val__\") name) names)\n          binds         (c/map vector names temp-val-syms)\n          resets        (reverse (c/map vector names orig-val-syms))\n          bind-value    (if (:ns &env)\n                          (fn [[k v]] (list 'set! k v))\n                          (fn [[k v]] (list 'alter-var-root (list 'var k) (list 'constantly v))))]\n    `(c/let [~@(interleave orig-val-syms names)\n             ~@(interleave temp-val-syms vals)]\n       ~@(c/map bind-value binds)\n       (c/-> (promesa.core/do! ~@body)\n             (promesa.core/finally\n               (fn [_# _#]\n                 ~@(c/map bind-value resets)))))))\n\n(defmacro doseq\n  \"Simplified version of `doseq` which takes one binding and a seq, and\n  runs over it using `promesa.core/run!`\"\n  [[binding xs] & body]\n  `(run! (fn [~binding]\n           (promesa.core/do* ~@body))\n         ~xs))\n\n#?(:clj\n(defn await!\n  \"Generic await operation. Block current thread until some operation\n  terminates. Returns `nil` on timeout; does not catch any other\n  exception.\n\n  Default implementation for Thread, CompletableFuture and\n  CountDownLatch.\n\n  The return value is implementation specific.\"\n  ([resource]\n   (try\n     (pt/-await! resource)\n     (catch ExecutionException e\n       (throw (.getCause e)))\n     (catch CompletionException e\n       (throw (.getCause e)))))\n  ([resource duration]\n   (try\n     (pt/-await! resource duration)\n     (catch ExecutionException e\n       (throw (.getCause e)))\n     (catch CompletionException e\n       (throw (.getCause e)))\n     (catch TimeoutException _\n       nil)))))\n\n#?(:clj\n(defn await\n  \"A exception safer variant of `await!`. Returns `nil` on timeout\n  exception, forwards interrupted exception and all other exceptions\n  are returned as value, so user is responsible for checking if the returned\n  value is exception or not.\"\n  ([resource]\n   (try\n     (pt/-await! resource)\n     (catch ExecutionException e\n       (.getCause e))\n     (catch CompletionException e\n       (.getCause e))\n     (catch InterruptedException cause\n       (throw cause))\n     (catch Throwable cause\n       cause)))\n  ([resource duration]\n   (try\n     (pt/-await! resource duration)\n     (catch TimeoutException _\n       nil)\n     (catch ExecutionException e\n       (.getCause e))\n     (catch CompletionException e\n       (.getCause e))\n     (catch InterruptedException cause\n       (throw cause))\n     (catch Throwable cause\n       cause)))))\n","~:reader-features",["^F",["~:cljs"]],"~:cljc",true,"~:source-map-compact",["^ ","mappings","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","names",["promesa.core/resolved","v","promesa.impl/resolved","promesa.core/rejected","promesa.impl/rejected","promesa.core/deferred","promesa.impl/deferred","var_args","G__42652","promesa.core/promise","js/Error","promesa.protocols/-promise","executor","promesa.protocols/-fmap","cljs.core/identity","promesa.core/wrap","G__42662","promesa.core/create","f","d","e42663","G__42664","p1__42657#","G__42665","p1__42658#","promesa.protocols/-resolve!","promesa.protocols/-reject!","e","promesa.exec.run_BANG_","e42668","G__42669","p1__42659#","G__42670","p1__42660#","promesa.core/promise?","promesa.impl/promise?","promesa.core/deferred?","promesa.impl/deferred?","promesa.core/thenable?","cljs.core/object?","cljs.core/fn?","promesa.core/resolved?","p","promesa.protocols/-resolved?","promesa.core/rejected?","promesa.protocols/-rejected?","promesa.core/pending?","promesa.protocols/-pending?","G__42681","promesa.core/extract","promesa.protocols/-extract","default","promesa.core/done?","cljs.core/not","G__42686","promesa.core/then","promesa.protocols/-then","G__42690","promesa.core/then'","G__42692","promesa.core/bind","promesa.protocols/-mcat","G__42697","promesa.core/map","G__42703","promesa.core/fmap","G__42709","promesa.core/mapcat","G__42716","promesa.core/mcat","G__42726","promesa.core/chain","args-arr__4885__auto__","len__4864__auto__","i__4865__auto__","argseq__4886__auto__","cljs.core/IndexedSeq","seq42723","G__42724","cljs.core/first","cljs.core/next","G__42725","self__4851__auto__","promesa.core.then","fs","cljs.core.reduce","cljs.core/cons","G__42742","promesa.core/chain'","seq42737","G__42738","G__42739","promesa.core.then_SINGLEQUOTE_","p1__42733#","p2__42732#","promesa.core.map","G__42750","promesa.core/handle","promesa.protocols/-hmap","cljs.core.comp","G__42754","promesa.core/finally","promesa.protocols/-fnly","G__42758","promesa.core/hmap","G__42766","promesa.core/hcat","G__42768","promesa.core/fnly","G__42778","promesa.core/catch","p1__42773#","promesa.protocols/-merr","pred-or-type","accept?","p1__42774#","cljs.core/ifn?","G__42780","promesa.core/merr","promesa.core/all","promises","promesa.impl/all","promesa.core/race","promesa.impl/race","G__42788","promesa.core/any","promesa.core.any","items","cljs.core.into","state","cljs.core/volatile!","lock","promesa.util/mutex","promesa.core.create","resolve","reject","seq__42792","cljs.core/seq","chunk__42793","count__42794","i__42795","temp__5753__auto__","cljs.core/chunked-seq?","c__4679__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","exception","cljs.core/deref","cljs.core.update","cljs.core/disj","cljs.core/conj","cljs.core._EQ_","G__42811","G__42822","cljs.core.ex_info","map__42814","cljs.core/--destructure-map","cljs.core.get","map__42823","pending","cljs.core.assoc","promesa.core/wait-all*","cljs.core/set","total","prom","counter","cljs.core.atom","p1__42827#","cljs.core/run!","_","cljs.core.swap_BANG_","cljs.core/dec","args__4870__auto__","argseq__4871__auto__","promesa.core/wait-all","seq42831","self__4852__auto__","G__42842","promesa.core/run!","coll","p1__42834#","p2__42835#","cljs.core/constantly","p1__42836#","p2__42837#","promesa.core/cancel!","promesa.protocols/-cancel!","promesa.core/cancelled?","promesa.protocols/-cancelled?","G__42850","promesa.core/resolve!","o","promesa.core/reject!","promesa.core/promisify","callable","args","cljs.core/vec","cljs.core.conj","e42855","cljs.core.apply","promesa.core/TimeoutException","message","it","goog/inherits","G__42863","promesa.core/timeout","t","promesa.core.timeout","scheduler","timeout","tid","promesa.exec.schedule_BANG_","promesa.core.resolve_BANG_","promesa.core.fnly","G__42880","promesa.core/delay","promesa.core.delay","G__42891","promesa.core/thread-call","promesa.exec.submit_BANG_","promesa.exec/wrap-bindings","promesa.core/vthread-call","promesa.core.thread_call","this__4502__auto__","k__4503__auto__","this__4504__auto__","k42901","else__4505__auto__","G__42911","cljs.core/Keyword","bindings","__extmap","this__4522__auto__","f__4523__auto__","init__4524__auto__","ret__4525__auto__","p__42914","vec__42916","k__4526__auto__","cljs.core.nth","v__4527__auto__","this__4517__auto__","writer__4518__auto__","opts__4519__auto__","pr-pair__4520__auto__","keyval__4521__auto__","cljs.core/pr-sequential-writer","cljs.core.concat","cljs.core/PersistentVector","G__42900","cljs.core/RecordIter","cljs.core/-iterator","cljs.core/nil-iter","this__4500__auto__","__meta","this__4497__auto__","__hash","this__4506__auto__","this__4498__auto__","h__4360__auto__","coll__4499__auto__","cljs.core/hash-unordered-coll","this42903","other42904","this__4512__auto__","k__4513__auto__","cljs.core/contains?","cljs.core.dissoc","cljs.core/-with-meta","cljs.core/not-empty","this__4509__auto__","G__42929","this__4510__auto__","k__4511__auto__","pred__42932","cljs.core/keyword-identical?","expr__42933","this__4515__auto__","cljs.core/MapEntry","this__4501__auto__","this__4507__auto__","entry__4508__auto__","cljs.core/vector?","cljs.core/-nth","cljs.core/-conj","promesa.core/Recur","this__4546__auto__","cljs.core/List","writer__4547__auto__","cljs.core/-write","G__42906","extmap__4542__auto__","G__42939","cljs.core/record?","promesa.core/->Recur","promesa.core/map->Recur","promesa.core/recur?"]],"~:used-vars",["^F",["~$cljs.core/--destructure-map","~$promesa.core/promise","~$promesa.core/resolve!","~$cljs.core/comp","~$promesa.core/wait-all*","~$promesa.core/Recur","~$promesa.protocols/-mcat","~$promesa.core/promisify","~$promesa.protocols/-reject!","~$promesa.core/mapcat","~$promesa.util/mutex","~$cljs.core/pr-sequential-writer","~$promesa.protocols/-resolve!","~$cljs.core/vector?","~$promesa.core/map->Recur","~$cljs.core/=","~$promesa.core/mcat","~$cljs.core/dec","~$promesa.core/catch","~$cljs.core/ifn?","~$cljs.core/-assoc","~$cljs.core/-write","~$cljs.core/IndexedSeq","~$cljs.core/-deref","~$promesa.core/fmap","~$cljs.core/-iterator","~$promesa.exec/wrap-bindings","~$cljs.core/count","~$cljs.core/deref","~$promesa.core/extract","~$cljs.core/reduce","~$promesa.core/thread-call","~$cljs.core/seq","~$cljs.core/chunk-first","~$cljs.core/apply","~$promesa.core/rejected?","~$cljs.core/identity","~$cljs.core/Keyword","~$promesa.core/merr","~$promesa.core/rejected","~$promesa.core/run!","~$cljs.core/MapEntry","~$cljs.core/dissoc","~$cljs.core/keyword-identical?","~$promesa.protocols/-promise","~$cljs.core/chunk-rest","~$cljs.core/atom","~$cljs.core/-with-meta","~$cljs.core/concat","~$promesa.exec/submit!","~$promesa.core/TimeoutException","~$promesa.impl/rejected","~$promesa.protocols/-unlock!","~$cljs.core/set","~$promesa.core/wrap","~$promesa.core/bind","~$promesa.protocols/-then","~$promesa.core/deferred","~$cljs.core/contains?","~$cljs.core/into","~$cljs.core/conj","~$promesa.protocols/-extract","~$promesa.core/then'","~$goog/inherits","~$cljs.core/-conj","~$promesa.core/resolved?","~$promesa.core/vthread-call","~$cljs.core/update","~$promesa.core/map","~$cljs.core/run!","~$promesa.core/chain'","~$promesa.core/all","~$cljs.core/fn?","~$promesa.core/->Recur","~$promesa.core/cancelled?","~$promesa.core/resolved","~$cljs.core/PersistentVector","~$promesa.protocols/-cancelled?","~$cljs.core/volatile!","~$promesa.core/recur?","~$cljs.core/List","~$promesa.impl/all","~$cljs.core/swap!","~$promesa.core/pending?","~$cljs.core/get","~$cljs.core/constantly","~$promesa.core/hcat","~$promesa.protocols/-hmap","~$promesa.impl/deferred","~$cljs.core/-nth","~$promesa.protocols/-resolved?","~$cljs.core/object?","~$cljs.core/not-empty","~$promesa.protocols/-fmap","~$promesa.impl/resolved","~$promesa.core/handle","~$cljs.core/-vreset!","~$promesa.impl/race","~$promesa.protocols/-lock!","~$cljs.core/record?","~$promesa.protocols/-fnly","~$promesa.core/hmap","~$cljs.core/-lookup","~$promesa.core/race","~$promesa.core/fnly","~$promesa.core/create","~$cljs.core/nth","~$cljs.core/ex-info","~$promesa.protocols/-pending?","~$promesa.core/wait-all","~$promesa.core/thenable?","~$promesa.core/cancel!","~$cljs.core/nil-iter","~$promesa.core/finally","~$promesa.core/done?","~$cljs.core/next","~$cljs.core/vec","~$promesa.core/then","~$cljs.core/RecordIter","~$promesa.core/any","~$promesa.core/deferred?","~$cljs.core/not","~$promesa.protocols/-rejected?","~$cljs.core/disj","~$cljs.core/cons","~$cljs.core/assoc","~$promesa.protocols/-cancel!","~$promesa.protocols/-merr","~$promesa.core/delay","~$promesa.core/chain","~$cljs.core/hash-unordered-coll","~$promesa.core/timeout","~$cljs.core/first","~$promesa.core/promise?","~$promesa.exec/schedule!","~$promesa.impl/promise?","~$js/Error","~$promesa.impl/deferred?","~$promesa.exec/run!","~$cljs.core/chunked-seq?","~$promesa.core/reject!"]]],"~:cache-keys",["~#cmap",[["^2A","goog/dom/tagname.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^F",[]],"~:deps-syms",["^20","~$goog.dom.HtmlElement"]]],["^2A","goog/html/trustedtypes.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5X",["^ ","^5Y",null,"^5Z",["^F",[]],"^5[",["^20"]]],["^2A","goog/labs/useragent/browser.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5X",["^ ","^5Y",null,"^5Z",["^F",[]],"^5[",["^20","~$goog.array","~$goog.object","~$goog.labs.userAgent.util","~$goog.string.internal"]]],["^2A","goog/html/safeurl.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5X",["^ ","^5Y",null,"^5Z",["^F",[]],"^5[",["^20","~$goog.asserts","~$goog.fs.url","~$goog.html.TrustedResourceUrl","~$goog.i18n.bidi.Dir","~$goog.i18n.bidi.DirectionalString","~$goog.string.Const","~$goog.string.TypedString","^64"]]],["^2A","goog/array/array.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5X",["^ ","^5Y",null,"^5Z",["^F",[]],"^5[",["^20","^65"]]],["^2A","goog/debug/error.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5X",["^ ","^5Y",null,"^5Z",["^F",[]],"^5[",["^20"]]],["^2A","promesa/impl.cljc"],["f8468543720774df3df92671c2aa9edb30df0cdc","^5X",["^ ","^5Y",null,"^5Z",["^F",[]],"^5[",["^20","^C","^C","^1Y","^1[","^22","~$promesa.impl.promise"]]],["^2A","goog/dom/nodetype.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5X",["^ ","^5Y",null,"^5Z",["^F",[]],"^5[",["^20"]]],["^2A","promesa/impl/promise.js"],["f8468543720774df3df92671c2aa9edb30df0cdc","^5X",["^ ","^5Y",null,"^5Z",["^F",[]],"^5[",["^20"]]],["^2A","goog/string/typedstring.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5X",["^ ","^5Y",null,"^5Z",["^F",[]],"^5[",["^20"]]],["^2A","goog/object/object.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5X",["^ ","^5Y",null,"^5Z",["^F",[]],"^5[",["^20"]]],["^2A","goog/dom/asserts.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5X",["^ ","^5Y",null,"^5Z",["^F",[]],"^5[",["^20","^65"]]],"~:SHADOW-TIMESTAMP",[1685409445000,1685409445000,1685409425000],["^2A","promesa/util.cljc"],["f8468543720774df3df92671c2aa9edb30df0cdc","^5X",["^ ","^5Y",null,"^5Z",["^F",[]],"^5[",["^20","^C","^1Y"]]],["^2A","goog/math/long.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5X",["^ ","^5Y",null,"^5Z",["^F",[]],"^5[",["^20","^65","~$goog.reflect"]]],["^2A","goog/html/trustedresourceurl.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5X",["^ ","^5Y",null,"^5Z",["^F",[]],"^5[",["^20","^65","~$goog.fs.blob","^66","~$goog.html.SafeScript","~$goog.html.trustedtypes","^68","^69","^6:","^6;"]]],["^2A","goog/string/internal.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5X",["^ ","^5Y",null,"^5Z",["^F",[]],"^5[",["^20"]]],["^2A","goog/functions/functions.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5X",["^ ","^5Y",null,"^5Z",["^F",[]],"^5[",["^20"]]],["^2A","goog/html/safestyle.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5X",["^ ","^5Y",null,"^5Z",["^F",[]],"^5[",["^20","^6:","~$goog.html.SafeUrl","^6;","^65","^64"]]],["^2A","goog/dom/safe.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5X",["^ ","^5Y",null,"^5Z",["^F",[]],"^5[",["^20","^65","~$goog.dom.asserts","~$goog.functions","~$goog.html.SafeHtml","^6@","~$goog.html.SafeStyle","^6B","^67","~$goog.html.uncheckedconversions","^6:","^64"]]],["^2A","goog/html/safehtml.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5X",["^ ","^5Y",null,"^5Z",["^F",[]],"^5[",["^20","^6:","^68","^69","^6@","^6F","~$goog.html.SafeStyleSheet","^6B","~$goog.dom.TagName","^67","^6;","^65","~$goog.labs.userAgent.browser","^61","^62","^64","~$goog.dom.tags","^6A"]]],["^2A","goog/dom/tags.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5X",["^ ","^5Y",null,"^5Z",["^F",[]],"^5[",["^20","^62"]]],["^2A","goog/fs/blob.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5X",["^ ","^5Y",null,"^5Z",["^F",[]],"^5[",["^20"]]],["^2A","goog/asserts/asserts.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5X",["^ ","^5Y",null,"^5Z",["^F",[]],"^5[",["^20","~$goog.debug.Error","~$goog.dom.NodeType"]]],["^2A","goog/uri/uri.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5X",["^ ","^5Y",null,"^5Z",["^F",[]],"^5[",["^20","^61","^65","~$goog.collections.maps","~$goog.string","~$goog.structs","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^2A","goog/collections/maps.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5X",["^ ","^5Y",null,"^5Z",["^F",[]],"^5[",["^20"]]],["^2A","goog/i18n/bidi.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5X",["^ ","^5Y",null,"^5Z",["^F",[]],"^5[",["^20"]]],["^2A","goog/fs/url.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5X",["^ ","^5Y",null,"^5Z",["^F",[]],"^5[",["^20"]]],["^2A","goog/base.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5X",["^ ","^5Y",null,"^5Z",["^F",[]],"^5[",[]]],["^2A","promesa/core.cljc"],["f8468543720774df3df92671c2aa9edb30df0cdc","^5X",["^ ","^5Y",null,"^5Z",["^F",[]],"^5[",["^20","^C","^1Y","^C","^22","^1X","^1["]]],["^2A","goog/structs/structs.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5X",["^ ","^5Y",null,"^5Z",["^F",[]],"^5[",["^20","^61","^62"]]],["^2A","goog/string/string.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5X",["^ ","^5Y",null,"^5Z",["^F",[]],"^5[",["^20","~$goog.dom.safe","^6G","^6:","^64"]]],["^2A","goog/reflect/reflect.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5X",["^ ","^5Y",null,"^5Z",["^F",[]],"^5[",["^20"]]],["^2A","goog/labs/useragent/util.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5X",["^ ","^5Y",null,"^5Z",["^F",[]],"^5[",["^20","~$goog.labs.userAgent","^64"]]],["^2A","goog/string/stringbuffer.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5X",["^ ","^5Y",null,"^5Z",["^F",[]],"^5[",["^20"]]],["^2A","promesa/protocols.cljc"],["f8468543720774df3df92671c2aa9edb30df0cdc","^5X",["^ ","^5Y",null,"^5Z",["^F",[]],"^5[",["^20","^C"]]],["^2A","goog/labs/useragent/useragent.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5X",["^ ","^5Y",null,"^5Z",["^F",[]],"^5[",["^20"]]],["^2A","goog/html/uncheckedconversions.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5X",["^ ","^5Y",null,"^5Z",["^F",[]],"^5[",["^20","^65","^6E","^6@","^6F","^6H","^6B","^67","^6:","^64","^68"]]],["^2A","goog/dom/htmlelement.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5X",["^ ","^5Y",null,"^5Z",["^F",[]],"^5[",["^20"]]],["^2A","cljs/core.cljs"],["78c69af9064be23a596f27f744408340fe4ca37b","^5X",["^ ","^5Y",null,"^5Z",["^F",[]],"^5[",["^20","~$goog.math.Long","~$goog.math.Integer","^6O","^62","^61","~$goog.Uri","~$goog.string.StringBuffer"]]],["^2A","goog/html/safescript.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5X",["^ ","^5Y",null,"^5Z",["^F",[]],"^5[",["^20","^6:","^6;","^6A","^65"]]],["^2A","goog/html/safestylesheet.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5X",["^ ","^5Y",null,"^5Z",["^F",[]],"^5[",["^20","^6:","^6F","^6;","^62","^65","^64"]]],["^2A","goog/math/integer.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5X",["^ ","^5Y",null,"^5Z",["^F",[]],"^5[",["^20","^6>"]]],["^2A","goog/uri/utils.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5X",["^ ","^5Y",null,"^5Z",["^F",[]],"^5[",["^20","^65","^6O"]]],["^2A","goog/string/const.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5X",["^ ","^5Y",null,"^5Z",["^F",[]],"^5[",["^20","^65","^6;"]]],["^2A","promesa/exec.cljc"],["f8468543720774df3df92671c2aa9edb30df0cdc","^5X",["^ ","^5Y",null,"^5Z",["^F",[]],"^5[",["^20","^C","^1Y","^1[","^62","^6<"]]]]],"~:clj-info",["^ ","jar:file:/home/jo/.m2/repository/org/clojure/clojurescript/1.10.891/clojurescript-1.10.891.jar!/cljs/source_map/base64_vlq.clj",1685409425000,"jar:file:/home/jo/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/edn.clj",1685409422000,"jar:file:/home/jo/.m2/repository/org/clojure/clojurescript/1.10.891/clojurescript-1.10.891.jar!/cljs/analyzer.cljc",1685409425000,"jar:file:/home/jo/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/core.clj",1685409422000,"jar:file:/home/jo/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader/default_data_readers.clj",1685150153000,"jar:file:/home/jo/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader/impl/inspect.clj",1685150153000,"jar:file:/home/jo/.m2/repository/org/clojure/clojurescript/1.10.891/clojurescript-1.10.891.jar!/cljs/util.cljc",1685409425000,"jar:file:/home/jo/.m2/repository/org/clojure/clojurescript/1.10.891/clojurescript-1.10.891.jar!/cljs/instant.clj",1685409425000,"jar:file:/home/jo/.m2/repository/org/clojure/clojurescript/1.10.891/clojurescript-1.10.891.jar!/cljs/env.cljc",1685409425000,"jar:file:/home/jo/.m2/repository/org/clojure/data.json/2.4.0/data.json-2.4.0.jar!/clojure/data/json.clj",1685150153000,"jar:file:/home/jo/.m2/repository/org/clojure/clojurescript/1.10.891/clojurescript-1.10.891.jar!/cljs/source_map/base64.clj",1685409425000,"jar:file:/home/jo/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/instant.clj",1685409422000,"jar:file:/home/jo/.m2/repository/funcool/promesa/11.0.671/promesa-11.0.671.jar!/promesa/protocols.cljc",1685751895000,"jar:file:/home/jo/.m2/repository/funcool/promesa/11.0.671/promesa-11.0.671.jar!/promesa/util.cljc",1685751895000,"jar:file:/home/jo/.m2/repository/org/clojure/clojurescript/1.10.891/clojurescript-1.10.891.jar!/cljs/analyzer/passes.cljc",1685409425000,"jar:file:/home/jo/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader.clj",1685150153000,"jar:file:/home/jo/.m2/repository/funcool/promesa/11.0.671/promesa-11.0.671.jar!/promesa/core.cljc",1685751895000,"jar:file:/home/jo/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/pprint.clj",1685409422000,"jar:file:/home/jo/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/string.clj",1685409422000,"jar:file:/home/jo/.m2/repository/org/clojure/clojurescript/1.10.891/clojurescript-1.10.891.jar!/cljs/core.cljc",1685409425000,"jar:file:/home/jo/.m2/repository/org/clojure/clojurescript/1.10.891/clojurescript-1.10.891.jar!/cljs/source_map.clj",1685409425000,"jar:file:/home/jo/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/set.clj",1685409422000,"jar:file:/home/jo/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/java/io.clj",1685409422000,"jar:file:/home/jo/.m2/repository/org/clojure/clojurescript/1.10.891/clojurescript-1.10.891.jar!/cljs/externs.clj",1685409425000,"jar:file:/home/jo/.m2/repository/org/clojure/clojurescript/1.10.891/clojurescript-1.10.891.jar!/cljs/tagged_literals.cljc",1685409425000,"jar:file:/home/jo/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader/reader_types.clj",1685150153000,"jar:file:/home/jo/.m2/repository/org/clojure/clojurescript/1.10.891/clojurescript-1.10.891.jar!/cljs/analyzer/impl.cljc",1685409425000,"jar:file:/home/jo/.m2/repository/org/clojure/clojurescript/1.10.891/clojurescript-1.10.891.jar!/cljs/compiler.cljc",1685409425000,"jar:file:/home/jo/.m2/repository/funcool/promesa/11.0.671/promesa-11.0.671.jar!/promesa/exec.cljc",1685751895000,"jar:file:/home/jo/.m2/repository/funcool/promesa/11.0.671/promesa-11.0.671.jar!/promesa/impl.cljc",1685751895000,"jar:file:/home/jo/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader/impl/errors.clj",1685150153000,"jar:file:/home/jo/.m2/repository/org/clojure/clojurescript/1.10.891/clojurescript-1.10.891.jar!/cljs/analyzer/passes/and_or.cljc",1685409425000,"jar:file:/home/jo/.m2/repository/org/clojure/clojurescript/1.10.891/clojurescript-1.10.891.jar!/cljs/js_deps.cljc",1685409425000],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","promesa/core.cljc","^7",7,"^8",5,"^9",7,"^:",17],"^;",["^ ","^<","^=","^>","^?","^@","^A","^B","^C"],"^D",null,"^E",["^F",["^G","^H","^I","^J","^K","^L","^M","^N","^O","^P","^Q","^R","^S","^T","^U","^V","^W"]],"^X",["^ ","^Y",["^ ","^Z",["^[",[["~$&","^10"]]],"^11","A convenience alias for `do` macro.","^7",563,"^8",1,"^6","promesa/core.cljc","^12","^13","^14","^15","^16",true],"^K",["^ ","^Z",["^[",[[["^17","^18"],"~$&","^19"]]],"^11","Simplified version of `doseq` which takes one binding and a seq, and\n  runs over it using `promesa.core/run!`","^7",753,"^8",1,"^6","promesa/core.cljc","^12","^1:","^14","^15","^16",true],"^L",["^ ","^Z",["^[",[["^1;","~$&","^19"]]],"^11","A `let` alternative that always returns promise and waits for all the\n  promises on the bindings.","^7",578,"^8",1,"^6","promesa/core.cljc","^12","^1<","^14","^15","^16",true],"^M",["^ ","^Z",["^[",[["~$x","~$&","^1="]]],"^11","Like the clojure.core/->, but it will handle promises in values\n  and make sure the next form gets the value realized instead of\n  the promise.\n\n  Example fetching data in the browser with CLJS:\n\n  (p/-> (js/fetch #js {...}) ; returns a promise\n        .-body)\n\n  The result of a thread is a promise that will resolve to the\n  end of the thread chain.","^7",678,"^8",1,"^6","promesa/core.cljc","^12","^1>","^14","^15","^16",true],"^N",["^ ","^Z",["^[",[["~$&","^19"]]],"^11","Analogous macro to `clojure.core/future` that returns promise\n  instance instead of the `Future`. Exposed just for convenience and\n  works as an alias to `thread`.","^7",626,"^8",1,"^6","promesa/core.cljc","^12","^1?","^14","^15","^16",true],"^1@",["^ ","^Z",["^[",[["^1;","~$&","^19"]]],"^11","A parallel let; executes all the bindings in parallel and when all\n  bindings are resolved, executes the body.","^7",588,"^8",1,"^6","promesa/core.cljc","^12","^1A","^14","^15","^16",true],"^O",["^ ","^Z",["^[",[["^1B","^1C","~$&","^1="]]],"^11","Like clojure.core/as->, but it will handle promises in values\n   and make sure the next form gets the value realized instead of\n   the promise.","^7",720,"^8",1,"^6","promesa/core.cljc","^12","^1D","^14","^15","^16",true],"^P",["^ ","^Z",["^[",[["~$&","^10"]]],"^11","Execute potentially side effectful code and return a promise resolved\n  to the last expression after awaiting the result of each\n  expression.","^7",553,"^8",1,"^6","promesa/core.cljc","^12","^1E","^14","^15","^16",true],"^1F",["^ ","^Z",["^[",[["^1;","~$&","^19"]]],"^11","An exception unsafe let-like macro. Supposes that we are already\n  wrapped in promise context so avoids defensive wrapping.","^7",568,"^8",1,"^6","promesa/core.cljc","^12","^1G","^14","^15","^16",true],"^1H",["^ ","^Z",["^[",[["~$&","^10"]]],"^11","An exception unsafe do-like macro. Supposes that we are already\n  wrapped in promise context so avoids defensive wrapping.","^7",541,"^8",1,"^6","promesa/core.cljc","^12","^1I","^14","^15","^16",true],"^T",["^ ","^Z",["^[",[["~$&","^1J"]]],"^7",674,"^8",1,"^6","promesa/core.cljc","^12","^1K","^14","^15","^16",true],"^U",["^ ","^Z",["^[",[["^1;","~$&","^19"]]],"^7",638,"^8",1,"^6","promesa/core.cljc","^12","^1L","^14","^15","^16",true],"^V",["^ ","^Z",["^[",[["^1;","~$&","^19"]]],"^11","Like clojure.core/with-redefs, but it will handle promises in\n   body and wait until they resolve or reject before restoring the\n   bindings. Useful for mocking async APIs.","^7",731,"^8",1,"^6","promesa/core.cljc","^12","^1M","^14","^15","^16",true],"^1N",["^ ","^Z",["^[",[["~$&","^19"]]],"^11","Analogous to `clojure.core.async/thread` that returns a promise instance\n  instead of the `Future`. Useful for executing synchronous code in a\n  separate thread (also works in cljs).","^7",619,"^8",1,"^6","promesa/core.cljc","^12","^1O","^14","^15","^16",true],"^1P",["^ ","^Z",["^[",[["~$&","^19"]]],"^11","Analogous to `clojure.core.async/thread` that returns a promise instance\n  instead of the `Future`.","^7",613,"^8",1,"^6","promesa/core.cljc","^12","^1Q","^14","^15","^16",true],"^W",["^ ","^Z",["^[",[["~$x","~$&","^1="]]],"^11","Like the clojure.core/->>, but it will handle promises in values\n  and make sure the next form gets the value realized instead of\n  the promise.\n\n  Example fetching data in the browser with CLJS:\n\n  (p/->> (js/fetch #js {...}) ; returns a promise\n         .-body\n         read-string\n         (mapv inc)\n\n  The result of a thread is a promise that will resolve to the\n  end of the thread chain.","^7",698,"^8",1,"^6","promesa/core.cljc","^12","^1R","^14","^15","^16",true]],"^12","^15","^1S",["^ "],"^1U",null,"^1V",["^ ","^1W","^1X","^1Y","^1Y","^C","^C","^1Z","^1Y","^1[","^1[","^20","^20","^21","^22","^22","^22","^B","^C","^23","^1[","^1X","^1X","~$c","^C"],"^24",["^F",["^25","^26"]],"~:shadow/js-access-global",["^F",["Error"]],"^27",null,"~:defs",["^ ","~$timeout",["^ ","~:protocol-inline",null,"^5",["^ ","^6","promesa/core.cljc","^7",516,"^8",7,"^9",516,"^:",14,"^Z",["^[",["~$quote",["^[",[["~$p","~$t"],["~$p","~$t","~$v"],["~$p","~$t","~$v","~$scheduler"]]]]],"^11","Returns a cancellable promise that will be fulfilled with this\n  promise's fulfillment value or rejection reason.  However, if this\n  promise is not fulfilled or rejected within `ms` milliseconds, the\n  returned promise is cancelled with a TimeoutError.","~:top-fn",["^ ","~:variadic?",false,"~:fixed-arity",4,"~:max-fixed-arity",4,"~:method-params",[["~$p","~$t"],["~$p","~$t","~$v"],["~$p","~$t","~$v","^7V"]],"^Z",["^[",[["~$p","~$t"],["~$p","~$t","~$v"],["~$p","~$t","~$v","^7V"]]],"~:arglists-meta",["^[",[null,null,null]]]],"^12","^5L","^6","promesa/core.cljc","^:",14,"^7W",["^ ","^7X",false,"^7Y",4,"^7Z",4,"^7[",[["~$p","~$t"],["~$p","~$t","~$v"],["~$p","~$t","~$v","^7V"]],"^Z",["^[",[["~$p","~$t"],["~$p","~$t","~$v"],["~$p","~$t","~$v","^7V"]]],"^80",["^[",[null,null,null]]],"^7[",[["~$p","~$t"],["~$p","~$t","~$v"],["~$p","~$t","~$v","^7V"]],"~:protocol-impl",null,"^7Y",4,"^80",["^[",[null,null,null]],"^8",1,"^7X",false,"~:methods",[["^ ","^7Y",2,"^7X",false,"~:tag","~$any"],["^ ","^7Y",3,"^7X",false,"^83","^84"],["^ ","^7Y",4,"^7X",false,"^83","^84"]],"^7",516,"^9",516,"^7Z",4,"~:fn-var",true,"^Z",["^[",[["~$p","~$t"],["~$p","~$t","~$v"],["~$p","~$t","~$v","^7V"]]],"^11","Returns a cancellable promise that will be fulfilled with this\n  promise's fulfillment value or rejection reason.  However, if this\n  promise is not fulfilled or rejected within `ms` milliseconds, the\n  returned promise is cancelled with a TimeoutError."],"~$deferred?",["^ ","^7T",null,"^5",["^ ","^6","promesa/core.cljc","^7",92,"^8",7,"^9",92,"^:",16,"^Z",["^[",["^7U",["^[",[["~$v"]]]]],"^11","Return true if `v` is a deferred instance."],"^12","^5A","^6","promesa/core.cljc","^:",16,"^7[",["^[",[["~$v"]]],"^81",null,"^80",["^[",[null,null]],"^8",1,"^7X",false,"^7",92,"~:ret-tag","~$boolean","^9",92,"^7Z",1,"^85",true,"^Z",["^[",["^7U",["^[",[["~$v"]]]]],"^11","Return true if `v` is a deferred instance."],"~$merr",["^ ","^7T",null,"^5",["^ ","^6","promesa/core.cljc","^7",337,"^8",7,"^9",337,"^:",11,"^Z",["^[",["^7U",["^[",[["~$f","~$p"],["~$executor","~$f","~$p"]]]]],"^11","Chains a function `f` to be executed when the promise `p` is\n  rejected. Returns a promise that will mirror the promise returned by\n  calling `f` with exception as single argument; `f` **must** return a\n  promise instance or throw an exception.\n\n  The computation will be executed in the completion thread by\n  default; you also can provide a custom executor.\n\n  This is intended to be used with `->>`.","^7W",["^ ","^7X",false,"^7Y",3,"^7Z",3,"^7[",[["~$f","~$p"],["^8:","~$f","~$p"]],"^Z",["^[",[["~$f","~$p"],["^8:","~$f","~$p"]]],"^80",["^[",[null,null]]]],"^12","^3G","^6","promesa/core.cljc","^:",11,"^7W",["^ ","^7X",false,"^7Y",3,"^7Z",3,"^7[",[["~$f","~$p"],["^8:","~$f","~$p"]],"^Z",["^[",[["~$f","~$p"],["^8:","~$f","~$p"]]],"^80",["^[",[null,null]]],"^7[",[["~$f","~$p"],["^8:","~$f","~$p"]],"^81",null,"^7Y",3,"^80",["^[",[null,null]],"^8",1,"^7X",false,"^82",[["^ ","^7Y",2,"^7X",false,"^83","^84"],["^ ","^7Y",3,"^7X",false,"^83","^84"]],"^7",337,"^9",337,"^7Z",3,"^85",true,"^Z",["^[",[["~$f","~$p"],["^8:","~$f","~$p"]]],"^11","Chains a function `f` to be executed when the promise `p` is\n  rejected. Returns a promise that will mirror the promise returned by\n  calling `f` with exception as single argument; `f` **must** return a\n  promise instance or throw an exception.\n\n  The computation will be executed in the completion thread by\n  default; you also can provide a custom executor.\n\n  This is intended to be used with `->>`."],"^G",["^ ","^7T",null,"^5",["^ ","^6","promesa/core.cljc","^7",175,"^8",7,"^9",175,"^:",10,"^Z",["^[",["^7U",["^[",[["~$f","~$p"],["^8:","~$f","~$p"]]]]],"^11","Chains a function `f` to be executed when the promise `p` is\n  successfully resolved. Returns a promise that will be resolved with\n  the return value of calling `f` with value as single argument.\n\n  The computation will be executed in the completion thread by\n  default; you also can provide a custom executor.\n\n  This function is intended to be used with `->>`.","^7W",["^ ","^7X",false,"^7Y",3,"^7Z",3,"^7[",[["~$f","~$p"],["^8:","~$f","~$p"]],"^Z",["^[",[["~$f","~$p"],["^8:","~$f","~$p"]]],"^80",["^[",[null,null]]]],"^12","^49","^6","promesa/core.cljc","^:",10,"^7W",["^ ","^7X",false,"^7Y",3,"^7Z",3,"^7[",[["~$f","~$p"],["^8:","~$f","~$p"]],"^Z",["^[",[["~$f","~$p"],["^8:","~$f","~$p"]]],"^80",["^[",[null,null]]],"^7[",[["~$f","~$p"],["^8:","~$f","~$p"]],"^81",null,"^7Y",3,"^80",["^[",[null,null]],"^8",1,"^7X",false,"^82",[["^ ","^7Y",2,"^7X",false,"^83","^84"],["^ ","^7Y",3,"^7X",false,"^83","^84"]],"^7",175,"^9",175,"^7Z",3,"^85",true,"^Z",["^[",[["~$f","~$p"],["^8:","~$f","~$p"]]],"^11","Chains a function `f` to be executed when the promise `p` is\n  successfully resolved. Returns a promise that will be resolved with\n  the return value of calling `f` with value as single argument.\n\n  The computation will be executed in the completion thread by\n  default; you also can provide a custom executor.\n\n  This function is intended to be used with `->>`."],"^H",["^ ","^7T",null,"^5",["^ ","^6","promesa/core.cljc","^7",530,"^8",7,"^9",530,"^:",12,"^Z",["^[",["^7U",["^[",[["~$t"],["~$t","~$v"],["~$t","~$v","^7V"]]]]],"^11","Given a timeout in miliseconds and optional value, returns a promise\n  that will be fulfilled with provided value (or nil) after the time is\n  reached.","^7W",["^ ","^7X",false,"^7Y",3,"^7Z",3,"^7[",[["~$t"],["~$t","~$v"],["~$t","~$v","^7V"]],"^Z",["^[",[["~$t"],["~$t","~$v"],["~$t","~$v","^7V"]]],"^80",["^[",[null,null,null]]]],"^12","^5I","^6","promesa/core.cljc","^:",12,"^7W",["^ ","^7X",false,"^7Y",3,"^7Z",3,"^7[",[["~$t"],["~$t","~$v"],["~$t","~$v","^7V"]],"^Z",["^[",[["~$t"],["~$t","~$v"],["~$t","~$v","^7V"]]],"^80",["^[",[null,null,null]]],"^7[",[["~$t"],["~$t","~$v"],["~$t","~$v","^7V"]],"^81",null,"^7Y",3,"^80",["^[",[null,null,null]],"^8",1,"^7X",false,"^82",[["^ ","^7Y",1,"^7X",false,"^83","^84"],["^ ","^7Y",2,"^7X",false,"^83","^84"],["^ ","^7Y",3,"^7X",false,"^83","^84"]],"^7",530,"^9",530,"^7Z",3,"^85",true,"^Z",["^[",[["~$t"],["~$t","~$v"],["~$t","~$v","^7V"]]],"^11","Given a timeout in miliseconds and optional value, returns a promise\n  that will be fulfilled with provided value (or nil) after the time is\n  reached."],"~$resolved?",["^ ","^7T",null,"^5",["^ ","^6","promesa/core.cljc","^7",105,"^8",7,"^9",105,"^:",16,"^Z",["^[",["^7U",["^[",[["~$p"]]]]],"^11","Returns true if promise `p` is already fulfilled."],"^12","^46","^6","promesa/core.cljc","^:",16,"^7[",["^[",[["~$p"]]],"^81",null,"^80",["^[",[null,null]],"^8",1,"^7X",false,"^7",105,"^87","^84","^9",105,"^7Z",1,"^85",true,"^Z",["^[",["^7U",["^[",[["~$p"]]]]],"^11","Returns true if promise `p` is already fulfilled."],"^I",["^ ","^7T",null,"^5",["^ ","^6","promesa/core.cljc","^7",196,"^8",7,"^9",196,"^:",13,"^Z",["^[",["^7U",["^[",[["~$f","~$p"],["^8:","~$f","~$p"]]]]],"^11","Chains a function `f` to be executed when the promise `p` is\n  successfully resolved. Returns a promise that will mirror the\n  promise instance returned by calling `f` with the value as single\n  argument; `f` **must** return a promise instance.\n\n  The computation will be executed in the completion thread by\n  default; you also can provide a custom executor.\n\n  This funciton is intended to be used with `->>`.","^7W",["^ ","^7X",false,"^7Y",3,"^7Z",3,"^7[",[["~$f","~$p"],["^8:","~$f","~$p"]],"^Z",["^[",[["~$f","~$p"],["^8:","~$f","~$p"]]],"^80",["^[",[null,null]]]],"^12","^2V","^6","promesa/core.cljc","^:",13,"^7W",["^ ","^7X",false,"^7Y",3,"^7Z",3,"^7[",[["~$f","~$p"],["^8:","~$f","~$p"]],"^Z",["^[",[["~$f","~$p"],["^8:","~$f","~$p"]]],"^80",["^[",[null,null]]],"^7[",[["~$f","~$p"],["^8:","~$f","~$p"]],"^81",null,"^7Y",3,"^80",["^[",[null,null]],"^8",1,"^7X",false,"^82",[["^ ","^7Y",2,"^7X",false,"^83","^84"],["^ ","^7Y",3,"^7X",false,"^83","^84"]],"^7",196,"^9",196,"^7Z",3,"^85",true,"^Z",["^[",[["~$f","~$p"],["^8:","~$f","~$p"]]],"^11","Chains a function `f` to be executed when the promise `p` is\n  successfully resolved. Returns a promise that will mirror the\n  promise instance returned by calling `f` with the value as single\n  argument; `f` **must** return a promise instance.\n\n  The computation will be executed in the completion thread by\n  default; you also can provide a custom executor.\n\n  This funciton is intended to be used with `->>`."],"~$cancelled?",["^ ","^7T",null,"^5",["^ ","^6","promesa/core.cljc","^7",474,"^8",7,"^9",474,"^:",17,"^Z",["^[",["^7U",["^[",[["~$v"]]]]],"^11","Return true if `v` is a cancelled promise."],"^12","^4?","^6","promesa/core.cljc","^:",17,"^7[",["^[",[["~$v"]]],"^81",null,"^80",["^[",[null,null]],"^8",1,"^7X",false,"^7",474,"^87","^84","^9",474,"^7Z",1,"^85",true,"^Z",["^[",["^7U",["^[",[["~$v"]]]]],"^11","Return true if `v` is a cancelled promise."],"~$bind",["^ ","^7T",null,"^5",["^ ","^6","promesa/core.cljc","^7",162,"^8",7,"^9",162,"^:",11,"^Z",["^[",["^7U",["^[",[["~$p","~$f"],["~$p","~$f","^8:"]]]]],"^11","Chains a function `f` to be executed with when the promise `p` is\n  successfully resolved. Returns a promise that will mirror the\n  promise instance returned by calling `f` with the value as single\n  argument; `f` **must** return a promise instance.\n\n  The computation will be executed in the completion thread by\n  default; you also can provide a custom executor.","^7W",["^ ","^7X",false,"^7Y",3,"^7Z",3,"^7[",[["~$p","~$f"],["~$p","~$f","^8:"]],"^Z",["^[",[["~$p","~$f"],["~$p","~$f","^8:"]]],"^80",["^[",[null,null]]]],"^12","^3X","^6","promesa/core.cljc","^:",11,"^7W",["^ ","^7X",false,"^7Y",3,"^7Z",3,"^7[",[["~$p","~$f"],["~$p","~$f","^8:"]],"^Z",["^[",[["~$p","~$f"],["~$p","~$f","^8:"]]],"^80",["^[",[null,null]]],"^7[",[["~$p","~$f"],["~$p","~$f","^8:"]],"^81",null,"^7Y",3,"^80",["^[",[null,null]],"^8",1,"^7X",false,"^82",[["^ ","^7Y",2,"^7X",false,"^83","^84"],["^ ","^7Y",3,"^7X",false,"^83","^84"]],"^7",162,"^9",162,"^7Z",3,"^85",true,"^Z",["^[",[["~$p","~$f"],["~$p","~$f","^8:"]]],"^11","Chains a function `f` to be executed with when the promise `p` is\n  successfully resolved. Returns a promise that will mirror the\n  promise instance returned by calling `f` with the value as single\n  argument; `f` **must** return a promise instance.\n\n  The computation will be executed in the completion thread by\n  default; you also can provide a custom executor."],"~$resolve!",["^ ","^7T",null,"^5",["^ ","^6","promesa/core.cljc","^7",481,"^8",7,"^9",481,"^:",15,"^Z",["^[",["^7U",["^[",[["~$o"],["~$o","~$v"]]]]],"^11","Resolve a completable promise with a value.","^7W",["^ ","^7X",false,"^7Y",2,"^7Z",2,"^7[",[["~$o"],["~$o","~$v"]],"^Z",["^[",[["~$o"],["~$o","~$v"]]],"^80",["^[",[null,null]]]],"^12","^2O","^6","promesa/core.cljc","^:",15,"^7W",["^ ","^7X",false,"^7Y",2,"^7Z",2,"^7[",[["~$o"],["~$o","~$v"]],"^Z",["^[",[["~$o"],["~$o","~$v"]]],"^80",["^[",[null,null]]],"^7[",[["~$o"],["~$o","~$v"]],"^81",null,"^7Y",2,"^80",["^[",[null,null]],"^8",1,"^7X",false,"^82",[["^ ","^7Y",1,"^7X",false,"^83","^84"],["^ ","^7Y",2,"^7X",false,"^83","^84"]],"^7",481,"^9",481,"^7Z",2,"^85",true,"^Z",["^[",[["~$o"],["~$o","~$v"]]],"^11","Resolve a completable promise with a value."],"^84",["^ ","^7T",null,"^5",["^ ","^6","promesa/core.cljc","^7",374,"^8",7,"^9",374,"^:",10,"^Z",["^[",["^7U",["^[",[["~$promises"],["^8?","~$default"]]]]],"^11","Given an array of promises, return a promise that is fulfilled when\n  first one item in the array is fulfilled.","^7W",["^ ","^7X",false,"^7Y",2,"^7Z",2,"^7[",[["^8?"],["^8?","^8@"]],"^Z",["^[",[["^8?"],["^8?","^8@"]]],"^80",["^[",[null,null]]]],"^12","^5@","^6","promesa/core.cljc","^:",10,"^7W",["^ ","^7X",false,"^7Y",2,"^7Z",2,"^7[",[["^8?"],["^8?","^8@"]],"^Z",["^[",[["^8?"],["^8?","^8@"]]],"^80",["^[",[null,null]]],"^7[",[["^8?"],["^8?","^8@"]],"^81",null,"^7Y",2,"^80",["^[",[null,null]],"^8",1,"^7X",false,"^82",[["^ ","^7Y",1,"^7X",false,"^83","^84"],["^ ","^7Y",2,"^7X",false,"^83","^84"]],"^7",374,"^9",374,"^7Z",2,"^85",true,"^Z",["^[",[["^8?"],["^8?","^8@"]]],"^11","Given an array of promises, return a promise that is fulfilled when\n  first one item in the array is fulfilled."],"~$finally",["^ ","^7T",null,"^5",["^ ","^6","promesa/core.cljc","^7",256,"^8",7,"^9",256,"^:",14,"^Z",["^[",["^7U",["^[",[["~$p","~$f"],["~$p","~$f","^8:"]]]]],"^11","Like `handle` but ignores the return value. Returns a promise that\n  will mirror the original one.","^7W",["^ ","^7X",false,"^7Y",3,"^7Z",3,"^7[",[["~$p","~$f"],["~$p","~$f","^8:"]],"^Z",["^[",[["~$p","~$f"],["~$p","~$f","^8:"]]],"^80",["^[",[null,null]]]],"^12","^5:","^6","promesa/core.cljc","^:",14,"^7W",["^ ","^7X",false,"^7Y",3,"^7Z",3,"^7[",[["~$p","~$f"],["~$p","~$f","^8:"]],"^Z",["^[",[["~$p","~$f"],["~$p","~$f","^8:"]]],"^80",["^[",[null,null]]],"^7[",[["~$p","~$f"],["~$p","~$f","^8:"]],"^81",null,"^7Y",3,"^80",["^[",[null,null]],"^8",1,"^7X",false,"^82",[["^ ","^7Y",2,"^7X",false,"^83","^84"],["^ ","^7Y",3,"^7X",false,"^83","^84"]],"^7",256,"^9",256,"^7Z",3,"^85",true,"^Z",["^[",[["~$p","~$f"],["~$p","~$f","^8:"]]],"^11","Like `handle` but ignores the return value. Returns a promise that\n  will mirror the original one."],"~$then'",["^ ","^7T",null,"^5",["^ ","^6","promesa/core.cljc","^7",148,"^8",7,"^9",148,"^:",12,"^Z",["^[",["^7U",["^[",[["~$p","~$f"],["~$p","~$f","^8:"]]]]],"^11","Chains a function `f` to be executed when the promise `p` is\n  successfully resolved. Returns a promise that will be resolved with\n  the return value of calling `f` with value as single argument; `f`\n  should return a plain value, no automatic unwrapping will be\n  performed.\n\n  The computation will be executed in the completion thread by\n  default; you also can provide a custom executor.","^7W",["^ ","^7X",false,"^7Y",3,"^7Z",3,"^7[",[["~$p","~$f"],["~$p","~$f","^8:"]],"^Z",["^[",[["~$p","~$f"],["~$p","~$f","^8:"]]],"^80",["^[",[null,null]]]],"^12","^43","^6","promesa/core.cljc","^:",12,"^7W",["^ ","^7X",false,"^7Y",3,"^7Z",3,"^7[",[["~$p","~$f"],["~$p","~$f","^8:"]],"^Z",["^[",[["~$p","~$f"],["~$p","~$f","^8:"]]],"^80",["^[",[null,null]]],"^7[",[["~$p","~$f"],["~$p","~$f","^8:"]],"^81",null,"^7Y",3,"^80",["^[",[null,null]],"^8",1,"^7X",false,"^82",[["^ ","^7Y",2,"^7X",false,"^83","^84"],["^ ","^7Y",3,"^7X",false,"^83","^84"]],"^7",148,"^9",148,"^7Z",3,"^85",true,"^Z",["^[",[["~$p","~$f"],["~$p","~$f","^8:"]]],"^11","Chains a function `f` to be executed when the promise `p` is\n  successfully resolved. Returns a promise that will be resolved with\n  the return value of calling `f` with value as single argument; `f`\n  should return a plain value, no automatic unwrapping will be\n  performed.\n\n  The computation will be executed in the completion thread by\n  default; you also can provide a custom executor."],"~$wait-all",["^ ","^7T",null,"^5",["^ ","^6","promesa/core.cljc","^7",443,"^8",7,"^9",443,"^:",15,"^Z",["^[",["^7U",["^[",[["~$&","^8?"]]]]],"^11","Given a variable number of promises, returns a promise which resolves\n  to `nil` when all provided promises complete (rejected or resolved).\n\n  **EXPERIMENTAL**","^7W",["^ ","^7X",true,"^7Y",0,"^7Z",0,"^7[",[["^[",["^8?"]]],"^Z",["^[",[["~$&","^8?"]]],"^80",["^[",[null]]]],"^12","^56","^6","promesa/core.cljc","^:",15,"^7W",["^ ","^7X",true,"^7Y",0,"^7Z",0,"^7[",[["^[",["^8?"]]],"^Z",["^[",[["~$&","^8?"]]],"^80",["^[",[null]]],"^7[",[["^[",["^8?"]]],"^81",null,"^7Y",0,"^80",["^[",[null]],"^8",1,"^7X",true,"^82",[["^ ","^7Y",0,"^7X",true,"^83","^84"]],"^7",443,"^87","^84","^9",443,"^7Z",0,"^85",true,"^Z",["^[",[["~$&","^8?"]]],"^11","Given a variable number of promises, returns a promise which resolves\n  to `nil` when all provided promises complete (rejected or resolved).\n\n  **EXPERIMENTAL**"],"~$chain'",["^ ","^7T",null,"^5",["^ ","^6","promesa/core.cljc","^7",224,"^8",7,"^9",224,"^:",13,"^Z",["^[",["^7U",["^[",[["~$p","~$f"],["~$p","~$f","~$&","~$fs"]]]]],"^11","Chain variable number of functions to be executed serially using\n  `map`.","^7W",["^ ","^7X",true,"^7Y",2,"^7Z",2,"^7[",[["~$p","~$f"]],"^Z",["^[",[["~$p","~$f"],["~$p","~$f","~$&","^8E"]]],"^80",["^[",[null,null]]]],"^12","^4;","^6","promesa/core.cljc","^:",13,"^7W",["^ ","^7X",true,"^7Y",2,"^7Z",2,"^7[",[["~$p","~$f"]],"^Z",["^[",[["~$p","~$f"],["~$p","~$f","~$&","^8E"]]],"^80",["^[",[null,null]]],"^7[",[["~$p","~$f"]],"^81",null,"^7Y",2,"^80",["^[",[null,null]],"^8",1,"^7X",true,"^82",[["^ ","^7Y",2,"^7X",false,"^83","^84"],["^ ","^7Y",2,"^7X",true,"^83",["^F",[null,"^84"]]]],"^7",224,"^9",224,"^7Z",2,"^85",true,"^Z",["^[",[["~$p","~$f"],["~$p","~$f","~$&","^8E"]]],"^11","Chain variable number of functions to be executed serially using\n  `map`."],"~$wrap",["^ ","^7T",null,"^5",["^ ","^6","promesa/core.cljc","^7",58,"^8",7,"^9",58,"^:",11,"^Z",["^[",["^7U",["^[",[["~$v"]]]]],"^11","A convenience alias for `promise` coercion function that only accepts\n  a single argument."],"^12","^3W","^6","promesa/core.cljc","^:",11,"^7[",["^[",[["~$v"]]],"^81",null,"^80",["^[",[null,null]],"^8",1,"^7X",false,"^7",58,"^87","^84","^9",58,"^7Z",1,"^85",true,"^Z",["^[",["^7U",["^[",[["~$v"]]]]],"^11","A convenience alias for `promise` coercion function that only accepts\n  a single argument."],"~$wait-all*",["^ ","^7T",null,"^5",["^ ","^6","promesa/core.cljc","^7",415,"^8",7,"^9",415,"^:",16,"^Z",["^[",["^7U",["^[",[["^8?"]]]]],"^11","Given an array of promises, return a promise that is fulfilled when\n  all the items in the array are resolved (independently if\n  successfully or exceptionally).\n\n  Example:\n\n  ```\n  (->> (p/wait-all* [(promise :first-promise)\n                     (promise :second-promise)])\n       (p/fmap (fn [_]\n                 (println \"done\"))))\n  ```\n\n  Rejected promises also counts as resolved."],"^12","^2Q","^6","promesa/core.cljc","^:",16,"^7[",["^[",[["^8?"]]],"^81",null,"^80",["^[",[null,null]],"^8",1,"^7X",false,"^7",415,"^87","^84","^9",415,"^7Z",1,"^85",true,"^Z",["^[",["^7U",["^[",[["^8?"]]]]],"^11","Given an array of promises, return a promise that is fulfilled when\n  all the items in the array are resolved (independently if\n  successfully or exceptionally).\n\n  Example:\n\n  ```\n  (->> (p/wait-all* [(promise :first-promise)\n                     (promise :second-promise)])\n       (p/fmap (fn [_]\n                 (println \"done\"))))\n  ```\n\n  Rejected promises also counts as resolved."],"~$fnly",["^ ","^7T",null,"^5",["^ ","^6","promesa/core.cljc","^7",306,"^8",7,"^9",306,"^:",11,"^Z",["^[",["^7U",["^[",[["~$f","~$p"],["^8:","~$f","~$p"]]]]],"^11","Inverted arguments version of `finally`; intended to be used with\n  `->>`.","^7W",["^ ","^7X",false,"^7Y",3,"^7Z",3,"^7[",[["~$f","~$p"],["^8:","~$f","~$p"]],"^Z",["^[",[["~$f","~$p"],["^8:","~$f","~$p"]]],"^80",["^[",[null,null]]]],"^12","^51","^6","promesa/core.cljc","^:",11,"^7W",["^ ","^7X",false,"^7Y",3,"^7Z",3,"^7[",[["~$f","~$p"],["^8:","~$f","~$p"]],"^Z",["^[",[["~$f","~$p"],["^8:","~$f","~$p"]]],"^80",["^[",[null,null]]],"^7[",[["~$f","~$p"],["^8:","~$f","~$p"]],"^81",null,"^7Y",3,"^80",["^[",[null,null]],"^8",1,"^7X",false,"^82",[["^ ","^7Y",2,"^7X",false,"^83","^84"],["^ ","^7Y",3,"^7X",false,"^83","^84"]],"^7",306,"^9",306,"^7Z",3,"^85",true,"^Z",["^[",[["~$f","~$p"],["^8:","~$f","~$p"]]],"^11","Inverted arguments version of `finally`; intended to be used with\n  `->>`."],"~$hmap",["^ ","^7T",null,"^5",["^ ","^6","promesa/core.cljc","^7",266,"^8",7,"^9",266,"^:",11,"^Z",["^[",["^7U",["^[",[["~$f","~$p"],["^8:","~$f","~$p"]]]]],"^11","Chains a function `f` to be executed when the promise `p` is completed\n  (resolved or rejected) and returns a promise completed (resolving or\n  rejecting) with the return value of calling `f` with both: value and\n  the exception.\n\n  The computation will be executed in the completion thread by\n  default; you also can provide a custom executor.\n\n  Intended to be used with `->>`.","^7W",["^ ","^7X",false,"^7Y",3,"^7Z",3,"^7[",[["~$f","~$p"],["^8:","~$f","~$p"]],"^Z",["^[",[["~$f","~$p"],["^8:","~$f","~$p"]]],"^80",["^[",[null,null]]]],"^12","^4Z","^6","promesa/core.cljc","^:",11,"^7W",["^ ","^7X",false,"^7Y",3,"^7Z",3,"^7[",[["~$f","~$p"],["^8:","~$f","~$p"]],"^Z",["^[",[["~$f","~$p"],["^8:","~$f","~$p"]]],"^80",["^[",[null,null]]],"^7[",[["~$f","~$p"],["^8:","~$f","~$p"]],"^81",null,"^7Y",3,"^80",["^[",[null,null]],"^8",1,"^7X",false,"^82",[["^ ","^7Y",2,"^7X",false,"^83","^84"],["^ ","^7Y",3,"^7X",false,"^83","^84"]],"^7",266,"^9",266,"^7Z",3,"^85",true,"^Z",["^[",[["~$f","~$p"],["^8:","~$f","~$p"]]],"^11","Chains a function `f` to be executed when the promise `p` is completed\n  (resolved or rejected) and returns a promise completed (resolving or\n  rejecting) with the return value of calling `f` with both: value and\n  the exception.\n\n  The computation will be executed in the completion thread by\n  default; you also can provide a custom executor.\n\n  Intended to be used with `->>`."],"~$Recur",["^ ","~:num-fields",1,"~:protocols",["^F",["~$cljs.core/IRecord","~$cljs.core/IKVReduce","~$cljs.core/IEquiv","~$cljs.core/IHash","~$cljs.core/ICollection","~$cljs.core/ICounted","~$cljs.core/ISeqable","~$cljs.core/IMeta","~$cljs.core/ICloneable","~$cljs.core/IPrintWithWriter","~$cljs.core/IIterable","~$cljs.core/IWithMeta","~$cljs.core/IAssociative","~$cljs.core/IMap","~$cljs.core/ILookup"]],"^12","^2R","^6","promesa/core.cljc","^:",17,"~:type",true,"^8",12,"~:internal-ctor",true,"^7",633,"~:record",true,"^9",633,"^83","~$function","~:skip-protocol-flag",["^F",["^8M","^8N","^8O","^8P","^8Q","^8R","^8S","^8T","^8U","^8V","^8W","^8X","^8Y","^8Z","^8["]]],"~$promisify",["^ ","^7T",null,"^5",["^ ","^6","promesa/core.cljc","^7",493,"^8",7,"^9",493,"^:",16,"^Z",["^[",["^7U",["^[",[["~$callable"]]]]],"^11","Given a function that accepts a callback as the last argument, return a\n  function that returns a promise. Callback is expected to take one\n  parameter (result of a computation)."],"^12","^2T","^6","promesa/core.cljc","^:",16,"^7[",["^[",[["^96"]]],"^81",null,"^80",["^[",[null,null]],"^8",1,"^7X",false,"^7",493,"^87","^93","^9",493,"^7Z",1,"^85",true,"^Z",["^[",["^7U",["^[",[["^96"]]]]],"^11","Given a function that accepts a callback as the last argument, return a\n  function that returns a promise. Callback is expected to take one\n  parameter (result of a computation)."],"~$mcat",["^ ","^7T",null,"^5",["^ ","^6","promesa/core.cljc","^7",211,"^8",7,"^9",211,"^:",11,"^Z",["^[",["^7U",["^[",[["~$f","~$p"],["^8:","~$f","~$p"]]]]],"^11","A convenience alias for `mapcat`.","^7W",["^ ","^7X",false,"^7Y",3,"^7Z",3,"^7[",[["~$f","~$p"],["^8:","~$f","~$p"]],"^Z",["^[",[["~$f","~$p"],["^8:","~$f","~$p"]]],"^80",["^[",[null,null]]]],"^12","^31","^6","promesa/core.cljc","^:",11,"^7W",["^ ","^7X",false,"^7Y",3,"^7Z",3,"^7[",[["~$f","~$p"],["^8:","~$f","~$p"]],"^Z",["^[",[["~$f","~$p"],["^8:","~$f","~$p"]]],"^80",["^[",[null,null]]],"^7[",[["~$f","~$p"],["^8:","~$f","~$p"]],"^81",null,"^7Y",3,"^80",["^[",[null,null]],"^8",1,"^7X",false,"^82",[["^ ","^7Y",2,"^7X",false,"^83","^84"],["^ ","^7Y",3,"^7X",false,"^83","^84"]],"^7",211,"^9",211,"^7Z",3,"^85",true,"^Z",["^[",[["~$f","~$p"],["^8:","~$f","~$p"]]],"^11","A convenience alias for `mapcat`."],"~$rejected",["^ ","^7T",null,"^5",["^ ","^6","promesa/core.cljc","^7",37,"^8",7,"^9",37,"^:",15,"^Z",["^[",["^7U",["^[",[["~$v"]]]]],"^11","Return a rejected promise with provided reason."],"^12","^3H","^6","promesa/core.cljc","^:",15,"^7[",["^[",[["~$v"]]],"^81",null,"^80",["^[",[null,null]],"^8",1,"^7X",false,"^7",37,"^87","^84","^9",37,"^7Z",1,"^85",true,"^Z",["^[",["^7U",["^[",[["~$v"]]]]],"^11","Return a rejected promise with provided reason."],"^R",["^ ","^7T",null,"^5",["^ ","^6","promesa/core.cljc","^7",47,"^8",7,"^9",47,"^:",14,"^Z",["^[",["^7U",["^[",[["~$v"],["~$v","^8:"]]]]],"^11","The coerce based promise constructor. Creates an appropriate promise\n  instance depending on the provided value.\n\n  If an executor is provided, it will be used to resolve this\n  promise.","^7W",["^ ","^7X",false,"^7Y",2,"^7Z",2,"^7[",[["~$v"],["~$v","^8:"]],"^Z",["^[",[["~$v"],["~$v","^8:"]]],"^80",["^[",[null,null]]]],"^12","^2N","^6","promesa/core.cljc","^:",14,"^7W",["^ ","^7X",false,"^7Y",2,"^7Z",2,"^7[",[["~$v"],["~$v","^8:"]],"^Z",["^[",[["~$v"],["~$v","^8:"]]],"^80",["^[",[null,null]]],"^7[",[["~$v"],["~$v","^8:"]],"^81",null,"^7Y",2,"^80",["^[",[null,null]],"^8",1,"^7X",false,"^82",[["^ ","^7Y",1,"^7X",false,"^83","^84"],["^ ","^7Y",2,"^7X",false,"^83","^84"]],"^7",47,"^9",47,"^7Z",2,"^85",true,"^Z",["^[",[["~$v"],["~$v","^8:"]]],"^11","The coerce based promise constructor. Creates an appropriate promise\n  instance depending on the provided value.\n\n  If an executor is provided, it will be used to resolve this\n  promise."],"~$create",["^ ","^7T",null,"^5",["^ ","^6","promesa/core.cljc","^7",64,"^8",7,"^9",64,"^:",13,"^Z",["^[",["^7U",["^[",[["~$f"],["~$f","^8:"]]]]],"^11","Create a promise instance from a factory function. If an executor is\n  provided, the factory will be executed in the provided executor.\n\n  A factory function looks like `(fn [resolve reject] (resolve 1))`.","^7W",["^ ","^7X",false,"^7Y",2,"^7Z",2,"^7[",[["~$f"],["~$f","^8:"]],"^Z",["^[",[["~$f"],["~$f","^8:"]]],"^80",["^[",[null,null]]]],"^12","^52","^6","promesa/core.cljc","^:",13,"^7W",["^ ","^7X",false,"^7Y",2,"^7Z",2,"^7[",[["~$f"],["~$f","^8:"]],"^Z",["^[",[["~$f"],["~$f","^8:"]]],"^80",["^[",[null,null]]],"^7[",[["~$f"],["~$f","^8:"]],"^81",null,"^7Y",2,"^80",["^[",[null,null]],"^8",1,"^7X",false,"^82",[["^ ","^7Y",1,"^7X",false,"^83","^84"],["^ ","^7Y",2,"^7X",false,"^83","^84"]],"^7",64,"^9",64,"^7Z",2,"^85",true,"^Z",["^[",[["~$f"],["~$f","^8:"]]],"^11","Create a promise instance from a factory function. If an executor is\n  provided, the factory will be executed in the provided executor.\n\n  A factory function looks like `(fn [resolve reject] (resolve 1))`."],"~$race",["^ ","^7T",null,"^5",["^ ","^6","promesa/core.cljc","^7",370,"^8",7,"^9",370,"^:",11,"^Z",["^[",["^7U",["^[",[["^8?"]]]]]],"^12","^50","^6","promesa/core.cljc","^:",11,"^7[",["^[",[["^8?"]]],"^81",null,"^80",["^[",[null,null]],"^8",1,"^7X",false,"^7",370,"^87","^84","^9",370,"^7Z",1,"^85",true,"^Z",["^[",["^7U",["^[",[["^8?"]]]]]],"~$cancel!",["^ ","^7T",null,"^5",["^ ","^6","promesa/core.cljc","^7",468,"^8",7,"^9",468,"^:",14,"^Z",["^[",["^7U",["^[",[["~$p"]]]]],"^11","Cancel the promise."],"^12","^58","^6","promesa/core.cljc","^:",14,"^7[",["^[",[["~$p"]]],"^81",null,"^80",["^[",[null,null]],"^8",1,"^7X",false,"^7",468,"^9",468,"^7Z",1,"^85",true,"^Z",["^[",["^7U",["^[",[["~$p"]]]]],"^11","Cancel the promise."],"~$thenable?",["^ ","^7T",null,"^5",["^ ","^6","promesa/core.cljc","^7",98,"^8",10,"^9",98,"^:",19,"^Z",["^[",["^7U",["^[",[["~$v"]]]]],"^11","Returns true if `v` is a promise like object."],"^12","^57","^6","promesa/core.cljc","^:",19,"^7[",["^[",[["~$v"]]],"^81",null,"^80",["^[",[null,null]],"^8",4,"^7X",false,"^7",98,"^87","^88","^9",98,"^7Z",1,"^85",true,"^Z",["^[",["^7U",["^[",[["~$v"]]]]],"^11","Returns true if `v` is a promise like object."],"~$TimeoutException",["^ ","^7T",null,"^5",["^ ","^6","promesa/core.cljc","^7",508,"^8",6,"^9",508,"^:",22,"~:jsdoc",["@constructor"],"^Z",["^[",["^7U",["^[",[["~$message"]]]]]],"^12","^3S","^6","promesa/core.cljc","^:",22,"^7[",["^[",[["^9?"]]],"^81",null,"^80",["^[",[null,null]],"^8",4,"^7X",false,"^7",507,"^87","^84","^9",508,"^7Z",1,"^85",true,"^Z",["^[",["^7U",["^[",[["^9?"]]]]],"^9>",["@constructor"]],"~$done?",["^ ","^7T",null,"^5",["^ ","^6","promesa/core.cljc","^7",127,"^8",7,"^9",127,"^:",12,"^Z",["^[",["^7U",["^[",[["~$p"]]]]],"^11","Returns true if promise `p` is already done."],"^12","^5;","^6","promesa/core.cljc","^:",12,"^7[",["^[",[["~$p"]]],"^81",null,"^80",["^[",[null,null]],"^8",1,"^7X",false,"^7",127,"^87","^88","^9",127,"^7Z",1,"^85",true,"^Z",["^[",["^7U",["^[",[["~$p"]]]]],"^11","Returns true if promise `p` is already done."],"^S",["^ ","^7T",null,"^5",["^ ","^6","promesa/core.cljc","^7",457,"^8",7,"^9",457,"^:",11,"^Z",["^[",["^7U",["^[",[["~$f","~$coll"],["~$f","^9A","^8:"]]]]],"^11","A promise aware run! function. Executed in terms of `then` rules.","^7W",["^ ","^7X",false,"^7Y",3,"^7Z",3,"^7[",[["~$f","^9A"],["~$f","^9A","^8:"]],"^Z",["^[",[["~$f","^9A"],["~$f","^9A","^8:"]]],"^80",["^[",[null,null]]]],"^12","^3I","^6","promesa/core.cljc","^:",11,"^7W",["^ ","^7X",false,"^7Y",3,"^7Z",3,"^7[",[["~$f","^9A"],["~$f","^9A","^8:"]],"^Z",["^[",[["~$f","^9A"],["~$f","^9A","^8:"]]],"^80",["^[",[null,null]]],"^7[",[["~$f","^9A"],["~$f","^9A","^8:"]],"^81",null,"^7Y",3,"^80",["^[",[null,null]],"^8",1,"^7X",false,"^82",[["^ ","^7Y",2,"^7X",false,"^83","^84"],["^ ","^7Y",3,"^7X",false,"^83","^84"]],"^7",457,"^9",457,"^7Z",3,"^85",true,"^Z",["^[",[["~$f","^9A"],["~$f","^9A","^8:"]]],"^11","A promise aware run! function. Executed in terms of `then` rules."],"~$vthread-call",["^ ","^7T",null,"^5",["^ ","^6","promesa/core.cljc","^7",608,"^8",7,"^9",608,"^:",19,"^Z",["^[",["^7U",["^[",[["~$f"]]]]],"^11","A shortcut for `(p/thread-call :vthread f)`."],"^12","^47","^6","promesa/core.cljc","^:",19,"^7[",["^[",[["~$f"]]],"^81",null,"^80",["^[",[null,null]],"^8",1,"^7X",false,"^7",608,"^87","^84","^9",608,"^7Z",1,"^85",true,"^Z",["^[",["^7U",["^[",[["~$f"]]]]],"^11","A shortcut for `(p/thread-call :vthread f)`."],"~$all",["^ ","^7T",null,"^5",["^ ","^6","promesa/core.cljc","^7",350,"^8",7,"^9",350,"^:",10,"^Z",["^[",["^7U",["^[",[["^8?"]]]]],"^11","Given an array of promises, return a promise that is fulfilled when\n  all the items in the array are fulfilled.\n\n  Example:\n\n  ```\n  (-> (p/all [(promise :first-promise)\n              (promise :second-promise)])\n      (then (fn [[first-result second-result]])\n              (println (str first-result \", \" second-result))))\n  ```\n\n  Will print to out `:first-promise, :second-promise`.\n\n  If at least one of the promises is rejected, the resulting promise\n  will be rejected."],"^12","^4<","^6","promesa/core.cljc","^:",10,"^7[",["^[",[["^8?"]]],"^81",null,"^80",["^[",[null,null]],"^8",1,"^7X",false,"^7",350,"^87","^84","^9",350,"^7Z",1,"^85",true,"^Z",["^[",["^7U",["^[",[["^8?"]]]]],"^11","Given an array of promises, return a promise that is fulfilled when\n  all the items in the array are fulfilled.\n\n  Example:\n\n  ```\n  (-> (p/all [(promise :first-promise)\n              (promise :second-promise)])\n      (then (fn [[first-result second-result]])\n              (println (str first-result \", \" second-result))))\n  ```\n\n  Will print to out `:first-promise, :second-promise`.\n\n  If at least one of the promises is rejected, the resulting promise\n  will be rejected."],"~$reject!",["^ ","^7T",null,"^5",["^ ","^6","promesa/core.cljc","^7",486,"^8",7,"^9",486,"^:",14,"^Z",["^[",["^7U",["^[",[["~$p","~$e"]]]]],"^11","Reject a completable promise with an error."],"^12","^5U","^6","promesa/core.cljc","^:",14,"^7[",["^[",[["~$p","~$e"]]],"^81",null,"^80",["^[",[null,null]],"^8",1,"^7X",false,"^7",486,"^87","^84","^9",486,"^7Z",2,"^85",true,"^Z",["^[",["^7U",["^[",[["~$p","~$e"]]]]],"^11","Reject a completable promise with an error."],"~$->Recur",["^ ","^7T",null,"^5",["^ ","^6","promesa/core.cljc","^:",17,"^8",12,"^91",true,"~:factory","~:positional","^7",633,"^9",633,"^Z",["^[",["^7U",["^[",[["^1;"]]]]],"^11","Positional factory function for promesa.core/Recur."],"^12","^4>","^6","promesa/core.cljc","^:",17,"^7[",["^[",[["^1;"]]],"^81",null,"^80",["^[",[null,null]],"^8",1,"^91",true,"^7X",false,"^9F","^9G","^7",633,"^87","^2R","^9",633,"^7Z",1,"^85",true,"^Z",["^[",["^7U",["^[",[["^1;"]]]]],"^11","Positional factory function for promesa.core/Recur."],"~$promise?",["^ ","^7T",null,"^5",["^ ","^6","promesa/core.cljc","^7",87,"^8",7,"^9",87,"^:",15,"^Z",["^[",["^7U",["^[",[["~$v"]]]]],"^11","Return true if `v` is a promise instance."],"^12","^5N","^6","promesa/core.cljc","^:",15,"^7[",["^[",[["~$v"]]],"^81",null,"^80",["^[",[null,null]],"^8",1,"^7X",false,"^7",87,"^87","^88","^9",87,"^7Z",1,"^85",true,"^Z",["^[",["^7U",["^[",[["~$v"]]]]],"^11","Return true if `v` is a promise instance."],"~$resolved",["^ ","^7T",null,"^5",["^ ","^6","promesa/core.cljc","^7",32,"^8",7,"^9",32,"^:",15,"^Z",["^[",["^7U",["^[",[["~$v"]]]]],"^11","Return a resolved promise with provided value."],"^12","^4@","^6","promesa/core.cljc","^:",15,"^7[",["^[",[["~$v"]]],"^81",null,"^80",["^[",[null,null]],"^8",1,"^7X",false,"^7",32,"^87","^84","^9",32,"^7Z",1,"^85",true,"^Z",["^[",["^7U",["^[",[["~$v"]]]]],"^11","Return a resolved promise with provided value."],"~$deferred",["^ ","^7T",null,"^5",["^ ","^6","promesa/core.cljc","^7",42,"^8",7,"^9",42,"^:",15,"^Z",["^[",["^7U",["^[",[[]]]]],"^11","Creates an empty promise instance."],"^12","^3Z","^6","promesa/core.cljc","^:",15,"^7[",["^[",[[]]],"^81",null,"^80",["^[",[null,null]],"^8",1,"^7X",false,"^7",42,"^87","^84","^9",42,"^7Z",0,"^85",true,"^Z",["^[",["^7U",["^[",[[]]]]],"^11","Creates an empty promise instance."],"~$recur?",["^ ","^7T",null,"^5",["^ ","^6","promesa/core.cljc","^7",634,"^8",7,"^9",634,"^:",13,"^Z",["^[",["^7U",["^[",[["~$o"]]]]]],"^12","^4D","^6","promesa/core.cljc","^:",13,"^7[",["^[",[["~$o"]]],"^81",null,"^80",["^[",[null,null]],"^8",1,"^7X",false,"^7",634,"^87","^88","^9",634,"^7Z",1,"^85",true,"^Z",["^[",["^7U",["^[",[["~$o"]]]]]],"~$catch",["^ ","^7T",null,"^5",["^ ","^6","promesa/core.cljc","^7",314,"^8",7,"^9",314,"^:",12,"^Z",["^[",["^7U",["^[",[["~$p","~$f"],["~$p","~$pred-or-type","~$f"]]]]],"^11","Chains a function `f` to be executed when the promise `p` is\n  rejected. Returns a promise that will be resolved with the return\n  value of calling `f` with exception as single argument; `f` can\n  return a plain value or promise instance, an automatic unwrapping\n  will be performed.\n\n  The computation will be executed in the completion thread, look at\n  `merr` if you want the ability to schedule the computation to other\n  thread.","^7W",["^ ","^7X",false,"^7Y",3,"^7Z",3,"^7[",[["~$p","~$f"],["~$p","^9M","~$f"]],"^Z",["^[",[["~$p","~$f"],["~$p","^9M","~$f"]]],"^80",["^[",[null,null]]]],"^12","^33","^6","promesa/core.cljc","^:",12,"^7W",["^ ","^7X",false,"^7Y",3,"^7Z",3,"^7[",[["~$p","~$f"],["~$p","^9M","~$f"]],"^Z",["^[",[["~$p","~$f"],["~$p","^9M","~$f"]]],"^80",["^[",[null,null]]],"^7[",[["~$p","~$f"],["~$p","^9M","~$f"]],"^81",null,"^7Y",3,"^80",["^[",[null,null]],"^8",1,"^7X",false,"^82",[["^ ","^7Y",2,"^7X",false,"^83","^84"],["^ ","^7Y",3,"^7X",false,"^83","^84"]],"^7",314,"^9",314,"^7Z",3,"^85",true,"^Z",["^[",[["~$p","~$f"],["~$p","^9M","~$f"]]],"^11","Chains a function `f` to be executed when the promise `p` is\n  rejected. Returns a promise that will be resolved with the return\n  value of calling `f` with exception as single argument; `f` can\n  return a plain value or promise instance, an automatic unwrapping\n  will be performed.\n\n  The computation will be executed in the completion thread, look at\n  `merr` if you want the ability to schedule the computation to other\n  thread."],"~$chain",["^ ","^7T",null,"^5",["^ ","^6","promesa/core.cljc","^7",218,"^8",7,"^9",218,"^:",12,"^Z",["^[",["^7U",["^[",[["~$p","~$f"],["~$p","~$f","~$&","^8E"]]]]],"^11","Chain variable number of functions to be executed serially using\n  `then`.","^7W",["^ ","^7X",true,"^7Y",2,"^7Z",2,"^7[",[["~$p","~$f"]],"^Z",["^[",[["~$p","~$f"],["~$p","~$f","~$&","^8E"]]],"^80",["^[",[null,null]]]],"^12","^5J","^6","promesa/core.cljc","^:",12,"^7W",["^ ","^7X",true,"^7Y",2,"^7Z",2,"^7[",[["~$p","~$f"]],"^Z",["^[",[["~$p","~$f"],["~$p","~$f","~$&","^8E"]]],"^80",["^[",[null,null]]],"^7[",[["~$p","~$f"]],"^81",null,"^7Y",2,"^80",["^[",[null,null]],"^8",1,"^7X",true,"^82",[["^ ","^7Y",2,"^7X",false,"^83","^84"],["^ ","^7Y",2,"^7X",true,"^83",["^F",[null,"^84"]]]],"^7",218,"^9",218,"^7Z",2,"^85",true,"^Z",["^[",[["~$p","~$f"],["~$p","~$f","~$&","^8E"]]],"^11","Chain variable number of functions to be executed serially using\n  `then`."],"~$fmap",["^ ","^7T",null,"^5",["^ ","^6","promesa/core.cljc","^7",189,"^8",7,"^9",189,"^:",11,"^Z",["^[",["^7U",["^[",[["~$f","~$p"],["^8:","~$f","~$p"]]]]],"^11","A convenience alias for `map`.","^7W",["^ ","^7X",false,"^7Y",3,"^7Z",3,"^7[",[["~$f","~$p"],["^8:","~$f","~$p"]],"^Z",["^[",[["~$f","~$p"],["^8:","~$f","~$p"]]],"^80",["^[",[null,null]]]],"^12","^39","^6","promesa/core.cljc","^:",11,"^7W",["^ ","^7X",false,"^7Y",3,"^7Z",3,"^7[",[["~$f","~$p"],["^8:","~$f","~$p"]],"^Z",["^[",[["~$f","~$p"],["^8:","~$f","~$p"]]],"^80",["^[",[null,null]]],"^7[",[["~$f","~$p"],["^8:","~$f","~$p"]],"^81",null,"^7Y",3,"^80",["^[",[null,null]],"^8",1,"^7X",false,"^82",[["^ ","^7Y",2,"^7X",false,"^83","^84"],["^ ","^7Y",3,"^7X",false,"^83","^84"]],"^7",189,"^9",189,"^7Z",3,"^85",true,"^Z",["^[",[["~$f","~$p"],["^8:","~$f","~$p"]]],"^11","A convenience alias for `map`."],"~$hcat",["^ ","^7T",null,"^5",["^ ","^6","promesa/core.cljc","^7",281,"^8",7,"^9",281,"^:",11,"^Z",["^[",["^7U",["^[",[["~$f","~$p"],["^8:","~$f","~$p"]]]]],"^11","Chains a function `f` to be executed when the promise `p` is completed\n  (resolved or rejected) and returns a promise that will mirror the\n  promise instance returned by calling `f` with both: value and the\n  exception. The `f` function must return a promise instance.\n\n  The computation will be executed in the completion thread by\n  default; you also can provide a custom executor.\n\n  Intended to be used with `->>`.","^7W",["^ ","^7X",false,"^7Y",3,"^7Z",3,"^7[",[["~$f","~$p"],["^8:","~$f","~$p"]],"^Z",["^[",[["~$f","~$p"],["^8:","~$f","~$p"]]],"^80",["^[",[null,null]]]],"^12","^4K","^6","promesa/core.cljc","^:",11,"^7W",["^ ","^7X",false,"^7Y",3,"^7Z",3,"^7[",[["~$f","~$p"],["^8:","~$f","~$p"]],"^Z",["^[",[["~$f","~$p"],["^8:","~$f","~$p"]]],"^80",["^[",[null,null]]],"^7[",[["~$f","~$p"],["^8:","~$f","~$p"]],"^81",null,"^7Y",3,"^80",["^[",[null,null]],"^8",1,"^7X",false,"^82",[["^ ","^7Y",2,"^7X",false,"^83","^84"],["^ ","^7Y",3,"^7X",false,"^83","^84"]],"^7",281,"^9",281,"^7Z",3,"^85",true,"^Z",["^[",[["~$f","~$p"],["^8:","~$f","~$p"]]],"^11","Chains a function `f` to be executed when the promise `p` is completed\n  (resolved or rejected) and returns a promise that will mirror the\n  promise instance returned by calling `f` with both: value and the\n  exception. The `f` function must return a promise instance.\n\n  The computation will be executed in the completion thread by\n  default; you also can provide a custom executor.\n\n  Intended to be used with `->>`."],"~$handle",["^ ","^7T",null,"^5",["^ ","^6","promesa/core.cljc","^7",230,"^8",7,"^9",230,"^:",13,"^Z",["^[",["^7U",["^[",[["~$p","~$f"],["~$p","~$f","^8:"]]]]],"^11","Chains a function `f` to be executed when the promise `p` is completed\n  (resolved or rejected) and returns a promise completed (resolving or\n  rejecting) with the return value of calling `f` with both: value and\n  the exception; `f` can return a new plain value or promise instance,\n  and automatic unwrapping will be performed.\n\n  The computation will be executed in the completion thread by\n  default; you also can provide a custom executor.\n\n  For performance sensitive code, look at `hmap` and `hcat`.","^7W",["^ ","^7X",false,"^7Y",3,"^7Z",3,"^7[",[["~$p","~$f"],["~$p","~$f","^8:"]],"^Z",["^[",[["~$p","~$f"],["~$p","~$f","^8:"]]],"^80",["^[",[null,null]]]],"^12","^4T","^6","promesa/core.cljc","^:",13,"^7W",["^ ","^7X",false,"^7Y",3,"^7Z",3,"^7[",[["~$p","~$f"],["~$p","~$f","^8:"]],"^Z",["^[",[["~$p","~$f"],["~$p","~$f","^8:"]]],"^80",["^[",[null,null]]],"^7[",[["~$p","~$f"],["~$p","~$f","^8:"]],"^81",null,"^7Y",3,"^80",["^[",[null,null]],"^8",1,"^7X",false,"^82",[["^ ","^7Y",2,"^7X",false,"^83","^84"],["^ ","^7Y",3,"^7X",false,"^83","^84"]],"^7",230,"^9",230,"^7Z",3,"^85",true,"^Z",["^[",[["~$p","~$f"],["~$p","~$f","^8:"]]],"^11","Chains a function `f` to be executed when the promise `p` is completed\n  (resolved or rejected) and returns a promise completed (resolving or\n  rejecting) with the return value of calling `f` with both: value and\n  the exception; `f` can return a new plain value or promise instance,\n  and automatic unwrapping will be performed.\n\n  The computation will be executed in the completion thread by\n  default; you also can provide a custom executor.\n\n  For performance sensitive code, look at `hmap` and `hcat`."],"~$rejected?",["^ ","^7T",null,"^5",["^ ","^6","promesa/core.cljc","^7",110,"^8",7,"^9",110,"^:",16,"^Z",["^[",["^7U",["^[",[["~$p"]]]]],"^11","Returns true if promise `p` is already rejected."],"^12","^3D","^6","promesa/core.cljc","^:",16,"^7[",["^[",[["~$p"]]],"^81",null,"^80",["^[",[null,null]],"^8",1,"^7X",false,"^7",110,"^87","^84","^9",110,"^7Z",1,"^85",true,"^Z",["^[",["^7U",["^[",[["~$p"]]]]],"^11","Returns true if promise `p` is already rejected."],"~$then",["^ ","^7T",null,"^5",["^ ","^6","promesa/core.cljc","^7",134,"^8",7,"^9",134,"^:",11,"^Z",["^[",["^7U",["^[",[["~$p","~$f"],["~$p","~$f","^8:"]]]]],"^11","Chains a function `f` to be executed when the promise `p` is\n  successfully resolved. Returns a promise that will be resolved with\n  the return value of calling `f` with value as single argument; `f`\n  can return a plain value or promise instance, an automatic\n  unwrapping will be performed.\n\n  The computation will be executed in the completion thread by\n  default; you also can provide a custom executor.","^7W",["^ ","^7X",false,"^7Y",3,"^7Z",3,"^7[",[["~$p","~$f"],["~$p","~$f","^8:"]],"^Z",["^[",[["~$p","~$f"],["~$p","~$f","^8:"]]],"^80",["^[",[null,null]]]],"^12","^5>","^6","promesa/core.cljc","^:",11,"^7W",["^ ","^7X",false,"^7Y",3,"^7Z",3,"^7[",[["~$p","~$f"],["~$p","~$f","^8:"]],"^Z",["^[",[["~$p","~$f"],["~$p","~$f","^8:"]]],"^80",["^[",[null,null]]],"^7[",[["~$p","~$f"],["~$p","~$f","^8:"]],"^81",null,"^7Y",3,"^80",["^[",[null,null]],"^8",1,"^7X",false,"^82",[["^ ","^7Y",2,"^7X",false,"^83","^84"],["^ ","^7Y",3,"^7X",false,"^83","^84"]],"^7",134,"^9",134,"^7Z",3,"^85",true,"^Z",["^[",[["~$p","~$f"],["~$p","~$f","^8:"]]],"^11","Chains a function `f` to be executed when the promise `p` is\n  successfully resolved. Returns a promise that will be resolved with\n  the return value of calling `f` with value as single argument; `f`\n  can return a plain value or promise instance, an automatic\n  unwrapping will be performed.\n\n  The computation will be executed in the completion thread by\n  default; you also can provide a custom executor."],"~$thread-call",["^ ","^7T",null,"^5",["^ ","^6","promesa/core.cljc","^7",601,"^8",7,"^9",601,"^:",18,"^Z",["^[",["^7U",["^[",[["~$f"],["^8:","~$f"]]]]],"^11","Analogous to `clojure.core.async/thread` that returns a promise\n  instance instead of the `Future`. Useful for executing synchronous\n  code in a separate thread (also works in cljs).","^7W",["^ ","^7X",false,"^7Y",2,"^7Z",2,"^7[",[["~$f"],["^8:","~$f"]],"^Z",["^[",[["~$f"],["^8:","~$f"]]],"^80",["^[",[null,null]]]],"^12","^3@","^6","promesa/core.cljc","^:",18,"^7W",["^ ","^7X",false,"^7Y",2,"^7Z",2,"^7[",[["~$f"],["^8:","~$f"]],"^Z",["^[",[["~$f"],["^8:","~$f"]]],"^80",["^[",[null,null]]],"^7[",[["~$f"],["^8:","~$f"]],"^81",null,"^7Y",2,"^80",["^[",[null,null]],"^8",1,"^7X",false,"^82",[["^ ","^7Y",1,"^7X",false,"^83","^84"],["^ ","^7Y",2,"^7X",false,"^83","^84"]],"^7",601,"^9",601,"^7Z",2,"^85",true,"^Z",["^[",[["~$f"],["^8:","~$f"]]],"^11","Analogous to `clojure.core.async/thread` that returns a promise\n  instance instead of the `Future`. Useful for executing synchronous\n  code in a separate thread (also works in cljs)."],"~$extract",["^ ","^7T",null,"^5",["^ ","^6","promesa/core.cljc","^7",120,"^8",7,"^9",120,"^:",14,"^Z",["^[",["^7U",["^[",[["~$p"],["~$p","^8@"]]]]],"^11","Returns the current promise value.","^7W",["^ ","^7X",false,"^7Y",2,"^7Z",2,"^7[",[["~$p"],["~$p","^8@"]],"^Z",["^[",[["~$p"],["~$p","^8@"]]],"^80",["^[",[null,null]]]],"^12","^3>","^6","promesa/core.cljc","^:",14,"^7W",["^ ","^7X",false,"^7Y",2,"^7Z",2,"^7[",[["~$p"],["~$p","^8@"]],"^Z",["^[",[["~$p"],["~$p","^8@"]]],"^80",["^[",[null,null]]],"^7[",[["~$p"],["~$p","^8@"]],"^81",null,"^7Y",2,"^80",["^[",[null,null]],"^8",1,"^7X",false,"^82",[["^ ","^7Y",1,"^7X",false,"^83","^84"],["^ ","^7Y",2,"^7X",false,"^83","^84"]],"^7",120,"^9",120,"^7Z",2,"^85",true,"^Z",["^[",[["~$p"],["~$p","^8@"]]],"^11","Returns the current promise value."],"~$map->Recur",["^ ","^7T",null,"^5",["^ ","^6","promesa/core.cljc","^:",17,"^8",12,"^91",true,"^9F","~:map","^7",633,"^9",633,"^Z",["^[",["^7U",["^[",[["~$G__42906"]]]]],"^11","Factory function for promesa.core/Recur, taking a map of keywords to field values."],"^12","^2[","^6","promesa/core.cljc","^:",17,"^7[",["^[",[["^9X"]]],"^81",null,"^80",["^[",[null,null]],"^8",1,"^91",true,"^7X",false,"^9F","^9W","^7",633,"^87","^2R","^9",633,"^7Z",1,"^85",true,"^Z",["^[",["^7U",["^[",[["^9X"]]]]],"^11","Factory function for promesa.core/Recur, taking a map of keywords to field values."],"~$pending?",["^ ","^7T",null,"^5",["^ ","^6","promesa/core.cljc","^7",115,"^8",7,"^9",115,"^:",15,"^Z",["^[",["^7U",["^[",[["~$p"]]]]],"^11","Returns true if promise `p` is stil pending."],"^12","^4H","^6","promesa/core.cljc","^:",15,"^7[",["^[",[["~$p"]]],"^81",null,"^80",["^[",[null,null]],"^8",1,"^7X",false,"^7",115,"^87","^84","^9",115,"^7Z",1,"^85",true,"^Z",["^[",["^7U",["^[",[["~$p"]]]]],"^11","Returns true if promise `p` is stil pending."]],"^26",["^ ","^15","^15","^C","^C","^B","^C","~$c","^C"],"~:cljs.analyzer/constants",["^ ","^24",["^F",["~:promesa.core/default","~:else","~:default","~:bindings","~:pending","^1;","~:vthread","~:thread","~:rejections","~:resolved?"]],"~:order",["^9[","^:3","^:6","^:7","^:0","^:1","^:5","^:4","^:2","^1;"]],"^2=",["^ ","^25",["^F",[]],"^26",["^F",[]]],"^2>",["^ "],"^2?",["^20","^C","^1Y","^C","^22","^1X","^1["]],"^14","^15","~:ns-specs",["^ "],"~:ns-spec-vars",["^F",[]],"~:compiler-options",["^5W",[["^:;","~:static-fns"],true,["^:;","~:shadow-tweaks"],null,["^:;","~:source-map-inline"],null,["^:;","~:elide-asserts"],false,["^:;","~:optimize-constants"],null,["^:;","^2D"],null,["^:;","~:external-config"],null,["^:;","~:tooling-config"],null,["^:;","~:emit-constants"],null,["^:;","~:load-tests"],null,["^:;","~:form-size-threshold"],null,["^:;","~:global-goog-object&array"],null,["^:;","~:data-readers"],null,["^:;","~:infer-externs"],"~:auto",["^:;","^2F"],null,["~:js-options","~:js-provider"],"~:shadow",["~:mode"],"~:dev",["^:;","~:fn-invoke-direct"],null,["^:;","~:source-map"],"/dev/null"]]]